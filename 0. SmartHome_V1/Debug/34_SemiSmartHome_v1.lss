
34_SemiSmartHome_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000391a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  0000391a  000039ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080012e  0080012e  00003a7c  2**0
                  ALLOC
  3 .stab         00003aa4  00000000  00000000  00003a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000152e  00000000  00000000  00007520  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a947  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b832  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c5e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c740  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c9cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d19b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__vector_1>
       8:	0c 94 36 12 	jmp	0x246c	; 0x246c <__vector_2>
       c:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 33       	cpi	r26, 0x38	; 56
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <main>
      8a:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ef       	ldi	r26, 0xFA	; 250
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 1c 	jmp	0x38e0	; 0x38e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 1c 	jmp	0x38a8	; 0x38a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 1c 	jmp	0x38e0	; 0x38e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:


static uint8 ADC_u8BusyFlag = IDLE;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	/*Initializing the Reference voltage configuration*/
#if REFERENCE_SELECTION == AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
#endif


	/*Initializing the result adjustment mode according to the resolution configuration*/
#if ADC_RESOLUTION == EIGHT_BITS
	SET_BIT(ADMUX, ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24

#endif

	/*Implementing the Auto-trigger mode configuration*/
#if ADC_AUTO_TRIGGER == DISABLED
	CLR_BIT(ADCSRA, ADCSRA_ADATE);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24
#endif


	/*Implementing the Interrupt enable mode configuration*/
#if ADC_INTERRUPT_ENABLE == DISABLED
	CLR_BIT(ADCSRA, ADCSRA_ADIE);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	8c 93       	st	X, r24
#endif



	/*Initializing the Prescaler configuration*/
	ADCSRA &= PRESCALER_MASK;
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	88 7f       	andi	r24, 0xF8	; 248
     ba0:	8c 93       	st	X, r24
	ADCSRA |= PRESCALER_SELECTION;
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 60       	ori	r24, 0x07	; 7
     bae:	8c 93       	st	X, r24
#endif*/



	/*Enabling the ADC*/
	SET_BIT(ADCSRA, ADCSRA_ADEN);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24

}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_u8StartConversionSynch>:


uint8 ADC_u8StartConversionSynch(uint8 Copy_u8Channel, uint16* Copy_pu16Result)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	28 97       	sbiw	r28, 0x08	; 8
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	8e 83       	std	Y+6, r24	; 0x06
     bda:	78 87       	std	Y+8, r23	; 0x08
     bdc:	6f 83       	std	Y+7, r22	; 0x07

	uint8 Local_u8ErrorState = OK;
     bde:	1d 82       	std	Y+5, r1	; 0x05

	if (Copy_pu16Result != NULL)
     be0:	8f 81       	ldd	r24, Y+7	; 0x07
     be2:	98 85       	ldd	r25, Y+8	; 0x08
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	09 f4       	brne	.+2      	; 0xbea <ADC_u8StartConversionSynch+0x26>
     be8:	6b c0       	rjmp	.+214    	; 0xcc0 <ADC_u8StartConversionSynch+0xfc>
	{
		/*check if ADC is not busy*/
		if (ADC_u8BusyFlag == IDLE)
     bea:	80 91 02 01 	lds	r24, 0x0102
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <ADC_u8StartConversionSynch+0x30>
     bf2:	63 c0       	rjmp	.+198    	; 0xcba <ADC_u8StartConversionSynch+0xf6>
		{
			uint32 Local_u32TimeoutCounter = 0u;
     bf4:	19 82       	std	Y+1, r1	; 0x01
     bf6:	1a 82       	std	Y+2, r1	; 0x02
     bf8:	1b 82       	std	Y+3, r1	; 0x03
     bfa:	1c 82       	std	Y+4, r1	; 0x04

			/*ADC is now Busy*/
			ADC_u8BusyFlag = BUSY;
     bfc:	85 e0       	ldi	r24, 0x05	; 5
     bfe:	80 93 02 01 	sts	0x0102, r24


			/*Setting the required channel*/
			ADMUX &= CHANNEL_MASK;
     c02:	a7 e2       	ldi	r26, 0x27	; 39
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e7 e2       	ldi	r30, 0x27	; 39
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	80 7e       	andi	r24, 0xE0	; 224
     c0e:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
     c10:	a7 e2       	ldi	r26, 0x27	; 39
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e7 e2       	ldi	r30, 0x27	; 39
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	90 81       	ld	r25, Z
     c1a:	8e 81       	ldd	r24, Y+6	; 0x06
     c1c:	89 2b       	or	r24, r25
     c1e:	8c 93       	st	X, r24

			/*ADC Start Conversion*/
			SET_BIT(ADCSRA, ADCSRA_ADSC);
     c20:	a6 e2       	ldi	r26, 0x26	; 38
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e6 e2       	ldi	r30, 0x26	; 38
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 64       	ori	r24, 0x40	; 64
     c2c:	8c 93       	st	X, r24
     c2e:	0b c0       	rjmp	.+22     	; 0xc46 <ADC_u8StartConversionSynch+0x82>

			/*waiting for the conversion done flag or timeout is passed*/
			while ((GET_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeoutCounter < ADC_u32TIMEOUT))
			{
				Local_u32TimeoutCounter++;
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	9a 81       	ldd	r25, Y+2	; 0x02
     c34:	ab 81       	ldd	r26, Y+3	; 0x03
     c36:	bc 81       	ldd	r27, Y+4	; 0x04
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	a1 1d       	adc	r26, r1
     c3c:	b1 1d       	adc	r27, r1
     c3e:	89 83       	std	Y+1, r24	; 0x01
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	ab 83       	std	Y+3, r26	; 0x03
     c44:	bc 83       	std	Y+4, r27	; 0x04

			/*ADC Start Conversion*/
			SET_BIT(ADCSRA, ADCSRA_ADSC);

			/*waiting for the conversion done flag or timeout is passed*/
			while ((GET_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeoutCounter < ADC_u32TIMEOUT))
     c46:	e6 e2       	ldi	r30, 0x26	; 38
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	82 95       	swap	r24
     c4e:	8f 70       	andi	r24, 0x0F	; 15
     c50:	88 2f       	mov	r24, r24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	81 70       	andi	r24, 0x01	; 1
     c56:	90 70       	andi	r25, 0x00	; 0
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	61 f4       	brne	.+24     	; 0xc74 <ADC_u8StartConversionSynch+0xb0>
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	9a 81       	ldd	r25, Y+2	; 0x02
     c60:	ab 81       	ldd	r26, Y+3	; 0x03
     c62:	bc 81       	ldd	r27, Y+4	; 0x04
     c64:	80 35       	cpi	r24, 0x50	; 80
     c66:	23 ec       	ldi	r18, 0xC3	; 195
     c68:	92 07       	cpc	r25, r18
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	a2 07       	cpc	r26, r18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	b2 07       	cpc	r27, r18
     c72:	f0 f2       	brcs	.-68     	; 0xc30 <ADC_u8StartConversionSynch+0x6c>
			{
				Local_u32TimeoutCounter++;
			}

			if (Local_u32TimeoutCounter >= ADC_u32TIMEOUT)
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	9a 81       	ldd	r25, Y+2	; 0x02
     c78:	ab 81       	ldd	r26, Y+3	; 0x03
     c7a:	bc 81       	ldd	r27, Y+4	; 0x04
     c7c:	80 35       	cpi	r24, 0x50	; 80
     c7e:	23 ec       	ldi	r18, 0xC3	; 195
     c80:	92 07       	cpc	r25, r18
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	a2 07       	cpc	r26, r18
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	b2 07       	cpc	r27, r18
     c8a:	18 f0       	brcs	.+6      	; 0xc92 <ADC_u8StartConversionSynch+0xce>
			{
				/*Loop is broken because flag isn't raised until time out is passed*/
				Local_u8ErrorState = TIMEOUT_ERR;
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8d 83       	std	Y+5, r24	; 0x05
     c90:	19 c0       	rjmp	.+50     	; 0xcc4 <ADC_u8StartConversionSynch+0x100>
			else
			{
				/*Loop is broken because flag is raised before timeout is passed*/

				/*Clearing the flag after conversion done*/
					SET_BIT(ADCSRA, ADCSRA_ADIF);
     c92:	a6 e2       	ldi	r26, 0x26	; 38
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e6 e2       	ldi	r30, 0x26	; 38
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 61       	ori	r24, 0x10	; 16
     c9e:	8c 93       	st	X, r24

				#if ADC_RESOLUTION == EIGHT_BITS
					*Copy_pu16Result = ADCH;
     ca0:	e5 e2       	ldi	r30, 0x25	; 37
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	ef 81       	ldd	r30, Y+7	; 0x07
     cac:	f8 85       	ldd	r31, Y+8	; 0x08
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
					*Copy_pu16Result = ADC;

				#endif

					/*ADC is now Idle*/
					ADC_u8BusyFlag = IDLE;
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	80 93 02 01 	sts	0x0102, r24
     cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <ADC_u8StartConversionSynch+0x100>
		}


		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
     cba:	86 e0       	ldi	r24, 0x06	; 6
     cbc:	8d 83       	std	Y+5, r24	; 0x05
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <ADC_u8StartConversionSynch+0x100>
		}
	}

	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	8d 83       	std	Y+5, r24	; 0x05
	}


	return Local_u8ErrorState;
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05

}
     cc6:	28 96       	adiw	r28, 0x08	; 8
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <ADC_u8StartConversionAsynch>:




uint8 ADC_u8StartConversionAsynch(uint8 Copy_u8Channel, uint16* Copy_pu16Result, void(*Copy_pvNotificationFunc)(void))
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	00 d0       	rcall	.+0      	; 0xcde <ADC_u8StartConversionAsynch+0x6>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <ADC_u8StartConversionAsynch+0x8>
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <ADC_u8StartConversionAsynch+0xa>
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	8a 83       	std	Y+2, r24	; 0x02
     ce8:	7c 83       	std	Y+4, r23	; 0x04
     cea:	6b 83       	std	Y+3, r22	; 0x03
     cec:	5e 83       	std	Y+6, r21	; 0x06
     cee:	4d 83       	std	Y+5, r20	; 0x05
	uint8 Local_u8ErrorState = OK;
     cf0:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	c1 f1       	breq	.+112    	; 0xd6a <ADC_u8StartConversionAsynch+0x92>
     cfa:	8d 81       	ldd	r24, Y+5	; 0x05
     cfc:	9e 81       	ldd	r25, Y+6	; 0x06
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	a1 f1       	breq	.+104    	; 0xd6a <ADC_u8StartConversionAsynch+0x92>
	{

		if (ADC_u8BusyFlag == IDLE)
     d02:	80 91 02 01 	lds	r24, 0x0102
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	69 f5       	brne	.+90     	; 0xd64 <ADC_u8StartConversionAsynch+0x8c>
		{
			/*ADC is now Busy*/
			ADC_u8BusyFlag = BUSY;
     d0a:	85 e0       	ldi	r24, 0x05	; 5
     d0c:	80 93 02 01 	sts	0x0102, r24

			/*Initializes the result pointer globally*/
			ADC_pu16ConversionResult = Copy_pu16Result;
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	90 93 2f 01 	sts	0x012F, r25
     d18:	80 93 2e 01 	sts	0x012E, r24

			/*Initializes the result pointer globally*/
			ADC_pvNotificationFunc = Copy_pvNotificationFunc;
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	9e 81       	ldd	r25, Y+6	; 0x06
     d20:	90 93 31 01 	sts	0x0131, r25
     d24:	80 93 30 01 	sts	0x0130, r24

			/*Setting the required channel*/
			ADMUX &= CHANNEL_MASK;
     d28:	a7 e2       	ldi	r26, 0x27	; 39
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e7 e2       	ldi	r30, 0x27	; 39
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 7e       	andi	r24, 0xE0	; 224
     d34:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
     d36:	a7 e2       	ldi	r26, 0x27	; 39
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e7 e2       	ldi	r30, 0x27	; 39
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	90 81       	ld	r25, Z
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	89 2b       	or	r24, r25
     d44:	8c 93       	st	X, r24

			/*ADC Start Conversion*/
			SET_BIT(ADCSRA, ADCSRA_ADSC);
     d46:	a6 e2       	ldi	r26, 0x26	; 38
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e6 e2       	ldi	r30, 0x26	; 38
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 64       	ori	r24, 0x40	; 64
     d52:	8c 93       	st	X, r24

			/*Enable the ADC conversion complete interrupt*/
			SET_BIT(ADCSRA, ADCSRA_ADIE);
     d54:	a6 e2       	ldi	r26, 0x26	; 38
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e6 e2       	ldi	r30, 0x26	; 38
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	88 60       	ori	r24, 0x08	; 8
     d60:	8c 93       	st	X, r24
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <ADC_u8StartConversionAsynch+0x96>

		}

		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
     d64:	86 e0       	ldi	r24, 0x06	; 6
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <ADC_u8StartConversionAsynch+0x96>

	}

	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d70:	26 96       	adiw	r28, 0x06	; 6
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <__vector_16>:
 *@brief ADC Conversion complete ISR
 *
 */
void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pu16ConversionResult != NULL)
     dac:	80 91 2e 01 	lds	r24, 0x012E
     db0:	90 91 2f 01 	lds	r25, 0x012F
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	59 f0       	breq	.+22     	; 0xdce <__vector_16+0x4c>
	{
		#if ADC_RESOLUTION == EIGHT_BITS
			*ADC_pu16ConversionResult = ADCH;
     db8:	a0 91 2e 01 	lds	r26, 0x012E
     dbc:	b0 91 2f 01 	lds	r27, 0x012F
     dc0:	e5 e2       	ldi	r30, 0x25	; 37
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	8d 93       	st	X+, r24
     dcc:	9c 93       	st	X, r25
		/*just to follow MESRA rules*/
		/*ADC_puConversionResult is NULL*/
	}

	/*Disable the ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA, ADCSRA_ADIE);
     dce:	a6 e2       	ldi	r26, 0x26	; 38
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e6 e2       	ldi	r30, 0x26	; 38
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	87 7f       	andi	r24, 0xF7	; 247
     dda:	8c 93       	st	X, r24


	/*ADC is now Idle*/
	ADC_u8BusyFlag = IDLE;
     ddc:	84 e0       	ldi	r24, 0x04	; 4
     dde:	80 93 02 01 	sts	0x0102, r24

	/*Invoke the application notification function*/
	if (ADC_pvNotificationFunc != NULL)
     de2:	80 91 30 01 	lds	r24, 0x0130
     de6:	90 91 31 01 	lds	r25, 0x0131
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	29 f0       	breq	.+10     	; 0xdf8 <__vector_16+0x76>
	{
		ADC_pvNotificationFunc();
     dee:	e0 91 30 01 	lds	r30, 0x0130
     df2:	f0 91 31 01 	lds	r31, 0x0131
     df6:	09 95       	icall

	else
	{
		/*ADC_pvNotificationFunc is NULL*/
	}
}
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	ff 91       	pop	r31
     dfe:	ef 91       	pop	r30
     e00:	bf 91       	pop	r27
     e02:	af 91       	pop	r26
     e04:	9f 91       	pop	r25
     e06:	8f 91       	pop	r24
     e08:	7f 91       	pop	r23
     e0a:	6f 91       	pop	r22
     e0c:	5f 91       	pop	r21
     e0e:	4f 91       	pop	r20
     e10:	3f 91       	pop	r19
     e12:	2f 91       	pop	r18
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti

00000e1e <voidSendEnablePulse>:
#include "CLCD_prv.h"
#include "CLCD_cfg.h"


static void voidSendEnablePulse(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	2e 97       	sbiw	r28, 0x0e	; 14
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_HIGH);
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	62 e0       	ldi	r22, 0x02	; 2
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a0 e0       	ldi	r26, 0x00	; 0
     e42:	b0 e4       	ldi	r27, 0x40	; 64
     e44:	8b 87       	std	Y+11, r24	; 0x0b
     e46:	9c 87       	std	Y+12, r25	; 0x0c
     e48:	ad 87       	std	Y+13, r26	; 0x0d
     e4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e50:	8d 85       	ldd	r24, Y+13	; 0x0d
     e52:	9e 85       	ldd	r25, Y+14	; 0x0e
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	4a e7       	ldi	r20, 0x7A	; 122
     e5a:	55 e4       	ldi	r21, 0x45	; 69
     e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	8f 83       	std	Y+7, r24	; 0x07
     e66:	98 87       	std	Y+8, r25	; 0x08
     e68:	a9 87       	std	Y+9, r26	; 0x09
     e6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e6c:	6f 81       	ldd	r22, Y+7	; 0x07
     e6e:	78 85       	ldd	r23, Y+8	; 0x08
     e70:	89 85       	ldd	r24, Y+9	; 0x09
     e72:	9a 85       	ldd	r25, Y+10	; 0x0a
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e8       	ldi	r20, 0x80	; 128
     e7a:	5f e3       	ldi	r21, 0x3F	; 63
     e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e80:	88 23       	and	r24, r24
     e82:	2c f4       	brge	.+10     	; 0xe8e <voidSendEnablePulse+0x70>
		__ticks = 1;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	3f c0       	rjmp	.+126    	; 0xf0c <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	3f ef       	ldi	r19, 0xFF	; 255
     e9a:	4f e7       	ldi	r20, 0x7F	; 127
     e9c:	57 e4       	ldi	r21, 0x47	; 71
     e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ea2:	18 16       	cp	r1, r24
     ea4:	4c f5       	brge	.+82     	; 0xef8 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
     eac:	9e 85       	ldd	r25, Y+14	; 0x0e
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e2       	ldi	r20, 0x20	; 32
     eb4:	51 e4       	ldi	r21, 0x41	; 65
     eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	bc 01       	movw	r22, r24
     ec0:	cd 01       	movw	r24, r26
     ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	9e 83       	std	Y+6, r25	; 0x06
     ecc:	8d 83       	std	Y+5, r24	; 0x05
     ece:	0f c0       	rjmp	.+30     	; 0xeee <voidSendEnablePulse+0xd0>
     ed0:	80 e9       	ldi	r24, 0x90	; 144
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	9c 83       	std	Y+4, r25	; 0x04
     ed6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <voidSendEnablePulse+0xbe>
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	9e 83       	std	Y+6, r25	; 0x06
     eec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eee:	8d 81       	ldd	r24, Y+5	; 0x05
     ef0:	9e 81       	ldd	r25, Y+6	; 0x06
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	69 f7       	brne	.-38     	; 0xed0 <voidSendEnablePulse+0xb2>
     ef6:	14 c0       	rjmp	.+40     	; 0xf20 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef8:	6f 81       	ldd	r22, Y+7	; 0x07
     efa:	78 85       	ldd	r23, Y+8	; 0x08
     efc:	89 85       	ldd	r24, Y+9	; 0x09
     efe:	9a 85       	ldd	r25, Y+10	; 0x0a
     f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	9e 83       	std	Y+6, r25	; 0x06
     f0a:	8d 83       	std	Y+5, r24	; 0x05
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <voidSendEnablePulse+0xfa>
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT, CLCD_E_PIN, DIO_u8PIN_LOW);
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	62 e0       	ldi	r22, 0x02	; 2
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
}
     f2a:	2e 96       	adiw	r28, 0x0e	; 14
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <voidSetLCDHalfDataPort>:


static void voidSetLCDHalfDataPort(uint8 Copy_u8Nipple)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	0f 92       	push	r0
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D4_PIN, GET_BIT(Copy_u8Nipple,0));
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	98 2f       	mov	r25, r24
     f4c:	91 70       	andi	r25, 0x01	; 1
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	63 e0       	ldi	r22, 0x03	; 3
     f52:	49 2f       	mov	r20, r25
     f54:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D5_PIN, GET_BIT(Copy_u8Nipple,1));
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	86 95       	lsr	r24
     f5c:	98 2f       	mov	r25, r24
     f5e:	91 70       	andi	r25, 0x01	; 1
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	64 e0       	ldi	r22, 0x04	; 4
     f64:	49 2f       	mov	r20, r25
     f66:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D6_PIN, GET_BIT(Copy_u8Nipple,2));
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	86 95       	lsr	r24
     f6e:	86 95       	lsr	r24
     f70:	98 2f       	mov	r25, r24
     f72:	91 70       	andi	r25, 0x01	; 1
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	65 e0       	ldi	r22, 0x05	; 5
     f78:	49 2f       	mov	r20, r25
     f7a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT, CLCD_D7_PIN, GET_BIT(Copy_u8Nipple,3));
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	86 95       	lsr	r24
     f82:	86 95       	lsr	r24
     f84:	86 95       	lsr	r24
     f86:	98 2f       	mov	r25, r24
     f88:	91 70       	andi	r25, 0x01	; 1
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	66 e0       	ldi	r22, 0x06	; 6
     f8e:	49 2f       	mov	r20, r25
     f90:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
}
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <CLCD_voidSendCmd>:

void CLCD_voidSendCmd(uint8 Copy_u8Cmd)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	0f 92       	push	r0
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	89 83       	std	Y+1, r24	; 0x01

	/*Set RS pin to low for command mode*/
	DIO_u8SetPinValue(DIO_u8PORTA, CLCD_RS_PIN, DIO_u8PIN_LOW);
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
	/*Send The command on data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Cmd);
	CLCD_voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_u8Cmd >> 4); /*Send the 4 most bits to the LCD*/
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	82 95       	swap	r24
     fb6:	8f 70       	andi	r24, 0x0F	; 15
     fb8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     fbc:	0e 94 0f 07 	call	0xe1e	; 0xe1e <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*Send the 4 least bits to the LCD*/
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     fc6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <voidSendEnablePulse>

#endif

}
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <CLCD_voidSendData>:



void CLCD_voidSendData(uint8 Copy_u8Data)
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	0f 92       	push	r0
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	89 83       	std	Y+1, r24	; 0x01

	/*Set RS pin to HIGH for data mode*/
	DIO_u8SetPinValue(DIO_u8PORTA, CLCD_RS_PIN, DIO_u8PIN_HIGH);
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	41 e0       	ldi	r20, 0x01	; 1
     fe4:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
	/*Send The Data on data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Data);
	CLCD_voidSendEnablePulse();

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_u8Data >> 4);
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	82 95       	swap	r24
     fec:	8f 70       	andi	r24, 0x0F	; 15
     fee:	0e 94 9e 07 	call	0xf3c	; 0xf3c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     ff2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
     ffc:	0e 94 0f 07 	call	0xe1e	; 0xe1e <voidSendEnablePulse>

#endif


}
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <CLCD_voidInit>:


void CLCD_voidInit(void)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	2e 97       	sbiw	r28, 0x0e	; 14
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a0 e2       	ldi	r26, 0x20	; 32
    1022:	b2 e4       	ldi	r27, 0x42	; 66
    1024:	8b 87       	std	Y+11, r24	; 0x0b
    1026:	9c 87       	std	Y+12, r25	; 0x0c
    1028:	ad 87       	std	Y+13, r26	; 0x0d
    102a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102c:	6b 85       	ldd	r22, Y+11	; 0x0b
    102e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1030:	8d 85       	ldd	r24, Y+13	; 0x0d
    1032:	9e 85       	ldd	r25, Y+14	; 0x0e
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	4a e7       	ldi	r20, 0x7A	; 122
    103a:	55 e4       	ldi	r21, 0x45	; 69
    103c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	8f 83       	std	Y+7, r24	; 0x07
    1046:	98 87       	std	Y+8, r25	; 0x08
    1048:	a9 87       	std	Y+9, r26	; 0x09
    104a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5f e3       	ldi	r21, 0x3F	; 63
    105c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1060:	88 23       	and	r24, r24
    1062:	2c f4       	brge	.+10     	; 0x106e <CLCD_voidInit+0x66>
		__ticks = 1;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	3f c0       	rjmp	.+126    	; 0x10ec <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    106e:	6f 81       	ldd	r22, Y+7	; 0x07
    1070:	78 85       	ldd	r23, Y+8	; 0x08
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	3f ef       	ldi	r19, 0xFF	; 255
    107a:	4f e7       	ldi	r20, 0x7F	; 127
    107c:	57 e4       	ldi	r21, 0x47	; 71
    107e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1082:	18 16       	cp	r1, r24
    1084:	4c f5       	brge	.+82     	; 0x10d8 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1086:	6b 85       	ldd	r22, Y+11	; 0x0b
    1088:	7c 85       	ldd	r23, Y+12	; 0x0c
    108a:	8d 85       	ldd	r24, Y+13	; 0x0d
    108c:	9e 85       	ldd	r25, Y+14	; 0x0e
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e2       	ldi	r20, 0x20	; 32
    1094:	51 e4       	ldi	r21, 0x41	; 65
    1096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	bc 01       	movw	r22, r24
    10a0:	cd 01       	movw	r24, r26
    10a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	0f c0       	rjmp	.+30     	; 0x10ce <CLCD_voidInit+0xc6>
    10b0:	80 e9       	ldi	r24, 0x90	; 144
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	9c 83       	std	Y+4, r25	; 0x04
    10b6:	8b 83       	std	Y+3, r24	; 0x03
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	9c 81       	ldd	r25, Y+4	; 0x04
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <CLCD_voidInit+0xb4>
    10c0:	9c 83       	std	Y+4, r25	; 0x04
    10c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	69 f7       	brne	.-38     	; 0x10b0 <CLCD_voidInit+0xa8>
    10d6:	14 c0       	rjmp	.+40     	; 0x1100 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d8:	6f 81       	ldd	r22, Y+7	; 0x07
    10da:	78 85       	ldd	r23, Y+8	; 0x08
    10dc:	89 85       	ldd	r24, Y+9	; 0x09
    10de:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 83       	std	Y+5, r24	; 0x05
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <CLCD_voidInit+0xf0>
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
	/*Function Set command: 2 lines, 5*7 font size*/
#if CLCD_OP_MODE == EIGHT_BIT_MODE
	CLCD_voidSendCmd(0b00111000);

#elif CLCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	0e 94 9e 07 	call	0xf3c	; 0xf3c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1106:	0e 94 0f 07 	call	0xe1e	; 0xe1e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1110:	0e 94 0f 07 	call	0xe1e	; 0xe1e <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
    1114:	88 e0       	ldi	r24, 0x08	; 8
    1116:	0e 94 9e 07 	call	0xf3c	; 0xf3c <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    111a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <voidSendEnablePulse>

#endif
	/*we don't need to make another delay, as CLCD_voidSendCmd have 2ms delay*/

	/*Display ON/OFF control: Display enable, Cursor and blink disable*/
	CLCD_voidSendCmd(0b00001100);
    111e:	8c e0       	ldi	r24, 0x0C	; 12
    1120:	0e 94 ce 07 	call	0xf9c	; 0xf9c <CLCD_voidSendCmd>

	/*Clearing The Display*/
	CLCD_voidSendCmd(1);
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	0e 94 ce 07 	call	0xf9c	; 0xf9c <CLCD_voidSendCmd>

}
    112a:	2e 96       	adiw	r28, 0x0e	; 14
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <CLCD_u8SendString>:


uint8 CLCD_u8SendString(const char* Copy_chString)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <CLCD_u8SendString+0x6>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <CLCD_u8SendString+0x8>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	9c 83       	std	Y+4, r25	; 0x04
    114a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Local_u8ErrorState = OK;
    114c:	1a 82       	std	Y+2, r1	; 0x02
	if (Copy_chString != NULL)
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	e1 f0       	breq	.+56     	; 0x118e <CLCD_u8SendString+0x52>
	{
		uint8 Local_u8Itterator = 0u;
    1156:	19 82       	std	Y+1, r1	; 0x01
    1158:	0e c0       	rjmp	.+28     	; 0x1176 <CLCD_u8SendString+0x3a>
		while (Copy_chString[Local_u8Itterator] != '\0')
		{
			CLCD_voidSendData(Copy_chString[Local_u8Itterator]);
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	fc 01       	movw	r30, r24
    1166:	e2 0f       	add	r30, r18
    1168:	f3 1f       	adc	r31, r19
    116a:	80 81       	ld	r24, Z
    116c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
			Local_u8Itterator++;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	8f 5f       	subi	r24, 0xFF	; 255
    1174:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 Local_u8ErrorState = OK;
	if (Copy_chString != NULL)
	{
		uint8 Local_u8Itterator = 0u;
		while (Copy_chString[Local_u8Itterator] != '\0')
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	fc 01       	movw	r30, r24
    1182:	e2 0f       	add	r30, r18
    1184:	f3 1f       	adc	r31, r19
    1186:	80 81       	ld	r24, Z
    1188:	88 23       	and	r24, r24
    118a:	39 f7       	brne	.-50     	; 0x115a <CLCD_u8SendString+0x1e>
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <CLCD_u8SendString+0x56>
		}
	}

	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	8a 83       	std	Y+2, r24	; 0x02
	}


	return Local_u8ErrorState;
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <CLCD_voidSendNumber>:


void CLCD_voidSendNumber(sint32 Copy_s32Number)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	61 97       	sbiw	r28, 0x11	; 17
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	6e 87       	std	Y+14, r22	; 0x0e
    11b8:	7f 87       	std	Y+15, r23	; 0x0f
    11ba:	88 8b       	std	Y+16, r24	; 0x10
    11bc:	99 8b       	std	Y+17, r25	; 0x11
	    /*Another Implementation for the same function*/


	    char Local_chNumberArr[10];
	    uint8 Local_u8RightDigit;
	    uint8 Local_u8Counter1 = 0;
    11be:	1a 82       	std	Y+2, r1	; 0x02
	    sint8 Local_s8Counter2;

	    if (Copy_s32Number == 0)
    11c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    11c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    11c4:	a8 89       	ldd	r26, Y+16	; 0x10
    11c6:	b9 89       	ldd	r27, Y+17	; 0x11
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	a1 05       	cpc	r26, r1
    11cc:	b1 05       	cpc	r27, r1
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <CLCD_voidSendNumber+0x36>
	    {
	    	CLCD_voidSendData('0');
    11d0:	80 e3       	ldi	r24, 0x30	; 48
    11d2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
    11d6:	69 c0       	rjmp	.+210    	; 0x12aa <CLCD_voidSendNumber+0x108>
	    	return;
	    }

	    else if (Copy_s32Number < 0)
    11d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    11da:	9f 85       	ldd	r25, Y+15	; 0x0f
    11dc:	a8 89       	ldd	r26, Y+16	; 0x10
    11de:	b9 89       	ldd	r27, Y+17	; 0x11
    11e0:	bb 23       	and	r27, r27
    11e2:	0c f0       	brlt	.+2      	; 0x11e6 <CLCD_voidSendNumber+0x44>
    11e4:	43 c0       	rjmp	.+134    	; 0x126c <CLCD_voidSendNumber+0xca>
	    {
	    	CLCD_voidSendData('-');
    11e6:	8d e2       	ldi	r24, 0x2D	; 45
    11e8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
	    	Copy_s32Number *= -1;
    11ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    11ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    11f0:	a8 89       	ldd	r26, Y+16	; 0x10
    11f2:	b9 89       	ldd	r27, Y+17	; 0x11
    11f4:	b0 95       	com	r27
    11f6:	a0 95       	com	r26
    11f8:	90 95       	com	r25
    11fa:	81 95       	neg	r24
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	af 4f       	sbci	r26, 0xFF	; 255
    1200:	bf 4f       	sbci	r27, 0xFF	; 255
    1202:	8e 87       	std	Y+14, r24	; 0x0e
    1204:	9f 87       	std	Y+15, r25	; 0x0f
    1206:	a8 8b       	std	Y+16, r26	; 0x10
    1208:	b9 8b       	std	Y+17, r27	; 0x11
    120a:	30 c0       	rjmp	.+96     	; 0x126c <CLCD_voidSendNumber+0xca>
	    }

	    while (Copy_s32Number != 0)
	    {
	    	Local_u8RightDigit = Copy_s32Number % 10;		//Extracts the right most digit
    120c:	8e 85       	ldd	r24, Y+14	; 0x0e
    120e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1210:	a8 89       	ldd	r26, Y+16	; 0x10
    1212:	b9 89       	ldd	r27, Y+17	; 0x11
    1214:	2a e0       	ldi	r18, 0x0A	; 10
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	bc 01       	movw	r22, r24
    121e:	cd 01       	movw	r24, r26
    1220:	0e 94 17 1c 	call	0x382e	; 0x382e <__divmodsi4>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	8b 83       	std	Y+3, r24	; 0x03
	    	Copy_s32Number /= 10;
    122a:	8e 85       	ldd	r24, Y+14	; 0x0e
    122c:	9f 85       	ldd	r25, Y+15	; 0x0f
    122e:	a8 89       	ldd	r26, Y+16	; 0x10
    1230:	b9 89       	ldd	r27, Y+17	; 0x11
    1232:	2a e0       	ldi	r18, 0x0A	; 10
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	bc 01       	movw	r22, r24
    123c:	cd 01       	movw	r24, r26
    123e:	0e 94 17 1c 	call	0x382e	; 0x382e <__divmodsi4>
    1242:	da 01       	movw	r26, r20
    1244:	c9 01       	movw	r24, r18
    1246:	8e 87       	std	Y+14, r24	; 0x0e
    1248:	9f 87       	std	Y+15, r25	; 0x0f
    124a:	a8 8b       	std	Y+16, r26	; 0x10
    124c:	b9 8b       	std	Y+17, r27	; 0x11
	    	Local_chNumberArr[Local_u8Counter1] = Local_u8RightDigit + '0';		//Store that dig in array
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	48 2f       	mov	r20, r24
    1258:	40 5d       	subi	r20, 0xD0	; 208
    125a:	ce 01       	movw	r24, r28
    125c:	04 96       	adiw	r24, 0x04	; 4
    125e:	fc 01       	movw	r30, r24
    1260:	e2 0f       	add	r30, r18
    1262:	f3 1f       	adc	r31, r19
    1264:	40 83       	st	Z, r20
	    	Local_u8Counter1++;
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	8a 83       	std	Y+2, r24	; 0x02
	    {
	    	CLCD_voidSendData('-');
	    	Copy_s32Number *= -1;
	    }

	    while (Copy_s32Number != 0)
    126c:	8e 85       	ldd	r24, Y+14	; 0x0e
    126e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1270:	a8 89       	ldd	r26, Y+16	; 0x10
    1272:	b9 89       	ldd	r27, Y+17	; 0x11
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	a1 05       	cpc	r26, r1
    1278:	b1 05       	cpc	r27, r1
    127a:	41 f6       	brne	.-112    	; 0x120c <CLCD_voidSendNumber+0x6a>
	    	Copy_s32Number /= 10;
	    	Local_chNumberArr[Local_u8Counter1] = Local_u8RightDigit + '0';		//Store that dig in array
	    	Local_u8Counter1++;
	    }

	    for (Local_s8Counter2 = Local_u8Counter1 - 1; Local_s8Counter2 >= 0; Local_s8Counter2--)
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	81 50       	subi	r24, 0x01	; 1
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	10 c0       	rjmp	.+32     	; 0x12a4 <CLCD_voidSendNumber+0x102>
	    {
	    	CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	28 2f       	mov	r18, r24
    1288:	33 27       	eor	r19, r19
    128a:	27 fd       	sbrc	r18, 7
    128c:	30 95       	com	r19
    128e:	ce 01       	movw	r24, r28
    1290:	04 96       	adiw	r24, 0x04	; 4
    1292:	fc 01       	movw	r30, r24
    1294:	e2 0f       	add	r30, r18
    1296:	f3 1f       	adc	r31, r19
    1298:	80 81       	ld	r24, Z
    129a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
	    	Copy_s32Number /= 10;
	    	Local_chNumberArr[Local_u8Counter1] = Local_u8RightDigit + '0';		//Store that dig in array
	    	Local_u8Counter1++;
	    }

	    for (Local_s8Counter2 = Local_u8Counter1 - 1; Local_s8Counter2 >= 0; Local_s8Counter2--)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	81 50       	subi	r24, 0x01	; 1
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	88 23       	and	r24, r24
    12a8:	6c f7       	brge	.-38     	; 0x1284 <CLCD_voidSendNumber+0xe2>
	    {
	    	CLCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
	    }

}
    12aa:	61 96       	adiw	r28, 0x11	; 17
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <CLCD_voidGoToXY+0x6>
    12c2:	0f 92       	push	r0
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	8a 83       	std	Y+2, r24	; 0x02
    12ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8DDRamAdd;

	if (Copy_u8YPos == 0u)
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	88 23       	and	r24, r24
    12d0:	19 f4       	brne	.+6      	; 0x12d8 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8DDRamAdd = Copy_u8XPos;
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <CLCD_voidGoToXY+0x28>
	}

	else if (Copy_u8YPos == 1u)
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	19 f4       	brne	.+6      	; 0x12e4 <CLCD_voidGoToXY+0x28>
	{
		Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	80 5c       	subi	r24, 0xC0	; 192
    12e2:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Set bit 7, for setting DDRAM address command*/
	SET_BIT(Local_u8DDRamAdd, 7);
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	80 68       	ori	r24, 0x80	; 128
    12e8:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSendCmd(Local_u8DDRamAdd);
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	0e 94 ce 07 	call	0xf9c	; 0xf9c <CLCD_voidSendCmd>
}
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <CLCD_voidSendSpecialChar>:

void CLCD_voidSendSpecialChar(uint8 *Copy_u8Pattern, uint8 Copy_u8PatternNumber, uint8 Copy_u8XPos, uint8 Copy_u8YPos)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	27 97       	sbiw	r28, 0x07	; 7
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
    1314:	6d 83       	std	Y+5, r22	; 0x05
    1316:	4e 83       	std	Y+6, r20	; 0x06
    1318:	2f 83       	std	Y+7, r18	; 0x07
	uint8 Local_u8CGRAMAdrs = Copy_u8PatternNumber * 8u;
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8LoopCounter;

	/*Set bit number6, for Set_Address of CG command from datasheet*/
	SET_BIT(Local_u8CGRAMAdrs, 6);
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	80 64       	ori	r24, 0x40	; 64
    1332:	8a 83       	std	Y+2, r24	; 0x02

	/*select the address in CGRAM*/
	CLCD_voidSendCmd(Local_u8CGRAMAdrs);
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	0e 94 ce 07 	call	0xf9c	; 0xf9c <CLCD_voidSendCmd>

	/*Write the patter into CGRAM*/
	for (Local_u8LoopCounter = 0; Local_u8LoopCounter < 8u; Local_u8LoopCounter++)
    133a:	19 82       	std	Y+1, r1	; 0x01
    133c:	0e c0       	rjmp	.+28     	; 0x135a <CLCD_voidSendSpecialChar+0x5e>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	fc 01       	movw	r30, r24
    134a:	e2 0f       	add	r30, r18
    134c:	f3 1f       	adc	r31, r19
    134e:	80 81       	ld	r24, Z
    1350:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>

	/*select the address in CGRAM*/
	CLCD_voidSendCmd(Local_u8CGRAMAdrs);

	/*Write the patter into CGRAM*/
	for (Local_u8LoopCounter = 0; Local_u8LoopCounter < 8u; Local_u8LoopCounter++)
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	8f 5f       	subi	r24, 0xFF	; 255
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	88 30       	cpi	r24, 0x08	; 8
    135e:	78 f3       	brcs	.-34     	; 0x133e <CLCD_voidSendSpecialChar+0x42>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
	}

	/*back to DDRAM, to display the patterns*/
	CLCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    1360:	8e 81       	ldd	r24, Y+6	; 0x06
    1362:	6f 81       	ldd	r22, Y+7	; 0x07
    1364:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>

	/*Display the pattern written inside the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>

}
    136e:	27 96       	adiw	r28, 0x07	; 7
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <CLCD_voidSendBinary>:

void CLCD_voidSendBinary(sint32 Copy_s32DecimalNumber)
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	63 97       	sbiw	r28, 0x13	; 19
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	68 8b       	std	Y+16, r22	; 0x10
    1396:	79 8b       	std	Y+17, r23	; 0x11
    1398:	8a 8b       	std	Y+18, r24	; 0x12
    139a:	9b 8b       	std	Y+19, r25	; 0x13
	uint8 Local_u8DigitsArr[14];
	sint8 Local_s8DigitIndex;

	for (Local_s8DigitIndex = 0; Local_s8DigitIndex < 14; Local_s8DigitIndex++)
    139c:	19 82       	std	Y+1, r1	; 0x01
    139e:	20 c0       	rjmp	.+64     	; 0x13e0 <CLCD_voidSendBinary+0x60>
	{
		Local_u8DigitsArr[Local_s8DigitIndex] = GET_BIT(Copy_s32DecimalNumber, Local_s8DigitIndex);
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	48 2f       	mov	r20, r24
    13a4:	55 27       	eor	r21, r21
    13a6:	47 fd       	sbrc	r20, 7
    13a8:	50 95       	com	r21
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	28 2f       	mov	r18, r24
    13ae:	33 27       	eor	r19, r19
    13b0:	27 fd       	sbrc	r18, 7
    13b2:	30 95       	com	r19
    13b4:	88 89       	ldd	r24, Y+16	; 0x10
    13b6:	99 89       	ldd	r25, Y+17	; 0x11
    13b8:	aa 89       	ldd	r26, Y+18	; 0x12
    13ba:	bb 89       	ldd	r27, Y+19	; 0x13
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <CLCD_voidSendBinary+0x46>
    13be:	b5 95       	asr	r27
    13c0:	a7 95       	ror	r26
    13c2:	97 95       	ror	r25
    13c4:	87 95       	ror	r24
    13c6:	2a 95       	dec	r18
    13c8:	d2 f7       	brpl	.-12     	; 0x13be <CLCD_voidSendBinary+0x3e>
    13ca:	28 2f       	mov	r18, r24
    13cc:	21 70       	andi	r18, 0x01	; 1
    13ce:	ce 01       	movw	r24, r28
    13d0:	02 96       	adiw	r24, 0x02	; 2
    13d2:	fc 01       	movw	r30, r24
    13d4:	e4 0f       	add	r30, r20
    13d6:	f5 1f       	adc	r31, r21
    13d8:	20 83       	st	Z, r18
void CLCD_voidSendBinary(sint32 Copy_s32DecimalNumber)
{
	uint8 Local_u8DigitsArr[14];
	sint8 Local_s8DigitIndex;

	for (Local_s8DigitIndex = 0; Local_s8DigitIndex < 14; Local_s8DigitIndex++)
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	8f 5f       	subi	r24, 0xFF	; 255
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	8e 30       	cpi	r24, 0x0E	; 14
    13e4:	ec f2       	brlt	.-70     	; 0x13a0 <CLCD_voidSendBinary+0x20>
	{
		Local_u8DigitsArr[Local_s8DigitIndex] = GET_BIT(Copy_s32DecimalNumber, Local_s8DigitIndex);
	}

	CLCD_voidSendNumber(Copy_s32DecimalNumber);
    13e6:	88 89       	ldd	r24, Y+16	; 0x10
    13e8:	99 89       	ldd	r25, Y+17	; 0x11
    13ea:	aa 89       	ldd	r26, Y+18	; 0x12
    13ec:	bb 89       	ldd	r27, Y+19	; 0x13
    13ee:	bc 01       	movw	r22, r24
    13f0:	cd 01       	movw	r24, r26
    13f2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <CLCD_voidSendNumber>
	CLCD_u8SendString(" to Binary:");
    13f6:	80 e6       	ldi	r24, 0x60	; 96
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>
	CLCD_voidGoToXY(0,1);
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>
	CLCD_u8SendString("0b");
    1406:	8c e6       	ldi	r24, 0x6C	; 108
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>

	for (Local_s8DigitIndex = 13; Local_s8DigitIndex >= 0; Local_s8DigitIndex--)
    140e:	8d e0       	ldi	r24, 0x0D	; 13
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	16 c0       	rjmp	.+44     	; 0x1440 <CLCD_voidSendBinary+0xc0>
	{
		CLCD_voidSendNumber(Local_u8DigitsArr[Local_s8DigitIndex]);
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	28 2f       	mov	r18, r24
    1418:	33 27       	eor	r19, r19
    141a:	27 fd       	sbrc	r18, 7
    141c:	30 95       	com	r19
    141e:	ce 01       	movw	r24, r28
    1420:	02 96       	adiw	r24, 0x02	; 2
    1422:	fc 01       	movw	r30, r24
    1424:	e2 0f       	add	r30, r18
    1426:	f3 1f       	adc	r31, r19
    1428:	80 81       	ld	r24, Z
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 e0       	ldi	r26, 0x00	; 0
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <CLCD_voidSendNumber>
	CLCD_voidSendNumber(Copy_s32DecimalNumber);
	CLCD_u8SendString(" to Binary:");
	CLCD_voidGoToXY(0,1);
	CLCD_u8SendString("0b");

	for (Local_s8DigitIndex = 13; Local_s8DigitIndex >= 0; Local_s8DigitIndex--)
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	81 50       	subi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	88 23       	and	r24, r24
    1444:	3c f7       	brge	.-50     	; 0x1414 <CLCD_voidSendBinary+0x94>
	{
		CLCD_voidSendNumber(Local_u8DigitsArr[Local_s8DigitIndex]);
	}


}
    1446:	63 96       	adiw	r28, 0x13	; 19
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <CLCD_voidSendHex>:


void CLCD_voidSendHex(sint32 Copy_s32DecimalNumber)
{
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	69 97       	sbiw	r28, 0x19	; 25
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	6c 8b       	std	Y+20, r22	; 0x14
    1472:	7d 8b       	std	Y+21, r23	; 0x15
    1474:	8e 8b       	std	Y+22, r24	; 0x16
    1476:	9f 8b       	std	Y+23, r25	; 0x17
		uint8 Local_u8DigitsArr[14];
		sint8 Local_s8DigitIndex;
		sint32 Local_s8Holder = Copy_s32DecimalNumber;
    1478:	8c 89       	ldd	r24, Y+20	; 0x14
    147a:	9d 89       	ldd	r25, Y+21	; 0x15
    147c:	ae 89       	ldd	r26, Y+22	; 0x16
    147e:	bf 89       	ldd	r27, Y+23	; 0x17
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	ab 83       	std	Y+3, r26	; 0x03
    1486:	bc 83       	std	Y+4, r27	; 0x04

		for (Local_s8DigitIndex = 13; Local_s8DigitIndex >= 0;)
    1488:	8d e0       	ldi	r24, 0x0D	; 13
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	cb c0       	rjmp	.+406    	; 0x1624 <CLCD_voidSendHex+0x1cc>





			if (Copy_s32DecimalNumber % 16 == Copy_s32DecimalNumber)
    148e:	8c 89       	ldd	r24, Y+20	; 0x14
    1490:	9d 89       	ldd	r25, Y+21	; 0x15
    1492:	ae 89       	ldd	r26, Y+22	; 0x16
    1494:	bf 89       	ldd	r27, Y+23	; 0x17
    1496:	20 e1       	ldi	r18, 0x10	; 16
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 17 1c 	call	0x382e	; 0x382e <__divmodsi4>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9c 01       	movw	r18, r24
    14ac:	ad 01       	movw	r20, r26
    14ae:	8c 89       	ldd	r24, Y+20	; 0x14
    14b0:	9d 89       	ldd	r25, Y+21	; 0x15
    14b2:	ae 89       	ldd	r26, Y+22	; 0x16
    14b4:	bf 89       	ldd	r27, Y+23	; 0x17
    14b6:	28 17       	cp	r18, r24
    14b8:	39 07       	cpc	r19, r25
    14ba:	4a 07       	cpc	r20, r26
    14bc:	5b 07       	cpc	r21, r27
    14be:	01 f5       	brne	.+64     	; 0x1500 <CLCD_voidSendHex+0xa8>
			{
				Local_u8DigitsArr[Local_s8DigitIndex] = 0;
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	28 2f       	mov	r18, r24
    14c4:	33 27       	eor	r19, r19
    14c6:	27 fd       	sbrc	r18, 7
    14c8:	30 95       	com	r19
    14ca:	ce 01       	movw	r24, r28
    14cc:	06 96       	adiw	r24, 0x06	; 6
    14ce:	fc 01       	movw	r30, r24
    14d0:	e2 0f       	add	r30, r18
    14d2:	f3 1f       	adc	r31, r19
    14d4:	10 82       	st	Z, r1
				Local_s8DigitIndex--;
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	81 50       	subi	r24, 0x01	; 1
    14da:	8d 83       	std	Y+5, r24	; 0x05
				Copy_s32DecimalNumber /= 16;
    14dc:	8c 89       	ldd	r24, Y+20	; 0x14
    14de:	9d 89       	ldd	r25, Y+21	; 0x15
    14e0:	ae 89       	ldd	r26, Y+22	; 0x16
    14e2:	bf 89       	ldd	r27, Y+23	; 0x17
    14e4:	20 e1       	ldi	r18, 0x10	; 16
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	bc 01       	movw	r22, r24
    14ee:	cd 01       	movw	r24, r26
    14f0:	0e 94 17 1c 	call	0x382e	; 0x382e <__divmodsi4>
    14f4:	da 01       	movw	r26, r20
    14f6:	c9 01       	movw	r24, r18
    14f8:	8c 8b       	std	Y+20, r24	; 0x14
    14fa:	9d 8b       	std	Y+21, r25	; 0x15
    14fc:	ae 8b       	std	Y+22, r26	; 0x16
    14fe:	bf 8b       	std	Y+23, r27	; 0x17
			}

			if ((Copy_s32DecimalNumber / 16) < 16)
    1500:	8c 89       	ldd	r24, Y+20	; 0x14
    1502:	9d 89       	ldd	r25, Y+21	; 0x15
    1504:	ae 89       	ldd	r26, Y+22	; 0x16
    1506:	bf 89       	ldd	r27, Y+23	; 0x17
    1508:	8f 3f       	cpi	r24, 0xFF	; 255
    150a:	91 05       	cpc	r25, r1
    150c:	a1 05       	cpc	r26, r1
    150e:	b1 05       	cpc	r27, r1
    1510:	11 f0       	breq	.+4      	; 0x1516 <CLCD_voidSendHex+0xbe>
    1512:	0c f0       	brlt	.+2      	; 0x1516 <CLCD_voidSendHex+0xbe>
    1514:	4c c0       	rjmp	.+152    	; 0x15ae <CLCD_voidSendHex+0x156>
			{
				Local_u8DigitsArr[Local_s8DigitIndex] = Copy_s32DecimalNumber % 16;
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	08 2f       	mov	r16, r24
    151a:	11 27       	eor	r17, r17
    151c:	07 fd       	sbrc	r16, 7
    151e:	10 95       	com	r17
    1520:	8c 89       	ldd	r24, Y+20	; 0x14
    1522:	9d 89       	ldd	r25, Y+21	; 0x15
    1524:	ae 89       	ldd	r26, Y+22	; 0x16
    1526:	bf 89       	ldd	r27, Y+23	; 0x17
    1528:	20 e1       	ldi	r18, 0x10	; 16
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	0e 94 17 1c 	call	0x382e	; 0x382e <__divmodsi4>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	28 2f       	mov	r18, r24
    153e:	ce 01       	movw	r24, r28
    1540:	06 96       	adiw	r24, 0x06	; 6
    1542:	fc 01       	movw	r30, r24
    1544:	e0 0f       	add	r30, r16
    1546:	f1 1f       	adc	r31, r17
    1548:	20 83       	st	Z, r18
				Local_u8DigitsArr[Local_s8DigitIndex - 1] = Copy_s32DecimalNumber / 16;
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
    154c:	99 27       	eor	r25, r25
    154e:	87 fd       	sbrc	r24, 7
    1550:	90 95       	com	r25
    1552:	8c 01       	movw	r16, r24
    1554:	01 50       	subi	r16, 0x01	; 1
    1556:	10 40       	sbci	r17, 0x00	; 0
    1558:	8c 89       	ldd	r24, Y+20	; 0x14
    155a:	9d 89       	ldd	r25, Y+21	; 0x15
    155c:	ae 89       	ldd	r26, Y+22	; 0x16
    155e:	bf 89       	ldd	r27, Y+23	; 0x17
    1560:	20 e1       	ldi	r18, 0x10	; 16
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	0e 94 17 1c 	call	0x382e	; 0x382e <__divmodsi4>
    1570:	da 01       	movw	r26, r20
    1572:	c9 01       	movw	r24, r18
    1574:	28 2f       	mov	r18, r24
    1576:	ce 01       	movw	r24, r28
    1578:	06 96       	adiw	r24, 0x06	; 6
    157a:	fc 01       	movw	r30, r24
    157c:	e0 0f       	add	r30, r16
    157e:	f1 1f       	adc	r31, r17
    1580:	20 83       	st	Z, r18
				Local_s8DigitIndex-= 2;
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	82 50       	subi	r24, 0x02	; 2
    1586:	8d 83       	std	Y+5, r24	; 0x05
				Copy_s32DecimalNumber /= 16;
    1588:	8c 89       	ldd	r24, Y+20	; 0x14
    158a:	9d 89       	ldd	r25, Y+21	; 0x15
    158c:	ae 89       	ldd	r26, Y+22	; 0x16
    158e:	bf 89       	ldd	r27, Y+23	; 0x17
    1590:	20 e1       	ldi	r18, 0x10	; 16
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	50 e0       	ldi	r21, 0x00	; 0
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	0e 94 17 1c 	call	0x382e	; 0x382e <__divmodsi4>
    15a0:	da 01       	movw	r26, r20
    15a2:	c9 01       	movw	r24, r18
    15a4:	8c 8b       	std	Y+20, r24	; 0x14
    15a6:	9d 8b       	std	Y+21, r25	; 0x15
    15a8:	ae 8b       	std	Y+22, r26	; 0x16
    15aa:	bf 8b       	std	Y+23, r27	; 0x17
    15ac:	3b c0       	rjmp	.+118    	; 0x1624 <CLCD_voidSendHex+0x1cc>
			}

			else if ((Copy_s32DecimalNumber / 16) > 16)
    15ae:	8c 89       	ldd	r24, Y+20	; 0x14
    15b0:	9d 89       	ldd	r25, Y+21	; 0x15
    15b2:	ae 89       	ldd	r26, Y+22	; 0x16
    15b4:	bf 89       	ldd	r27, Y+23	; 0x17
    15b6:	80 31       	cpi	r24, 0x10	; 16
    15b8:	21 e0       	ldi	r18, 0x01	; 1
    15ba:	92 07       	cpc	r25, r18
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	a2 07       	cpc	r26, r18
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	b2 07       	cpc	r27, r18
    15c4:	7c f1       	brlt	.+94     	; 0x1624 <CLCD_voidSendHex+0x1cc>
			{
				Local_u8DigitsArr[Local_s8DigitIndex] = Copy_s32DecimalNumber % 16;
    15c6:	8d 81       	ldd	r24, Y+5	; 0x05
    15c8:	08 2f       	mov	r16, r24
    15ca:	11 27       	eor	r17, r17
    15cc:	07 fd       	sbrc	r16, 7
    15ce:	10 95       	com	r17
    15d0:	8c 89       	ldd	r24, Y+20	; 0x14
    15d2:	9d 89       	ldd	r25, Y+21	; 0x15
    15d4:	ae 89       	ldd	r26, Y+22	; 0x16
    15d6:	bf 89       	ldd	r27, Y+23	; 0x17
    15d8:	20 e1       	ldi	r18, 0x10	; 16
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	0e 94 17 1c 	call	0x382e	; 0x382e <__divmodsi4>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	28 2f       	mov	r18, r24
    15ee:	ce 01       	movw	r24, r28
    15f0:	06 96       	adiw	r24, 0x06	; 6
    15f2:	fc 01       	movw	r30, r24
    15f4:	e0 0f       	add	r30, r16
    15f6:	f1 1f       	adc	r31, r17
    15f8:	20 83       	st	Z, r18
				Copy_s32DecimalNumber /= 16;
    15fa:	8c 89       	ldd	r24, Y+20	; 0x14
    15fc:	9d 89       	ldd	r25, Y+21	; 0x15
    15fe:	ae 89       	ldd	r26, Y+22	; 0x16
    1600:	bf 89       	ldd	r27, Y+23	; 0x17
    1602:	20 e1       	ldi	r18, 0x10	; 16
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	bc 01       	movw	r22, r24
    160c:	cd 01       	movw	r24, r26
    160e:	0e 94 17 1c 	call	0x382e	; 0x382e <__divmodsi4>
    1612:	da 01       	movw	r26, r20
    1614:	c9 01       	movw	r24, r18
    1616:	8c 8b       	std	Y+20, r24	; 0x14
    1618:	9d 8b       	std	Y+21, r25	; 0x15
    161a:	ae 8b       	std	Y+22, r26	; 0x16
    161c:	bf 8b       	std	Y+23, r27	; 0x17
				Local_s8DigitIndex--;
    161e:	8d 81       	ldd	r24, Y+5	; 0x05
    1620:	81 50       	subi	r24, 0x01	; 1
    1622:	8d 83       	std	Y+5, r24	; 0x05
{
		uint8 Local_u8DigitsArr[14];
		sint8 Local_s8DigitIndex;
		sint32 Local_s8Holder = Copy_s32DecimalNumber;

		for (Local_s8DigitIndex = 13; Local_s8DigitIndex >= 0;)
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	88 23       	and	r24, r24
    1628:	0c f0       	brlt	.+2      	; 0x162c <CLCD_voidSendHex+0x1d4>
    162a:	31 cf       	rjmp	.-414    	; 0x148e <CLCD_voidSendHex+0x36>
				Copy_s32DecimalNumber /= 16;
				Local_s8DigitIndex--;
			}
		}

		CLCD_voidSendNumber(Local_s8Holder);
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	ab 81       	ldd	r26, Y+3	; 0x03
    1632:	bc 81       	ldd	r27, Y+4	; 0x04
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <CLCD_voidSendNumber>
		CLCD_u8SendString(" to Hex:");
    163c:	8f e6       	ldi	r24, 0x6F	; 111
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>
		CLCD_voidGoToXY(0,1);
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>
		CLCD_u8SendString("0x");
    164c:	88 e7       	ldi	r24, 0x78	; 120
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>

		for (Local_s8DigitIndex = 0; Local_s8DigitIndex < 14; Local_s8DigitIndex++)
    1654:	1d 82       	std	Y+5, r1	; 0x05
    1656:	6f c0       	rjmp	.+222    	; 0x1736 <CLCD_voidSendHex+0x2de>
		{
			if (Local_u8DigitsArr[Local_s8DigitIndex] < 10)
    1658:	8d 81       	ldd	r24, Y+5	; 0x05
    165a:	28 2f       	mov	r18, r24
    165c:	33 27       	eor	r19, r19
    165e:	27 fd       	sbrc	r18, 7
    1660:	30 95       	com	r19
    1662:	ce 01       	movw	r24, r28
    1664:	06 96       	adiw	r24, 0x06	; 6
    1666:	fc 01       	movw	r30, r24
    1668:	e2 0f       	add	r30, r18
    166a:	f3 1f       	adc	r31, r19
    166c:	80 81       	ld	r24, Z
    166e:	8a 30       	cpi	r24, 0x0A	; 10
    1670:	a0 f4       	brcc	.+40     	; 0x169a <CLCD_voidSendHex+0x242>
			{
				CLCD_voidSendNumber(Local_u8DigitsArr[Local_s8DigitIndex]);
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	28 2f       	mov	r18, r24
    1676:	33 27       	eor	r19, r19
    1678:	27 fd       	sbrc	r18, 7
    167a:	30 95       	com	r19
    167c:	ce 01       	movw	r24, r28
    167e:	06 96       	adiw	r24, 0x06	; 6
    1680:	fc 01       	movw	r30, r24
    1682:	e2 0f       	add	r30, r18
    1684:	f3 1f       	adc	r31, r19
    1686:	80 81       	ld	r24, Z
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a0 e0       	ldi	r26, 0x00	; 0
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	bc 01       	movw	r22, r24
    1692:	cd 01       	movw	r24, r26
    1694:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <CLCD_voidSendNumber>
    1698:	4b c0       	rjmp	.+150    	; 0x1730 <CLCD_voidSendHex+0x2d8>
			}

			else
			{
				switch (Local_u8DigitsArr[Local_s8DigitIndex])
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	28 2f       	mov	r18, r24
    169e:	33 27       	eor	r19, r19
    16a0:	27 fd       	sbrc	r18, 7
    16a2:	30 95       	com	r19
    16a4:	ce 01       	movw	r24, r28
    16a6:	06 96       	adiw	r24, 0x06	; 6
    16a8:	fc 01       	movw	r30, r24
    16aa:	e2 0f       	add	r30, r18
    16ac:	f3 1f       	adc	r31, r19
    16ae:	80 81       	ld	r24, Z
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	39 8f       	std	Y+25, r19	; 0x19
    16b6:	28 8f       	std	Y+24, r18	; 0x18
    16b8:	88 8d       	ldd	r24, Y+24	; 0x18
    16ba:	99 8d       	ldd	r25, Y+25	; 0x19
    16bc:	8c 30       	cpi	r24, 0x0C	; 12
    16be:	91 05       	cpc	r25, r1
    16c0:	41 f1       	breq	.+80     	; 0x1712 <CLCD_voidSendHex+0x2ba>
    16c2:	28 8d       	ldd	r18, Y+24	; 0x18
    16c4:	39 8d       	ldd	r19, Y+25	; 0x19
    16c6:	2d 30       	cpi	r18, 0x0D	; 13
    16c8:	31 05       	cpc	r19, r1
    16ca:	5c f4       	brge	.+22     	; 0x16e2 <CLCD_voidSendHex+0x28a>
    16cc:	88 8d       	ldd	r24, Y+24	; 0x18
    16ce:	99 8d       	ldd	r25, Y+25	; 0x19
    16d0:	8a 30       	cpi	r24, 0x0A	; 10
    16d2:	91 05       	cpc	r25, r1
    16d4:	b1 f0       	breq	.+44     	; 0x1702 <CLCD_voidSendHex+0x2aa>
    16d6:	28 8d       	ldd	r18, Y+24	; 0x18
    16d8:	39 8d       	ldd	r19, Y+25	; 0x19
    16da:	2b 30       	cpi	r18, 0x0B	; 11
    16dc:	31 05       	cpc	r19, r1
    16de:	a9 f0       	breq	.+42     	; 0x170a <CLCD_voidSendHex+0x2b2>
    16e0:	27 c0       	rjmp	.+78     	; 0x1730 <CLCD_voidSendHex+0x2d8>
    16e2:	88 8d       	ldd	r24, Y+24	; 0x18
    16e4:	99 8d       	ldd	r25, Y+25	; 0x19
    16e6:	8e 30       	cpi	r24, 0x0E	; 14
    16e8:	91 05       	cpc	r25, r1
    16ea:	d9 f0       	breq	.+54     	; 0x1722 <CLCD_voidSendHex+0x2ca>
    16ec:	28 8d       	ldd	r18, Y+24	; 0x18
    16ee:	39 8d       	ldd	r19, Y+25	; 0x19
    16f0:	2e 30       	cpi	r18, 0x0E	; 14
    16f2:	31 05       	cpc	r19, r1
    16f4:	94 f0       	brlt	.+36     	; 0x171a <CLCD_voidSendHex+0x2c2>
    16f6:	88 8d       	ldd	r24, Y+24	; 0x18
    16f8:	99 8d       	ldd	r25, Y+25	; 0x19
    16fa:	8f 30       	cpi	r24, 0x0F	; 15
    16fc:	91 05       	cpc	r25, r1
    16fe:	a9 f0       	breq	.+42     	; 0x172a <CLCD_voidSendHex+0x2d2>
    1700:	17 c0       	rjmp	.+46     	; 0x1730 <CLCD_voidSendHex+0x2d8>
				{
					case 10: CLCD_voidSendData('A');	break;
    1702:	81 e4       	ldi	r24, 0x41	; 65
    1704:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
    1708:	13 c0       	rjmp	.+38     	; 0x1730 <CLCD_voidSendHex+0x2d8>
					case 11: CLCD_voidSendData('B');	break;
    170a:	82 e4       	ldi	r24, 0x42	; 66
    170c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
    1710:	0f c0       	rjmp	.+30     	; 0x1730 <CLCD_voidSendHex+0x2d8>
					case 12: CLCD_voidSendData('C');	break;
    1712:	83 e4       	ldi	r24, 0x43	; 67
    1714:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
    1718:	0b c0       	rjmp	.+22     	; 0x1730 <CLCD_voidSendHex+0x2d8>
					case 13: CLCD_voidSendData('D');	break;
    171a:	84 e4       	ldi	r24, 0x44	; 68
    171c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
    1720:	07 c0       	rjmp	.+14     	; 0x1730 <CLCD_voidSendHex+0x2d8>
					case 14: CLCD_voidSendData('E');	break;
    1722:	85 e4       	ldi	r24, 0x45	; 69
    1724:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <CLCD_voidSendHex+0x2d8>
					case 15: CLCD_voidSendData('F');	break;
    172a:	86 e4       	ldi	r24, 0x46	; 70
    172c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
		CLCD_voidSendNumber(Local_s8Holder);
		CLCD_u8SendString(" to Hex:");
		CLCD_voidGoToXY(0,1);
		CLCD_u8SendString("0x");

		for (Local_s8DigitIndex = 0; Local_s8DigitIndex < 14; Local_s8DigitIndex++)
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	8f 5f       	subi	r24, 0xFF	; 255
    1734:	8d 83       	std	Y+5, r24	; 0x05
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	8e 30       	cpi	r24, 0x0E	; 14
    173a:	0c f4       	brge	.+2      	; 0x173e <CLCD_voidSendHex+0x2e6>
    173c:	8d cf       	rjmp	.-230    	; 0x1658 <CLCD_voidSendHex+0x200>
				}
			}
		}


}
    173e:	69 96       	adiw	r28, 0x19	; 25
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	08 95       	ret

00001754 <DCMOTOR_u8RotateCW>:




uint8 DCMOTOR_u8RotateCW(const DCMOTOR_T* Copy_pDCMOTOR)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <DCMOTOR_u8RotateCW+0x6>
    175a:	0f 92       	push	r0
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	9b 83       	std	Y+3, r25	; 0x03
    1762:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    1764:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pDCMOTOR != NULL)
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	9b 81       	ldd	r25, Y+3	; 0x03
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	b1 f0       	breq	.+44     	; 0x179a <DCMOTOR_u8RotateCW+0x46>
	{
		Local_u8ErrorState = OK;
    176e:	19 82       	std	Y+1, r1	; 0x01

		DIO_u8SetPinValue(Copy_pDCMOTOR->PORT, Copy_pDCMOTOR->PIN1_4, DIO_u8PIN_LOW);
    1770:	ea 81       	ldd	r30, Y+2	; 0x02
    1772:	fb 81       	ldd	r31, Y+3	; 0x03
    1774:	80 81       	ld	r24, Z
    1776:	ea 81       	ldd	r30, Y+2	; 0x02
    1778:	fb 81       	ldd	r31, Y+3	; 0x03
    177a:	92 81       	ldd	r25, Z+2	; 0x02
    177c:	69 2f       	mov	r22, r25
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pDCMOTOR->PORT, Copy_pDCMOTOR->PIN2_3, DIO_u8PIN_HIGH);
    1784:	ea 81       	ldd	r30, Y+2	; 0x02
    1786:	fb 81       	ldd	r31, Y+3	; 0x03
    1788:	80 81       	ld	r24, Z
    178a:	ea 81       	ldd	r30, Y+2	; 0x02
    178c:	fb 81       	ldd	r31, Y+3	; 0x03
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	69 2f       	mov	r22, r25
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DCMOTOR_u8RotateCW+0x4a>
	}

	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    179a:	82 e0       	ldi	r24, 0x02	; 2
    179c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    179e:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <DCMOTOR_u8RotateCCW>:



uint8 DCMOTOR_u8RotateCCW(const DCMOTOR_T* Copy_pDCMOTOR)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <DCMOTOR_u8RotateCCW+0x6>
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9b 83       	std	Y+3, r25	; 0x03
    17ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    17bc:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pDCMOTOR != NULL)
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	9b 81       	ldd	r25, Y+3	; 0x03
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	b1 f0       	breq	.+44     	; 0x17f2 <DCMOTOR_u8RotateCCW+0x46>
	{
		Local_u8ErrorState = OK;
    17c6:	19 82       	std	Y+1, r1	; 0x01

		DIO_u8SetPinValue(Copy_pDCMOTOR->PORT, Copy_pDCMOTOR->PIN2_3, DIO_u8PIN_LOW);
    17c8:	ea 81       	ldd	r30, Y+2	; 0x02
    17ca:	fb 81       	ldd	r31, Y+3	; 0x03
    17cc:	80 81       	ld	r24, Z
    17ce:	ea 81       	ldd	r30, Y+2	; 0x02
    17d0:	fb 81       	ldd	r31, Y+3	; 0x03
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	69 2f       	mov	r22, r25
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pDCMOTOR->PORT, Copy_pDCMOTOR->PIN1_4, DIO_u8PIN_HIGH);
    17dc:	ea 81       	ldd	r30, Y+2	; 0x02
    17de:	fb 81       	ldd	r31, Y+3	; 0x03
    17e0:	80 81       	ld	r24, Z
    17e2:	ea 81       	ldd	r30, Y+2	; 0x02
    17e4:	fb 81       	ldd	r31, Y+3	; 0x03
    17e6:	92 81       	ldd	r25, Z+2	; 0x02
    17e8:	69 2f       	mov	r22, r25
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DCMOTOR_u8RotateCCW+0x4a>
	}

	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    17f2:	82 e0       	ldi	r24, 0x02	; 2
    17f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    17f6:	89 81       	ldd	r24, Y+1	; 0x01

}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <DCMOTOR_u8Stop>:



uint8 DCMOTOR_u8Stop(const DCMOTOR_T* Copy_pDCMOTOR)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	00 d0       	rcall	.+0      	; 0x180a <DCMOTOR_u8Stop+0x6>
    180a:	0f 92       	push	r0
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	9b 83       	std	Y+3, r25	; 0x03
    1812:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    1814:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pDCMOTOR != NULL)
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	9b 81       	ldd	r25, Y+3	; 0x03
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	b1 f0       	breq	.+44     	; 0x184a <DCMOTOR_u8Stop+0x46>
	{
		Local_u8ErrorState = OK;
    181e:	19 82       	std	Y+1, r1	; 0x01

		DIO_u8SetPinValue(Copy_pDCMOTOR->PORT, Copy_pDCMOTOR->PIN2_3, DIO_u8PIN_LOW);
    1820:	ea 81       	ldd	r30, Y+2	; 0x02
    1822:	fb 81       	ldd	r31, Y+3	; 0x03
    1824:	80 81       	ld	r24, Z
    1826:	ea 81       	ldd	r30, Y+2	; 0x02
    1828:	fb 81       	ldd	r31, Y+3	; 0x03
    182a:	91 81       	ldd	r25, Z+1	; 0x01
    182c:	69 2f       	mov	r22, r25
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_pDCMOTOR->PORT, Copy_pDCMOTOR->PIN1_4, DIO_u8PIN_LOW);
    1834:	ea 81       	ldd	r30, Y+2	; 0x02
    1836:	fb 81       	ldd	r31, Y+3	; 0x03
    1838:	80 81       	ld	r24, Z
    183a:	ea 81       	ldd	r30, Y+2	; 0x02
    183c:	fb 81       	ldd	r31, Y+3	; 0x03
    183e:	92 81       	ldd	r25, Z+2	; 0x02
    1840:	69 2f       	mov	r22, r25
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DCMOTOR_u8Stop+0x4a>
	}

	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    184a:	82 e0       	ldi	r24, 0x02	; 2
    184c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    184e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <DIO_u8SetPinDirection>:
#include "DIO_prv.h"
#include "DIO_reg.h"


 uint8 DIO_u8SetPinDirection (uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Direction)
 {
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	28 97       	sbiw	r28, 0x08	; 8
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	8a 83       	std	Y+2, r24	; 0x02
    1872:	6b 83       	std	Y+3, r22	; 0x03
    1874:	4c 83       	std	Y+4, r20	; 0x04
	 uint8 Local_u8ErrorState = OK;
    1876:	19 82       	std	Y+1, r1	; 0x01

	 if (Copy_u8Pin <= DIO_u8PIN7)
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	88 30       	cpi	r24, 0x08	; 8
    187c:	08 f0       	brcs	.+2      	; 0x1880 <DIO_u8SetPinDirection+0x24>
    187e:	f4 c0       	rjmp	.+488    	; 0x1a68 <DIO_u8SetPinDirection+0x20c>
	 {

		 if (Copy_u8Direction == DIO_u8PIN_INPUT)
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	88 23       	and	r24, r24
    1884:	09 f0       	breq	.+2      	; 0x1888 <DIO_u8SetPinDirection+0x2c>
    1886:	77 c0       	rjmp	.+238    	; 0x1976 <DIO_u8SetPinDirection+0x11a>
		 {
			 switch (Copy_u8Port)
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	38 87       	std	Y+8, r19	; 0x08
    1890:	2f 83       	std	Y+7, r18	; 0x07
    1892:	8f 81       	ldd	r24, Y+7	; 0x07
    1894:	98 85       	ldd	r25, Y+8	; 0x08
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	91 05       	cpc	r25, r1
    189a:	59 f1       	breq	.+86     	; 0x18f2 <DIO_u8SetPinDirection+0x96>
    189c:	2f 81       	ldd	r18, Y+7	; 0x07
    189e:	38 85       	ldd	r19, Y+8	; 0x08
    18a0:	22 30       	cpi	r18, 0x02	; 2
    18a2:	31 05       	cpc	r19, r1
    18a4:	2c f4       	brge	.+10     	; 0x18b0 <DIO_u8SetPinDirection+0x54>
    18a6:	8f 81       	ldd	r24, Y+7	; 0x07
    18a8:	98 85       	ldd	r25, Y+8	; 0x08
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	69 f0       	breq	.+26     	; 0x18c8 <DIO_u8SetPinDirection+0x6c>
    18ae:	60 c0       	rjmp	.+192    	; 0x1970 <DIO_u8SetPinDirection+0x114>
    18b0:	2f 81       	ldd	r18, Y+7	; 0x07
    18b2:	38 85       	ldd	r19, Y+8	; 0x08
    18b4:	22 30       	cpi	r18, 0x02	; 2
    18b6:	31 05       	cpc	r19, r1
    18b8:	89 f1       	breq	.+98     	; 0x191c <DIO_u8SetPinDirection+0xc0>
    18ba:	8f 81       	ldd	r24, Y+7	; 0x07
    18bc:	98 85       	ldd	r25, Y+8	; 0x08
    18be:	83 30       	cpi	r24, 0x03	; 3
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <DIO_u8SetPinDirection+0x6a>
    18c4:	40 c0       	rjmp	.+128    	; 0x1946 <DIO_u8SetPinDirection+0xea>
    18c6:	54 c0       	rjmp	.+168    	; 0x1970 <DIO_u8SetPinDirection+0x114>
			 {
			 	 case DIO_u8PORTA: CLR_BIT(DDRA, Copy_u8Pin); break;
    18c8:	aa e3       	ldi	r26, 0x3A	; 58
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ea e3       	ldi	r30, 0x3A	; 58
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_u8SetPinDirection+0x8a>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_u8SetPinDirection+0x86>
    18ea:	80 95       	com	r24
    18ec:	84 23       	and	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	bd c0       	rjmp	.+378    	; 0x1a6c <DIO_u8SetPinDirection+0x210>
			 	 case DIO_u8PORTB: CLR_BIT(DDRB, Copy_u8Pin); break;
    18f2:	a7 e3       	ldi	r26, 0x37	; 55
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e7 e3       	ldi	r30, 0x37	; 55
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_u8SetPinDirection+0xb4>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_u8SetPinDirection+0xb0>
    1914:	80 95       	com	r24
    1916:	84 23       	and	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	a8 c0       	rjmp	.+336    	; 0x1a6c <DIO_u8SetPinDirection+0x210>
			 	 case DIO_u8PORTC: CLR_BIT(DDRC, Copy_u8Pin); break;
    191c:	a4 e3       	ldi	r26, 0x34	; 52
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e4 e3       	ldi	r30, 0x34	; 52
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	02 2e       	mov	r0, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <DIO_u8SetPinDirection+0xde>
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	0a 94       	dec	r0
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <DIO_u8SetPinDirection+0xda>
    193e:	80 95       	com	r24
    1940:	84 23       	and	r24, r20
    1942:	8c 93       	st	X, r24
    1944:	93 c0       	rjmp	.+294    	; 0x1a6c <DIO_u8SetPinDirection+0x210>
			 	 case DIO_u8PORTD: CLR_BIT(DDRD, Copy_u8Pin); break;
    1946:	a1 e3       	ldi	r26, 0x31	; 49
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e1 e3       	ldi	r30, 0x31	; 49
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	48 2f       	mov	r20, r24
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	02 2e       	mov	r0, r18
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <DIO_u8SetPinDirection+0x108>
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	0a 94       	dec	r0
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <DIO_u8SetPinDirection+0x104>
    1968:	80 95       	com	r24
    196a:	84 23       	and	r24, r20
    196c:	8c 93       	st	X, r24
    196e:	7e c0       	rjmp	.+252    	; 0x1a6c <DIO_u8SetPinDirection+0x210>
			 	 default: Local_u8ErrorState = NOK; break;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	7b c0       	rjmp	.+246    	; 0x1a6c <DIO_u8SetPinDirection+0x210>

			 }
		 }

		 else if (Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	09 f0       	breq	.+2      	; 0x197e <DIO_u8SetPinDirection+0x122>
    197c:	72 c0       	rjmp	.+228    	; 0x1a62 <DIO_u8SetPinDirection+0x206>
		 {
			 switch(Copy_u8Port)
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	3e 83       	std	Y+6, r19	; 0x06
    1986:	2d 83       	std	Y+5, r18	; 0x05
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	9e 81       	ldd	r25, Y+6	; 0x06
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	91 05       	cpc	r25, r1
    1990:	49 f1       	breq	.+82     	; 0x19e4 <DIO_u8SetPinDirection+0x188>
    1992:	2d 81       	ldd	r18, Y+5	; 0x05
    1994:	3e 81       	ldd	r19, Y+6	; 0x06
    1996:	22 30       	cpi	r18, 0x02	; 2
    1998:	31 05       	cpc	r19, r1
    199a:	2c f4       	brge	.+10     	; 0x19a6 <DIO_u8SetPinDirection+0x14a>
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	61 f0       	breq	.+24     	; 0x19bc <DIO_u8SetPinDirection+0x160>
    19a4:	5b c0       	rjmp	.+182    	; 0x1a5c <DIO_u8SetPinDirection+0x200>
    19a6:	2d 81       	ldd	r18, Y+5	; 0x05
    19a8:	3e 81       	ldd	r19, Y+6	; 0x06
    19aa:	22 30       	cpi	r18, 0x02	; 2
    19ac:	31 05       	cpc	r19, r1
    19ae:	71 f1       	breq	.+92     	; 0x1a0c <DIO_u8SetPinDirection+0x1b0>
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	91 05       	cpc	r25, r1
    19b8:	e9 f1       	breq	.+122    	; 0x1a34 <DIO_u8SetPinDirection+0x1d8>
    19ba:	50 c0       	rjmp	.+160    	; 0x1a5c <DIO_u8SetPinDirection+0x200>
			 {
				 case DIO_u8PORTA: SET_BIT(DDRA, Copy_u8Pin); break;
    19bc:	aa e3       	ldi	r26, 0x3A	; 58
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ea e3       	ldi	r30, 0x3A	; 58
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 2e       	mov	r0, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <DIO_u8SetPinDirection+0x17e>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	0a 94       	dec	r0
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <DIO_u8SetPinDirection+0x17a>
    19de:	84 2b       	or	r24, r20
    19e0:	8c 93       	st	X, r24
    19e2:	44 c0       	rjmp	.+136    	; 0x1a6c <DIO_u8SetPinDirection+0x210>
			 	 case DIO_u8PORTB: SET_BIT(DDRB, Copy_u8Pin); break;
    19e4:	a7 e3       	ldi	r26, 0x37	; 55
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e7 e3       	ldi	r30, 0x37	; 55
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 2e       	mov	r0, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <DIO_u8SetPinDirection+0x1a6>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	0a 94       	dec	r0
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <DIO_u8SetPinDirection+0x1a2>
    1a06:	84 2b       	or	r24, r20
    1a08:	8c 93       	st	X, r24
    1a0a:	30 c0       	rjmp	.+96     	; 0x1a6c <DIO_u8SetPinDirection+0x210>
			 	 case DIO_u8PORTC: SET_BIT(DDRC, Copy_u8Pin); break;
    1a0c:	a4 e3       	ldi	r26, 0x34	; 52
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e4 e3       	ldi	r30, 0x34	; 52
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	48 2f       	mov	r20, r24
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	02 2e       	mov	r0, r18
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <DIO_u8SetPinDirection+0x1ce>
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	0a 94       	dec	r0
    1a2c:	e2 f7       	brpl	.-8      	; 0x1a26 <DIO_u8SetPinDirection+0x1ca>
    1a2e:	84 2b       	or	r24, r20
    1a30:	8c 93       	st	X, r24
    1a32:	1c c0       	rjmp	.+56     	; 0x1a6c <DIO_u8SetPinDirection+0x210>
			 	 case DIO_u8PORTD: SET_BIT(DDRD, Copy_u8Pin); break;
    1a34:	a1 e3       	ldi	r26, 0x31	; 49
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e1 e3       	ldi	r30, 0x31	; 49
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	48 2f       	mov	r20, r24
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	02 2e       	mov	r0, r18
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <DIO_u8SetPinDirection+0x1f6>
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	0a 94       	dec	r0
    1a54:	e2 f7       	brpl	.-8      	; 0x1a4e <DIO_u8SetPinDirection+0x1f2>
    1a56:	84 2b       	or	r24, r20
    1a58:	8c 93       	st	X, r24
    1a5a:	08 c0       	rjmp	.+16     	; 0x1a6c <DIO_u8SetPinDirection+0x210>
			 	 default: Local_u8ErrorState = NOK;	break;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	05 c0       	rjmp	.+10     	; 0x1a6c <DIO_u8SetPinDirection+0x210>



		 else
		 {
			 Local_u8ErrorState = NOK;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <DIO_u8SetPinDirection+0x210>

	 }

	 else
	 {
		 Local_u8ErrorState = NOK;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	89 83       	std	Y+1, r24	; 0x01
	 }


	 return Local_u8ErrorState;
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01

 }
    1a6e:	28 96       	adiw	r28, 0x08	; 8
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <DIO_u8SetPinValue>:

 uint8 DIO_u8SetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8 Copy_u8Value)
 {
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	28 97       	sbiw	r28, 0x08	; 8
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	8a 83       	std	Y+2, r24	; 0x02
    1a96:	6b 83       	std	Y+3, r22	; 0x03
    1a98:	4c 83       	std	Y+4, r20	; 0x04
	 uint8 Local_u8ErrorState = OK;
    1a9a:	19 82       	std	Y+1, r1	; 0x01

	 	 if (Copy_u8Pin <= DIO_u8PIN7)
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	88 30       	cpi	r24, 0x08	; 8
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <DIO_u8SetPinValue+0x24>
    1aa2:	f4 c0       	rjmp	.+488    	; 0x1c8c <DIO_u8SetPinValue+0x20c>
	 	 {

	 		 if (Copy_u8Value == DIO_u8PIN_HIGH)
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <DIO_u8SetPinValue+0x2c>
    1aaa:	72 c0       	rjmp	.+228    	; 0x1b90 <DIO_u8SetPinValue+0x110>
	 		 {
	 			 switch (Copy_u8Port)
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	38 87       	std	Y+8, r19	; 0x08
    1ab4:	2f 83       	std	Y+7, r18	; 0x07
    1ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab8:	98 85       	ldd	r25, Y+8	; 0x08
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	91 05       	cpc	r25, r1
    1abe:	49 f1       	breq	.+82     	; 0x1b12 <DIO_u8SetPinValue+0x92>
    1ac0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ac2:	38 85       	ldd	r19, Y+8	; 0x08
    1ac4:	22 30       	cpi	r18, 0x02	; 2
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	2c f4       	brge	.+10     	; 0x1ad4 <DIO_u8SetPinValue+0x54>
    1aca:	8f 81       	ldd	r24, Y+7	; 0x07
    1acc:	98 85       	ldd	r25, Y+8	; 0x08
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	61 f0       	breq	.+24     	; 0x1aea <DIO_u8SetPinValue+0x6a>
    1ad2:	5b c0       	rjmp	.+182    	; 0x1b8a <DIO_u8SetPinValue+0x10a>
    1ad4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ad6:	38 85       	ldd	r19, Y+8	; 0x08
    1ad8:	22 30       	cpi	r18, 0x02	; 2
    1ada:	31 05       	cpc	r19, r1
    1adc:	71 f1       	breq	.+92     	; 0x1b3a <DIO_u8SetPinValue+0xba>
    1ade:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae0:	98 85       	ldd	r25, Y+8	; 0x08
    1ae2:	83 30       	cpi	r24, 0x03	; 3
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	e9 f1       	breq	.+122    	; 0x1b62 <DIO_u8SetPinValue+0xe2>
    1ae8:	50 c0       	rjmp	.+160    	; 0x1b8a <DIO_u8SetPinValue+0x10a>
	 			 {
	 			 	 case DIO_u8PORTA: SET_BIT(PORTA, Copy_u8Pin); break;
    1aea:	ab e3       	ldi	r26, 0x3B	; 59
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	eb e3       	ldi	r30, 0x3B	; 59
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <DIO_u8SetPinValue+0x88>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <DIO_u8SetPinValue+0x84>
    1b0c:	84 2b       	or	r24, r20
    1b0e:	8c 93       	st	X, r24
    1b10:	bf c0       	rjmp	.+382    	; 0x1c90 <DIO_u8SetPinValue+0x210>
	 			 	 case DIO_u8PORTB: SET_BIT(PORTB, Copy_u8Pin); break;
    1b12:	a8 e3       	ldi	r26, 0x38	; 56
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e8 e3       	ldi	r30, 0x38	; 56
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 2e       	mov	r0, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <DIO_u8SetPinValue+0xb0>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	0a 94       	dec	r0
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <DIO_u8SetPinValue+0xac>
    1b34:	84 2b       	or	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	ab c0       	rjmp	.+342    	; 0x1c90 <DIO_u8SetPinValue+0x210>
	 			 	 case DIO_u8PORTC: SET_BIT(PORTC, Copy_u8Pin); break;
    1b3a:	a5 e3       	ldi	r26, 0x35	; 53
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e5 e3       	ldi	r30, 0x35	; 53
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <DIO_u8SetPinValue+0xd8>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <DIO_u8SetPinValue+0xd4>
    1b5c:	84 2b       	or	r24, r20
    1b5e:	8c 93       	st	X, r24
    1b60:	97 c0       	rjmp	.+302    	; 0x1c90 <DIO_u8SetPinValue+0x210>
	 			 	 case DIO_u8PORTD: SET_BIT(PORTD, Copy_u8Pin); break;
    1b62:	a2 e3       	ldi	r26, 0x32	; 50
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e2 e3       	ldi	r30, 0x32	; 50
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <DIO_u8SetPinValue+0x100>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <DIO_u8SetPinValue+0xfc>
    1b84:	84 2b       	or	r24, r20
    1b86:	8c 93       	st	X, r24
    1b88:	83 c0       	rjmp	.+262    	; 0x1c90 <DIO_u8SetPinValue+0x210>
	 			 	 default: Local_u8ErrorState = NOK; break;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	80 c0       	rjmp	.+256    	; 0x1c90 <DIO_u8SetPinValue+0x210>

	 			 }
	 		 }

	 		 else if (Copy_u8Value == DIO_u8PIN_LOW)
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	88 23       	and	r24, r24
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <DIO_u8SetPinValue+0x118>
    1b96:	77 c0       	rjmp	.+238    	; 0x1c86 <DIO_u8SetPinValue+0x206>
	 		 {
	 			 switch(Copy_u8Port)
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	3e 83       	std	Y+6, r19	; 0x06
    1ba0:	2d 83       	std	Y+5, r18	; 0x05
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	91 05       	cpc	r25, r1
    1baa:	59 f1       	breq	.+86     	; 0x1c02 <DIO_u8SetPinValue+0x182>
    1bac:	2d 81       	ldd	r18, Y+5	; 0x05
    1bae:	3e 81       	ldd	r19, Y+6	; 0x06
    1bb0:	22 30       	cpi	r18, 0x02	; 2
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <DIO_u8SetPinValue+0x140>
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	69 f0       	breq	.+26     	; 0x1bd8 <DIO_u8SetPinValue+0x158>
    1bbe:	60 c0       	rjmp	.+192    	; 0x1c80 <DIO_u8SetPinValue+0x200>
    1bc0:	2d 81       	ldd	r18, Y+5	; 0x05
    1bc2:	3e 81       	ldd	r19, Y+6	; 0x06
    1bc4:	22 30       	cpi	r18, 0x02	; 2
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	89 f1       	breq	.+98     	; 0x1c2c <DIO_u8SetPinValue+0x1ac>
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	83 30       	cpi	r24, 0x03	; 3
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <DIO_u8SetPinValue+0x156>
    1bd4:	40 c0       	rjmp	.+128    	; 0x1c56 <DIO_u8SetPinValue+0x1d6>
    1bd6:	54 c0       	rjmp	.+168    	; 0x1c80 <DIO_u8SetPinValue+0x200>
	 			 {
	 				 case DIO_u8PORTA: CLR_BIT(PORTA, Copy_u8Pin); break;
    1bd8:	ab e3       	ldi	r26, 0x3B	; 59
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	eb e3       	ldi	r30, 0x3B	; 59
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <DIO_u8SetPinValue+0x176>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <DIO_u8SetPinValue+0x172>
    1bfa:	80 95       	com	r24
    1bfc:	84 23       	and	r24, r20
    1bfe:	8c 93       	st	X, r24
    1c00:	47 c0       	rjmp	.+142    	; 0x1c90 <DIO_u8SetPinValue+0x210>
	 			 	 case DIO_u8PORTB: CLR_BIT(PORTB, Copy_u8Pin); break;
    1c02:	a8 e3       	ldi	r26, 0x38	; 56
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e8 e3       	ldi	r30, 0x38	; 56
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	48 2f       	mov	r20, r24
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	02 2e       	mov	r0, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <DIO_u8SetPinValue+0x1a0>
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	0a 94       	dec	r0
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <DIO_u8SetPinValue+0x19c>
    1c24:	80 95       	com	r24
    1c26:	84 23       	and	r24, r20
    1c28:	8c 93       	st	X, r24
    1c2a:	32 c0       	rjmp	.+100    	; 0x1c90 <DIO_u8SetPinValue+0x210>
	 			 	 case DIO_u8PORTC: CLR_BIT(PORTC, Copy_u8Pin); break;
    1c2c:	a5 e3       	ldi	r26, 0x35	; 53
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e5 e3       	ldi	r30, 0x35	; 53
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	48 2f       	mov	r20, r24
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	02 2e       	mov	r0, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <DIO_u8SetPinValue+0x1ca>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	0a 94       	dec	r0
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <DIO_u8SetPinValue+0x1c6>
    1c4e:	80 95       	com	r24
    1c50:	84 23       	and	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	1d c0       	rjmp	.+58     	; 0x1c90 <DIO_u8SetPinValue+0x210>
	 			 	 case DIO_u8PORTD: CLR_BIT(PORTD, Copy_u8Pin); break;
    1c56:	a2 e3       	ldi	r26, 0x32	; 50
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e2 e3       	ldi	r30, 0x32	; 50
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <DIO_u8SetPinValue+0x1f4>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <DIO_u8SetPinValue+0x1f0>
    1c78:	80 95       	com	r24
    1c7a:	84 23       	and	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	08 c0       	rjmp	.+16     	; 0x1c90 <DIO_u8SetPinValue+0x210>
	 			 	 default: Local_u8ErrorState = NOK;	break;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	05 c0       	rjmp	.+10     	; 0x1c90 <DIO_u8SetPinValue+0x210>



	 		 else
	 		 {
	 			 Local_u8ErrorState = NOK;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <DIO_u8SetPinValue+0x210>

	 	 }

	 	 else
	 	 {
	 		 Local_u8ErrorState = NOK;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	89 83       	std	Y+1, r24	; 0x01
	 	 }


	 	 return Local_u8ErrorState;
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
 }
    1c92:	28 96       	adiw	r28, 0x08	; 8
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <DIO_u8GetPinValue>:

 uint8 DIO_u8GetPinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin, uint8* Copy_pu8Value)

 {
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	27 97       	sbiw	r28, 0x07	; 7
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
    1cba:	6b 83       	std	Y+3, r22	; 0x03
    1cbc:	5d 83       	std	Y+5, r21	; 0x05
    1cbe:	4c 83       	std	Y+4, r20	; 0x04
	 uint8 Local_u8ErrorState = OK;
    1cc0:	19 82       	std	Y+1, r1	; 0x01

	 if (Copy_pu8Value != NULL)
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <DIO_u8GetPinValue+0x28>
    1cca:	7b c0       	rjmp	.+246    	; 0x1dc2 <DIO_u8GetPinValue+0x11e>
	 {

		 if (Copy_u8Pin <= DIO_u8PIN7)
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	88 30       	cpi	r24, 0x08	; 8
    1cd0:	08 f0       	brcs	.+2      	; 0x1cd4 <DIO_u8GetPinValue+0x30>
    1cd2:	74 c0       	rjmp	.+232    	; 0x1dbc <DIO_u8GetPinValue+0x118>
		 {
			 switch (Copy_u8Port)
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	3f 83       	std	Y+7, r19	; 0x07
    1cdc:	2e 83       	std	Y+6, r18	; 0x06
    1cde:	4e 81       	ldd	r20, Y+6	; 0x06
    1ce0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ce2:	41 30       	cpi	r20, 0x01	; 1
    1ce4:	51 05       	cpc	r21, r1
    1ce6:	59 f1       	breq	.+86     	; 0x1d3e <DIO_u8GetPinValue+0x9a>
    1ce8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cea:	9f 81       	ldd	r25, Y+7	; 0x07
    1cec:	82 30       	cpi	r24, 0x02	; 2
    1cee:	91 05       	cpc	r25, r1
    1cf0:	34 f4       	brge	.+12     	; 0x1cfe <DIO_u8GetPinValue+0x5a>
    1cf2:	2e 81       	ldd	r18, Y+6	; 0x06
    1cf4:	3f 81       	ldd	r19, Y+7	; 0x07
    1cf6:	21 15       	cp	r18, r1
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	69 f0       	breq	.+26     	; 0x1d16 <DIO_u8GetPinValue+0x72>
    1cfc:	5c c0       	rjmp	.+184    	; 0x1db6 <DIO_u8GetPinValue+0x112>
    1cfe:	4e 81       	ldd	r20, Y+6	; 0x06
    1d00:	5f 81       	ldd	r21, Y+7	; 0x07
    1d02:	42 30       	cpi	r20, 0x02	; 2
    1d04:	51 05       	cpc	r21, r1
    1d06:	79 f1       	breq	.+94     	; 0x1d66 <DIO_u8GetPinValue+0xc2>
    1d08:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0c:	83 30       	cpi	r24, 0x03	; 3
    1d0e:	91 05       	cpc	r25, r1
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <DIO_u8GetPinValue+0x70>
    1d12:	3d c0       	rjmp	.+122    	; 0x1d8e <DIO_u8GetPinValue+0xea>
    1d14:	50 c0       	rjmp	.+160    	; 0x1db6 <DIO_u8GetPinValue+0x112>
			 {
			 	 case DIO_u8PORTA:  *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
    1d16:	e9 e3       	ldi	r30, 0x39	; 57
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a9 01       	movw	r20, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <DIO_u8GetPinValue+0x8a>
    1d2a:	55 95       	asr	r21
    1d2c:	47 95       	ror	r20
    1d2e:	8a 95       	dec	r24
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <DIO_u8GetPinValue+0x86>
    1d32:	ca 01       	movw	r24, r20
    1d34:	81 70       	andi	r24, 0x01	; 1
    1d36:	ec 81       	ldd	r30, Y+4	; 0x04
    1d38:	fd 81       	ldd	r31, Y+5	; 0x05
    1d3a:	80 83       	st	Z, r24
    1d3c:	44 c0       	rjmp	.+136    	; 0x1dc6 <DIO_u8GetPinValue+0x122>
			 	 case DIO_u8PORTB:  *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
    1d3e:	e6 e3       	ldi	r30, 0x36	; 54
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a9 01       	movw	r20, r18
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <DIO_u8GetPinValue+0xb2>
    1d52:	55 95       	asr	r21
    1d54:	47 95       	ror	r20
    1d56:	8a 95       	dec	r24
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <DIO_u8GetPinValue+0xae>
    1d5a:	ca 01       	movw	r24, r20
    1d5c:	81 70       	andi	r24, 0x01	; 1
    1d5e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d60:	fd 81       	ldd	r31, Y+5	; 0x05
    1d62:	80 83       	st	Z, r24
    1d64:	30 c0       	rjmp	.+96     	; 0x1dc6 <DIO_u8GetPinValue+0x122>
			 	 case DIO_u8PORTC:  *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
    1d66:	e3 e3       	ldi	r30, 0x33	; 51
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a9 01       	movw	r20, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <DIO_u8GetPinValue+0xda>
    1d7a:	55 95       	asr	r21
    1d7c:	47 95       	ror	r20
    1d7e:	8a 95       	dec	r24
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <DIO_u8GetPinValue+0xd6>
    1d82:	ca 01       	movw	r24, r20
    1d84:	81 70       	andi	r24, 0x01	; 1
    1d86:	ec 81       	ldd	r30, Y+4	; 0x04
    1d88:	fd 81       	ldd	r31, Y+5	; 0x05
    1d8a:	80 83       	st	Z, r24
    1d8c:	1c c0       	rjmp	.+56     	; 0x1dc6 <DIO_u8GetPinValue+0x122>
			 	 case DIO_u8PORTD:  *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
    1d8e:	e0 e3       	ldi	r30, 0x30	; 48
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	a9 01       	movw	r20, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <DIO_u8GetPinValue+0x102>
    1da2:	55 95       	asr	r21
    1da4:	47 95       	ror	r20
    1da6:	8a 95       	dec	r24
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <DIO_u8GetPinValue+0xfe>
    1daa:	ca 01       	movw	r24, r20
    1dac:	81 70       	andi	r24, 0x01	; 1
    1dae:	ec 81       	ldd	r30, Y+4	; 0x04
    1db0:	fd 81       	ldd	r31, Y+5	; 0x05
    1db2:	80 83       	st	Z, r24
    1db4:	08 c0       	rjmp	.+16     	; 0x1dc6 <DIO_u8GetPinValue+0x122>
			 	 default: Local_u8ErrorState = NOK; break;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	89 83       	std	Y+1, r24	; 0x01
    1dba:	05 c0       	rjmp	.+10     	; 0x1dc6 <DIO_u8GetPinValue+0x122>
		 }


		 else
		 {
			 Local_u8ErrorState = NOK;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_u8GetPinValue+0x122>
		 }
	 }

	 else
	 {
		 Local_u8ErrorState = NULL_PTR_ERR;
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	89 83       	std	Y+1, r24	; 0x01
	 }


	 return Local_u8ErrorState;
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
 }
    1dc8:	27 96       	adiw	r28, 0x07	; 7
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <DIO_u8SetPortDirection>:

 uint8 DIO_u8SetPortDirection(uint8 Copy_u8Port, uint8 Copy_u8Direction)
 {
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <DIO_u8SetPortDirection+0x6>
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <DIO_u8SetPortDirection+0x8>
    1de2:	0f 92       	push	r0
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	8a 83       	std	Y+2, r24	; 0x02
    1dea:	6b 83       	std	Y+3, r22	; 0x03
	 uint8 Local_u8ErrorState = OK;
    1dec:	19 82       	std	Y+1, r1	; 0x01
	 switch (Copy_u8Port)
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	3d 83       	std	Y+5, r19	; 0x05
    1df6:	2c 83       	std	Y+4, r18	; 0x04
    1df8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	91 05       	cpc	r25, r1
    1e00:	d1 f0       	breq	.+52     	; 0x1e36 <DIO_u8SetPortDirection+0x5c>
    1e02:	2c 81       	ldd	r18, Y+4	; 0x04
    1e04:	3d 81       	ldd	r19, Y+5	; 0x05
    1e06:	22 30       	cpi	r18, 0x02	; 2
    1e08:	31 05       	cpc	r19, r1
    1e0a:	2c f4       	brge	.+10     	; 0x1e16 <DIO_u8SetPortDirection+0x3c>
    1e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	61 f0       	breq	.+24     	; 0x1e2c <DIO_u8SetPortDirection+0x52>
    1e14:	1f c0       	rjmp	.+62     	; 0x1e54 <DIO_u8SetPortDirection+0x7a>
    1e16:	2c 81       	ldd	r18, Y+4	; 0x04
    1e18:	3d 81       	ldd	r19, Y+5	; 0x05
    1e1a:	22 30       	cpi	r18, 0x02	; 2
    1e1c:	31 05       	cpc	r19, r1
    1e1e:	81 f0       	breq	.+32     	; 0x1e40 <DIO_u8SetPortDirection+0x66>
    1e20:	8c 81       	ldd	r24, Y+4	; 0x04
    1e22:	9d 81       	ldd	r25, Y+5	; 0x05
    1e24:	83 30       	cpi	r24, 0x03	; 3
    1e26:	91 05       	cpc	r25, r1
    1e28:	81 f0       	breq	.+32     	; 0x1e4a <DIO_u8SetPortDirection+0x70>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <DIO_u8SetPortDirection+0x7a>
	 {
	 	 case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
    1e2c:	ea e3       	ldi	r30, 0x3A	; 58
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	80 83       	st	Z, r24
    1e34:	11 c0       	rjmp	.+34     	; 0x1e58 <DIO_u8SetPortDirection+0x7e>
	 	 case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
    1e36:	e7 e3       	ldi	r30, 0x37	; 55
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	80 83       	st	Z, r24
    1e3e:	0c c0       	rjmp	.+24     	; 0x1e58 <DIO_u8SetPortDirection+0x7e>
	 	 case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
    1e40:	e4 e3       	ldi	r30, 0x34	; 52
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	80 83       	st	Z, r24
    1e48:	07 c0       	rjmp	.+14     	; 0x1e58 <DIO_u8SetPortDirection+0x7e>
	 	 case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
    1e4a:	e1 e3       	ldi	r30, 0x31	; 49
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	80 83       	st	Z, r24
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <DIO_u8SetPortDirection+0x7e>
	 	 default: Local_u8ErrorState = NOK; break;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	89 83       	std	Y+1, r24	; 0x01

	 }


	return Local_u8ErrorState;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01

 }
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	08 95       	ret

00001e6a <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port, uint8 Copy_u8Value)
 {
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <DIO_u8SetPortValue+0x6>
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <DIO_u8SetPortValue+0x8>
    1e72:	0f 92       	push	r0
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	8a 83       	std	Y+2, r24	; 0x02
    1e7a:	6b 83       	std	Y+3, r22	; 0x03

	 uint8 Local_u8ErrorState = OK;
    1e7c:	19 82       	std	Y+1, r1	; 0x01
	 switch (Copy_u8Port)
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	3d 83       	std	Y+5, r19	; 0x05
    1e86:	2c 83       	std	Y+4, r18	; 0x04
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	91 05       	cpc	r25, r1
    1e90:	d1 f0       	breq	.+52     	; 0x1ec6 <DIO_u8SetPortValue+0x5c>
    1e92:	2c 81       	ldd	r18, Y+4	; 0x04
    1e94:	3d 81       	ldd	r19, Y+5	; 0x05
    1e96:	22 30       	cpi	r18, 0x02	; 2
    1e98:	31 05       	cpc	r19, r1
    1e9a:	2c f4       	brge	.+10     	; 0x1ea6 <DIO_u8SetPortValue+0x3c>
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	61 f0       	breq	.+24     	; 0x1ebc <DIO_u8SetPortValue+0x52>
    1ea4:	1f c0       	rjmp	.+62     	; 0x1ee4 <DIO_u8SetPortValue+0x7a>
    1ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eaa:	22 30       	cpi	r18, 0x02	; 2
    1eac:	31 05       	cpc	r19, r1
    1eae:	81 f0       	breq	.+32     	; 0x1ed0 <DIO_u8SetPortValue+0x66>
    1eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb4:	83 30       	cpi	r24, 0x03	; 3
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	81 f0       	breq	.+32     	; 0x1eda <DIO_u8SetPortValue+0x70>
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <DIO_u8SetPortValue+0x7a>
	 {
	 	 case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    1ebc:	eb e3       	ldi	r30, 0x3B	; 59
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	80 83       	st	Z, r24
    1ec4:	11 c0       	rjmp	.+34     	; 0x1ee8 <DIO_u8SetPortValue+0x7e>
	 	 case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1ec6:	e8 e3       	ldi	r30, 0x38	; 56
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	80 83       	st	Z, r24
    1ece:	0c c0       	rjmp	.+24     	; 0x1ee8 <DIO_u8SetPortValue+0x7e>
	 	 case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1ed0:	e5 e3       	ldi	r30, 0x35	; 53
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	80 83       	st	Z, r24
    1ed8:	07 c0       	rjmp	.+14     	; 0x1ee8 <DIO_u8SetPortValue+0x7e>
	  	 case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1eda:	e2 e3       	ldi	r30, 0x32	; 50
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	80 83       	st	Z, r24
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <DIO_u8SetPortValue+0x7e>
	 	 default: Local_u8ErrorState = NOK; break;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	89 83       	std	Y+1, r24	; 0x01

	 }


	return Local_u8ErrorState;
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01


 }
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port, uint8 Copy_u8Pin)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <DIO_u8TogglePinValue+0x6>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <DIO_u8TogglePinValue+0x8>
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <DIO_u8TogglePinValue+0xa>
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    1f0a:	6c 83       	std	Y+4, r22	; 0x04

	 uint8 Local_u8ErrorState = OK;
    1f0c:	1a 82       	std	Y+2, r1	; 0x02

	 	 if (Copy_u8Pin <= DIO_u8PIN7)
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f10:	88 30       	cpi	r24, 0x08	; 8
    1f12:	08 f0       	brcs	.+2      	; 0x1f16 <DIO_u8TogglePinValue+0x1c>
    1f14:	73 c0       	rjmp	.+230    	; 0x1ffc <DIO_u8TogglePinValue+0x102>
	 	 {
	 		 uint8 Local_u8ErrorState = OK;
    1f16:	19 82       	std	Y+1, r1	; 0x01
	 		 switch (Copy_u8Port)
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	3e 83       	std	Y+6, r19	; 0x06
    1f20:	2d 83       	std	Y+5, r18	; 0x05
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	91 05       	cpc	r25, r1
    1f2a:	49 f1       	breq	.+82     	; 0x1f7e <DIO_u8TogglePinValue+0x84>
    1f2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1f2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1f30:	22 30       	cpi	r18, 0x02	; 2
    1f32:	31 05       	cpc	r19, r1
    1f34:	2c f4       	brge	.+10     	; 0x1f40 <DIO_u8TogglePinValue+0x46>
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	61 f0       	breq	.+24     	; 0x1f56 <DIO_u8TogglePinValue+0x5c>
    1f3e:	5b c0       	rjmp	.+182    	; 0x1ff6 <DIO_u8TogglePinValue+0xfc>
    1f40:	2d 81       	ldd	r18, Y+5	; 0x05
    1f42:	3e 81       	ldd	r19, Y+6	; 0x06
    1f44:	22 30       	cpi	r18, 0x02	; 2
    1f46:	31 05       	cpc	r19, r1
    1f48:	71 f1       	breq	.+92     	; 0x1fa6 <DIO_u8TogglePinValue+0xac>
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	83 30       	cpi	r24, 0x03	; 3
    1f50:	91 05       	cpc	r25, r1
    1f52:	e9 f1       	breq	.+122    	; 0x1fce <DIO_u8TogglePinValue+0xd4>
    1f54:	50 c0       	rjmp	.+160    	; 0x1ff6 <DIO_u8TogglePinValue+0xfc>
	 		 {
			 	 case DIO_u8PORTA: TOG_BIT(PORTA, Copy_u8Pin); break;
    1f56:	ab e3       	ldi	r26, 0x3B	; 59
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	eb e3       	ldi	r30, 0x3B	; 59
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	48 2f       	mov	r20, r24
    1f62:	8c 81       	ldd	r24, Y+4	; 0x04
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	02 2e       	mov	r0, r18
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <DIO_u8TogglePinValue+0x7a>
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	0a 94       	dec	r0
    1f76:	e2 f7       	brpl	.-8      	; 0x1f70 <DIO_u8TogglePinValue+0x76>
    1f78:	84 27       	eor	r24, r20
    1f7a:	8c 93       	st	X, r24
    1f7c:	41 c0       	rjmp	.+130    	; 0x2000 <DIO_u8TogglePinValue+0x106>
			 	 case DIO_u8PORTB: TOG_BIT(PORTB, Copy_u8Pin); break;
    1f7e:	a8 e3       	ldi	r26, 0x38	; 56
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e8 e3       	ldi	r30, 0x38	; 56
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	48 2f       	mov	r20, r24
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	02 2e       	mov	r0, r18
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <DIO_u8TogglePinValue+0xa2>
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	0a 94       	dec	r0
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <DIO_u8TogglePinValue+0x9e>
    1fa0:	84 27       	eor	r24, r20
    1fa2:	8c 93       	st	X, r24
    1fa4:	2d c0       	rjmp	.+90     	; 0x2000 <DIO_u8TogglePinValue+0x106>
			 	 case DIO_u8PORTC: TOG_BIT(PORTC, Copy_u8Pin); break;
    1fa6:	a5 e3       	ldi	r26, 0x35	; 53
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e5 e3       	ldi	r30, 0x35	; 53
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	48 2f       	mov	r20, r24
    1fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	02 2e       	mov	r0, r18
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <DIO_u8TogglePinValue+0xca>
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	0a 94       	dec	r0
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <DIO_u8TogglePinValue+0xc6>
    1fc8:	84 27       	eor	r24, r20
    1fca:	8c 93       	st	X, r24
    1fcc:	19 c0       	rjmp	.+50     	; 0x2000 <DIO_u8TogglePinValue+0x106>
			 	 case DIO_u8PORTD: TOG_BIT(PORTD, Copy_u8Pin); break;
    1fce:	a2 e3       	ldi	r26, 0x32	; 50
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e2 e3       	ldi	r30, 0x32	; 50
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	48 2f       	mov	r20, r24
    1fda:	8c 81       	ldd	r24, Y+4	; 0x04
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	02 2e       	mov	r0, r18
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <DIO_u8TogglePinValue+0xf2>
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	0a 94       	dec	r0
    1fee:	e2 f7       	brpl	.-8      	; 0x1fe8 <DIO_u8TogglePinValue+0xee>
    1ff0:	84 27       	eor	r24, r20
    1ff2:	8c 93       	st	X, r24
    1ff4:	05 c0       	rjmp	.+10     	; 0x2000 <DIO_u8TogglePinValue+0x106>
			 	 default: Local_u8ErrorState = NOK; break;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <DIO_u8TogglePinValue+0x106>

	 	 }

	 	 else
	 	 {
	 		 Local_u8ErrorState = NOK;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
	 	 }


	 	 return Local_u8ErrorState;
    2000:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2002:	26 96       	adiw	r28, 0x06	; 6
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <EXTI_voidInitInt0>:
static void (*EXTI_pfINTFunctionPtr[3])(void) = {NULL}; /*Array of ptrs to functions to hold ISR callbacks */



void EXTI_voidInitInt0(void)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE_CTRL == EXTI_u8ON_CHANGE
	SET_BIT(MCUCR, MCUCR_ISC00);
	CLR_BIT(MCUCR, MCUCR_ISC01);

#elif INT0_SENSE_CTRL == EXTI_u8FALLING_EDGE
	CLR_BIT(MCUCR, MCUCR_ISC00);
    201c:	a5 e5       	ldi	r26, 0x55	; 85
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e5 e5       	ldi	r30, 0x55	; 85
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	8e 7f       	andi	r24, 0xFE	; 254
    2028:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_ISC01);
    202a:	a5 e5       	ldi	r26, 0x55	; 85
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e5 e5       	ldi	r30, 0x55	; 85
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	82 60       	ori	r24, 0x02	; 2
    2036:	8c 93       	st	X, r24

#endif

	/*implement INT0 Initial state configuration*/
#if INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR, GICR_INT0);
    2038:	ab e5       	ldi	r26, 0x5B	; 91
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	eb e5       	ldi	r30, 0x5B	; 91
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	8f 7b       	andi	r24, 0xBF	; 191
    2044:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR, GICR_INT0);
#else
#error Wrong INT0 Initial State Configuration Option
#endif
}
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <EXTI_voidInitInt1>:

void EXTI_voidInitInt1(void)
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
#elif INT1_SENSE_CTRL == EXTI_u8ON_CHANGE
	  SET_BIT(MCUCR, MCUCR_ISC10);
	  CLR_BIT(MCUCR, MCUCR_ISC11);

#elif INT1_SENSE_CTRL == EXTI_u8FALLING_EDGE
	  CLR_BIT(MCUCR, MCUCR_ISC10);
    2054:	a5 e5       	ldi	r26, 0x55	; 85
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e5 e5       	ldi	r30, 0x55	; 85
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	8b 7f       	andi	r24, 0xFB	; 251
    2060:	8c 93       	st	X, r24
	  SET_BIT(MCUCR, MCUCR_ISC11);
    2062:	a5 e5       	ldi	r26, 0x55	; 85
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e5 e5       	ldi	r30, 0x55	; 85
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	88 60       	ori	r24, 0x08	; 8
    206e:	8c 93       	st	X, r24
#error Wrong INT1_SENSE_CTRL Configuration Option
#endif

	/*implement INT1 Initial state configuration*/
#if INT1_INITIAL_STATE == DISABLED
	CLR_BIT(GICR, GICR_INT1);
    2070:	ab e5       	ldi	r26, 0x5B	; 91
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	eb e5       	ldi	r30, 0x5B	; 91
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	8f 77       	andi	r24, 0x7F	; 127
    207c:	8c 93       	st	X, r24
SET_BIT(GICR, GICR_INT1);
#else
#error Wrong INT1 Initial State Configuration Option
#endif

}
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <EXTI_voidInitInt2>:


void EXTI_voidInitInt2(void)
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
	/*implement INT2 sense control configuration*/
#if INT2_SENSE_CTRL == EXTI_u8FALLING_EDGE
	  CLR_BIT(MCUCSR, MCUCSR_ISC2);
    208c:	a4 e5       	ldi	r26, 0x54	; 84
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e4 e5       	ldi	r30, 0x54	; 84
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	8f 7b       	andi	r24, 0xBF	; 191
    2098:	8c 93       	st	X, r24

	/*implement INT2 Initial state configuration*/
#if INT2_INITIAL_STATE == DISABLED
	CLR_BIT(GICR, GICR_INT2);
#elif INT2_INITIAL_STATE == ENABLED
SET_BIT(GICR, GICR_INT2);
    209a:	ab e5       	ldi	r26, 0x5B	; 91
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	eb e5       	ldi	r30, 0x5B	; 91
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	80 62       	ori	r24, 0x20	; 32
    20a6:	8c 93       	st	X, r24
#else
#error Wrong INT2 Initial State Configuration Option
#endif
}
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <EXTI_u8SetSenseCtrl>:



uint8 EXTI_u8SetSenseCtrl(uint8 Copy_u8IntNum, uint8 Copy_u8SenseType)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	2b 97       	sbiw	r28, 0x0b	; 11
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	8a 83       	std	Y+2, r24	; 0x02
    20c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    20c6:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8IntNum)
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	3b 87       	std	Y+11, r19	; 0x0b
    20d0:	2a 87       	std	Y+10, r18	; 0x0a
    20d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d6:	81 30       	cpi	r24, 0x01	; 1
    20d8:	91 05       	cpc	r25, r1
    20da:	09 f4       	brne	.+2      	; 0x20de <EXTI_u8SetSenseCtrl+0x30>
    20dc:	6a c0       	rjmp	.+212    	; 0x21b2 <EXTI_u8SetSenseCtrl+0x104>
    20de:	2a 85       	ldd	r18, Y+10	; 0x0a
    20e0:	3b 85       	ldd	r19, Y+11	; 0x0b
    20e2:	22 30       	cpi	r18, 0x02	; 2
    20e4:	31 05       	cpc	r19, r1
    20e6:	09 f4       	brne	.+2      	; 0x20ea <EXTI_u8SetSenseCtrl+0x3c>
    20e8:	c3 c0       	rjmp	.+390    	; 0x2270 <EXTI_u8SetSenseCtrl+0x1c2>
    20ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	09 f0       	breq	.+2      	; 0x20f4 <EXTI_u8SetSenseCtrl+0x46>
    20f2:	e0 c0       	rjmp	.+448    	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
	{
	case EXTI_u8INT0:
		switch(Copy_u8SenseType)
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	39 87       	std	Y+9, r19	; 0x09
    20fc:	28 87       	std	Y+8, r18	; 0x08
    20fe:	88 85       	ldd	r24, Y+8	; 0x08
    2100:	99 85       	ldd	r25, Y+9	; 0x09
    2102:	82 30       	cpi	r24, 0x02	; 2
    2104:	91 05       	cpc	r25, r1
    2106:	29 f1       	breq	.+74     	; 0x2152 <EXTI_u8SetSenseCtrl+0xa4>
    2108:	28 85       	ldd	r18, Y+8	; 0x08
    210a:	39 85       	ldd	r19, Y+9	; 0x09
    210c:	23 30       	cpi	r18, 0x03	; 3
    210e:	31 05       	cpc	r19, r1
    2110:	34 f4       	brge	.+12     	; 0x211e <EXTI_u8SetSenseCtrl+0x70>
    2112:	88 85       	ldd	r24, Y+8	; 0x08
    2114:	99 85       	ldd	r25, Y+9	; 0x09
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	91 05       	cpc	r25, r1
    211a:	61 f0       	breq	.+24     	; 0x2134 <EXTI_u8SetSenseCtrl+0x86>
    211c:	47 c0       	rjmp	.+142    	; 0x21ac <EXTI_u8SetSenseCtrl+0xfe>
    211e:	28 85       	ldd	r18, Y+8	; 0x08
    2120:	39 85       	ldd	r19, Y+9	; 0x09
    2122:	23 30       	cpi	r18, 0x03	; 3
    2124:	31 05       	cpc	r19, r1
    2126:	21 f1       	breq	.+72     	; 0x2170 <EXTI_u8SetSenseCtrl+0xc2>
    2128:	88 85       	ldd	r24, Y+8	; 0x08
    212a:	99 85       	ldd	r25, Y+9	; 0x09
    212c:	84 30       	cpi	r24, 0x04	; 4
    212e:	91 05       	cpc	r25, r1
    2130:	71 f1       	breq	.+92     	; 0x218e <EXTI_u8SetSenseCtrl+0xe0>
    2132:	3c c0       	rjmp	.+120    	; 0x21ac <EXTI_u8SetSenseCtrl+0xfe>
		{
		case EXTI_u8LOW_LEVEL: CLR_BIT(MCUCR, MCUCR_ISC00); CLR_BIT(MCUCR, MCUCR_ISC01); break;
    2134:	a5 e5       	ldi	r26, 0x55	; 85
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e5 e5       	ldi	r30, 0x55	; 85
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	8e 7f       	andi	r24, 0xFE	; 254
    2140:	8c 93       	st	X, r24
    2142:	a5 e5       	ldi	r26, 0x55	; 85
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e5 e5       	ldi	r30, 0x55	; 85
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	8d 7f       	andi	r24, 0xFD	; 253
    214e:	8c 93       	st	X, r24
    2150:	b1 c0       	rjmp	.+354    	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
		case EXTI_u8ON_CHANGE: SET_BIT(MCUCR, MCUCR_ISC00); CLR_BIT(MCUCR, MCUCR_ISC01); break;
    2152:	a5 e5       	ldi	r26, 0x55	; 85
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e5 e5       	ldi	r30, 0x55	; 85
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	81 60       	ori	r24, 0x01	; 1
    215e:	8c 93       	st	X, r24
    2160:	a5 e5       	ldi	r26, 0x55	; 85
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e5 e5       	ldi	r30, 0x55	; 85
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	8d 7f       	andi	r24, 0xFD	; 253
    216c:	8c 93       	st	X, r24
    216e:	a2 c0       	rjmp	.+324    	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
		case EXTI_u8FALLING_EDGE: CLR_BIT(MCUCR, MCUCR_ISC00); SET_BIT(MCUCR, MCUCR_ISC01); break;
    2170:	a5 e5       	ldi	r26, 0x55	; 85
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e5 e5       	ldi	r30, 0x55	; 85
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	8e 7f       	andi	r24, 0xFE	; 254
    217c:	8c 93       	st	X, r24
    217e:	a5 e5       	ldi	r26, 0x55	; 85
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e5 e5       	ldi	r30, 0x55	; 85
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	82 60       	ori	r24, 0x02	; 2
    218a:	8c 93       	st	X, r24
    218c:	93 c0       	rjmp	.+294    	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
		case EXTI_u8RISING_EDGE: SET_BIT(MCUCR, MCUCR_ISC00); SET_BIT(MCUCR, MCUCR_ISC01); break;
    218e:	a5 e5       	ldi	r26, 0x55	; 85
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e5 e5       	ldi	r30, 0x55	; 85
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	81 60       	ori	r24, 0x01	; 1
    219a:	8c 93       	st	X, r24
    219c:	a5 e5       	ldi	r26, 0x55	; 85
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e5 e5       	ldi	r30, 0x55	; 85
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	82 60       	ori	r24, 0x02	; 2
    21a8:	8c 93       	st	X, r24
    21aa:	84 c0       	rjmp	.+264    	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
		default: Local_u8ErrorState = NOK;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	81 c0       	rjmp	.+258    	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
		} break;

	case EXTI_u8INT1:
		switch(Copy_u8SenseType)
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	3f 83       	std	Y+7, r19	; 0x07
    21ba:	2e 83       	std	Y+6, r18	; 0x06
    21bc:	8e 81       	ldd	r24, Y+6	; 0x06
    21be:	9f 81       	ldd	r25, Y+7	; 0x07
    21c0:	82 30       	cpi	r24, 0x02	; 2
    21c2:	91 05       	cpc	r25, r1
    21c4:	29 f1       	breq	.+74     	; 0x2210 <EXTI_u8SetSenseCtrl+0x162>
    21c6:	2e 81       	ldd	r18, Y+6	; 0x06
    21c8:	3f 81       	ldd	r19, Y+7	; 0x07
    21ca:	23 30       	cpi	r18, 0x03	; 3
    21cc:	31 05       	cpc	r19, r1
    21ce:	34 f4       	brge	.+12     	; 0x21dc <EXTI_u8SetSenseCtrl+0x12e>
    21d0:	8e 81       	ldd	r24, Y+6	; 0x06
    21d2:	9f 81       	ldd	r25, Y+7	; 0x07
    21d4:	81 30       	cpi	r24, 0x01	; 1
    21d6:	91 05       	cpc	r25, r1
    21d8:	61 f0       	breq	.+24     	; 0x21f2 <EXTI_u8SetSenseCtrl+0x144>
    21da:	47 c0       	rjmp	.+142    	; 0x226a <EXTI_u8SetSenseCtrl+0x1bc>
    21dc:	2e 81       	ldd	r18, Y+6	; 0x06
    21de:	3f 81       	ldd	r19, Y+7	; 0x07
    21e0:	23 30       	cpi	r18, 0x03	; 3
    21e2:	31 05       	cpc	r19, r1
    21e4:	21 f1       	breq	.+72     	; 0x222e <EXTI_u8SetSenseCtrl+0x180>
    21e6:	8e 81       	ldd	r24, Y+6	; 0x06
    21e8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ea:	84 30       	cpi	r24, 0x04	; 4
    21ec:	91 05       	cpc	r25, r1
    21ee:	71 f1       	breq	.+92     	; 0x224c <EXTI_u8SetSenseCtrl+0x19e>
    21f0:	3c c0       	rjmp	.+120    	; 0x226a <EXTI_u8SetSenseCtrl+0x1bc>
		{
		case EXTI_u8LOW_LEVEL: CLR_BIT(MCUCR, MCUCR_ISC10); CLR_BIT(MCUCR, MCUCR_ISC11); break;
    21f2:	a5 e5       	ldi	r26, 0x55	; 85
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e5 e5       	ldi	r30, 0x55	; 85
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	8b 7f       	andi	r24, 0xFB	; 251
    21fe:	8c 93       	st	X, r24
    2200:	a5 e5       	ldi	r26, 0x55	; 85
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e5 e5       	ldi	r30, 0x55	; 85
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	87 7f       	andi	r24, 0xF7	; 247
    220c:	8c 93       	st	X, r24
    220e:	52 c0       	rjmp	.+164    	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
		case EXTI_u8ON_CHANGE: SET_BIT(MCUCR, MCUCR_ISC10); CLR_BIT(MCUCR, MCUCR_ISC11); break;
    2210:	a5 e5       	ldi	r26, 0x55	; 85
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	e5 e5       	ldi	r30, 0x55	; 85
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	84 60       	ori	r24, 0x04	; 4
    221c:	8c 93       	st	X, r24
    221e:	a5 e5       	ldi	r26, 0x55	; 85
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e5 e5       	ldi	r30, 0x55	; 85
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	87 7f       	andi	r24, 0xF7	; 247
    222a:	8c 93       	st	X, r24
    222c:	43 c0       	rjmp	.+134    	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
		case EXTI_u8FALLING_EDGE: CLR_BIT(MCUCR, MCUCR_ISC10); SET_BIT(MCUCR, MCUCR_ISC11); break;
    222e:	a5 e5       	ldi	r26, 0x55	; 85
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e5 e5       	ldi	r30, 0x55	; 85
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	8b 7f       	andi	r24, 0xFB	; 251
    223a:	8c 93       	st	X, r24
    223c:	a5 e5       	ldi	r26, 0x55	; 85
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e5 e5       	ldi	r30, 0x55	; 85
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	88 60       	ori	r24, 0x08	; 8
    2248:	8c 93       	st	X, r24
    224a:	34 c0       	rjmp	.+104    	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
		case EXTI_u8RISING_EDGE: SET_BIT(MCUCR, MCUCR_ISC10); SET_BIT(MCUCR, MCUCR_ISC11); break;
    224c:	a5 e5       	ldi	r26, 0x55	; 85
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e5 e5       	ldi	r30, 0x55	; 85
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	84 60       	ori	r24, 0x04	; 4
    2258:	8c 93       	st	X, r24
    225a:	a5 e5       	ldi	r26, 0x55	; 85
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e5 e5       	ldi	r30, 0x55	; 85
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	88 60       	ori	r24, 0x08	; 8
    2266:	8c 93       	st	X, r24
    2268:	25 c0       	rjmp	.+74     	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
		default: Local_u8ErrorState = NOK;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	22 c0       	rjmp	.+68     	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
		} break;

	case EXTI_u8INT2:
		switch(Copy_u8SenseType)
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	3d 83       	std	Y+5, r19	; 0x05
    2278:	2c 83       	std	Y+4, r18	; 0x04
    227a:	8c 81       	ldd	r24, Y+4	; 0x04
    227c:	9d 81       	ldd	r25, Y+5	; 0x05
    227e:	81 30       	cpi	r24, 0x01	; 1
    2280:	91 05       	cpc	r25, r1
    2282:	31 f0       	breq	.+12     	; 0x2290 <EXTI_u8SetSenseCtrl+0x1e2>
    2284:	2c 81       	ldd	r18, Y+4	; 0x04
    2286:	3d 81       	ldd	r19, Y+5	; 0x05
    2288:	22 30       	cpi	r18, 0x02	; 2
    228a:	31 05       	cpc	r19, r1
    228c:	49 f0       	breq	.+18     	; 0x22a0 <EXTI_u8SetSenseCtrl+0x1f2>
    228e:	10 c0       	rjmp	.+32     	; 0x22b0 <EXTI_u8SetSenseCtrl+0x202>
		{
		case EXTI_u8LOW_LEVEL: CLR_BIT(MCUCSR, MCUCSR_ISC2);break;
    2290:	a4 e5       	ldi	r26, 0x54	; 84
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e4 e5       	ldi	r30, 0x54	; 84
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	8f 7b       	andi	r24, 0xBF	; 191
    229c:	8c 93       	st	X, r24
    229e:	0a c0       	rjmp	.+20     	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
		case EXTI_u8ON_CHANGE: SET_BIT(MCUCSR, MCUCSR_ISC2);break;
    22a0:	a4 e5       	ldi	r26, 0x54	; 84
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e4 e5       	ldi	r30, 0x54	; 84
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	80 64       	ori	r24, 0x40	; 64
    22ac:	8c 93       	st	X, r24
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <EXTI_u8SetSenseCtrl+0x206>
		default: Local_u8ErrorState = NOK;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	89 83       	std	Y+1, r24	; 0x01
		} break;

	}


	return Local_u8ErrorState;
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b6:	2b 96       	adiw	r28, 0x0b	; 11
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <EXTI_u8Enable>:

uint8 EXTI_u8Enable(uint8 Copy_u8IntNum)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <EXTI_u8Enable+0x6>
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <EXTI_u8Enable+0x8>
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    22d6:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8IntNum)
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	3c 83       	std	Y+4, r19	; 0x04
    22e0:	2b 83       	std	Y+3, r18	; 0x03
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	81 30       	cpi	r24, 0x01	; 1
    22e8:	91 05       	cpc	r25, r1
    22ea:	89 f0       	breq	.+34     	; 0x230e <EXTI_u8Enable+0x46>
    22ec:	2b 81       	ldd	r18, Y+3	; 0x03
    22ee:	3c 81       	ldd	r19, Y+4	; 0x04
    22f0:	22 30       	cpi	r18, 0x02	; 2
    22f2:	31 05       	cpc	r19, r1
    22f4:	a1 f0       	breq	.+40     	; 0x231e <EXTI_u8Enable+0x56>
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	c1 f4       	brne	.+48     	; 0x232e <EXTI_u8Enable+0x66>
	{
	case EXTI_u8INT0: SET_BIT(GICR, GICR_INT0); break;
    22fe:	ab e5       	ldi	r26, 0x5B	; 91
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	eb e5       	ldi	r30, 0x5B	; 91
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	80 64       	ori	r24, 0x40	; 64
    230a:	8c 93       	st	X, r24
    230c:	12 c0       	rjmp	.+36     	; 0x2332 <EXTI_u8Enable+0x6a>
	case EXTI_u8INT1: SET_BIT(GICR, GICR_INT1); break;
    230e:	ab e5       	ldi	r26, 0x5B	; 91
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	eb e5       	ldi	r30, 0x5B	; 91
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	80 68       	ori	r24, 0x80	; 128
    231a:	8c 93       	st	X, r24
    231c:	0a c0       	rjmp	.+20     	; 0x2332 <EXTI_u8Enable+0x6a>
	case EXTI_u8INT2: SET_BIT(GICR, GICR_INT2); break;
    231e:	ab e5       	ldi	r26, 0x5B	; 91
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	eb e5       	ldi	r30, 0x5B	; 91
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	80 62       	ori	r24, 0x20	; 32
    232a:	8c 93       	st	X, r24
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <EXTI_u8Enable+0x6a>
	default: Local_u8ErrorState = NOK;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
    2332:	89 81       	ldd	r24, Y+1	; 0x01
}
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <EXTI_u8Disable>:

uint8 EXTI_u8Disable(uint8 Copy_u8IntNum)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	00 d0       	rcall	.+0      	; 0x2348 <EXTI_u8Disable+0x6>
    2348:	00 d0       	rcall	.+0      	; 0x234a <EXTI_u8Disable+0x8>
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    2350:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8IntNum)
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	3c 83       	std	Y+4, r19	; 0x04
    235a:	2b 83       	std	Y+3, r18	; 0x03
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	9c 81       	ldd	r25, Y+4	; 0x04
    2360:	81 30       	cpi	r24, 0x01	; 1
    2362:	91 05       	cpc	r25, r1
    2364:	89 f0       	breq	.+34     	; 0x2388 <EXTI_u8Disable+0x46>
    2366:	2b 81       	ldd	r18, Y+3	; 0x03
    2368:	3c 81       	ldd	r19, Y+4	; 0x04
    236a:	22 30       	cpi	r18, 0x02	; 2
    236c:	31 05       	cpc	r19, r1
    236e:	a1 f0       	breq	.+40     	; 0x2398 <EXTI_u8Disable+0x56>
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	c1 f4       	brne	.+48     	; 0x23a8 <EXTI_u8Disable+0x66>
	{
	case EXTI_u8INT0: CLR_BIT(GICR, GICR_INT0); break;
    2378:	ab e5       	ldi	r26, 0x5B	; 91
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	eb e5       	ldi	r30, 0x5B	; 91
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	8f 7b       	andi	r24, 0xBF	; 191
    2384:	8c 93       	st	X, r24
    2386:	12 c0       	rjmp	.+36     	; 0x23ac <EXTI_u8Disable+0x6a>
	case EXTI_u8INT1: CLR_BIT(GICR, GICR_INT1); break;
    2388:	ab e5       	ldi	r26, 0x5B	; 91
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	eb e5       	ldi	r30, 0x5B	; 91
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	8f 77       	andi	r24, 0x7F	; 127
    2394:	8c 93       	st	X, r24
    2396:	0a c0       	rjmp	.+20     	; 0x23ac <EXTI_u8Disable+0x6a>
	case EXTI_u8INT2: CLR_BIT(GICR, GICR_INT2); break;
    2398:	ab e5       	ldi	r26, 0x5B	; 91
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	eb e5       	ldi	r30, 0x5B	; 91
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	8f 7d       	andi	r24, 0xDF	; 223
    23a4:	8c 93       	st	X, r24
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <EXTI_u8Disable+0x6a>
	default: Local_u8ErrorState = NOK;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <EXTI_u8SetCallBack>:


uint8 EXTI_u8SetCallBack(uint8 Copy_u8IntNum, void (*Copy_pfFuncPtr)(void))
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <EXTI_u8SetCallBack+0x6>
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <EXTI_u8SetCallBack+0x8>
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	8a 83       	std	Y+2, r24	; 0x02
    23ca:	7c 83       	std	Y+4, r23	; 0x04
    23cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErorrState = OK;
    23ce:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pfFuncPtr != NULL)
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f0       	breq	.+26     	; 0x23f2 <EXTI_u8SetCallBack+0x36>
	{
		EXTI_pfINTFunctionPtr[Copy_u8IntNum] = Copy_pfFuncPtr;
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	fc 01       	movw	r30, r24
    23e4:	ee 5c       	subi	r30, 0xCE	; 206
    23e6:	fe 4f       	sbci	r31, 0xFE	; 254
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	80 83       	st	Z, r24
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <EXTI_u8SetCallBack+0x3a>
	}

	else
	{
		Local_u8ErorrState = NULL_PTR_ERR;
    23f2:	82 e0       	ldi	r24, 0x02	; 2
    23f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErorrState;
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <__vector_1>:
/**
 * @brief INT0 ISR
 */
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    2406:	1f 92       	push	r1
    2408:	0f 92       	push	r0
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	0f 92       	push	r0
    240e:	11 24       	eor	r1, r1
    2410:	2f 93       	push	r18
    2412:	3f 93       	push	r19
    2414:	4f 93       	push	r20
    2416:	5f 93       	push	r21
    2418:	6f 93       	push	r22
    241a:	7f 93       	push	r23
    241c:	8f 93       	push	r24
    241e:	9f 93       	push	r25
    2420:	af 93       	push	r26
    2422:	bf 93       	push	r27
    2424:	ef 93       	push	r30
    2426:	ff 93       	push	r31
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pfINTFunctionPtr[EXTI_u8INT0] != NULL)
    2430:	80 91 32 01 	lds	r24, 0x0132
    2434:	90 91 33 01 	lds	r25, 0x0133
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	29 f0       	breq	.+10     	; 0x2446 <__vector_1+0x40>
	{
		EXTI_pfINTFunctionPtr[EXTI_u8INT0]();
    243c:	e0 91 32 01 	lds	r30, 0x0132
    2440:	f0 91 33 01 	lds	r31, 0x0133
    2444:	09 95       	icall
	}
}
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	ff 91       	pop	r31
    244c:	ef 91       	pop	r30
    244e:	bf 91       	pop	r27
    2450:	af 91       	pop	r26
    2452:	9f 91       	pop	r25
    2454:	8f 91       	pop	r24
    2456:	7f 91       	pop	r23
    2458:	6f 91       	pop	r22
    245a:	5f 91       	pop	r21
    245c:	4f 91       	pop	r20
    245e:	3f 91       	pop	r19
    2460:	2f 91       	pop	r18
    2462:	0f 90       	pop	r0
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	0f 90       	pop	r0
    2468:	1f 90       	pop	r1
    246a:	18 95       	reti

0000246c <__vector_2>:
/**
 * @brief INT1 ISR
 */
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    246c:	1f 92       	push	r1
    246e:	0f 92       	push	r0
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	0f 92       	push	r0
    2474:	11 24       	eor	r1, r1
    2476:	2f 93       	push	r18
    2478:	3f 93       	push	r19
    247a:	4f 93       	push	r20
    247c:	5f 93       	push	r21
    247e:	6f 93       	push	r22
    2480:	7f 93       	push	r23
    2482:	8f 93       	push	r24
    2484:	9f 93       	push	r25
    2486:	af 93       	push	r26
    2488:	bf 93       	push	r27
    248a:	ef 93       	push	r30
    248c:	ff 93       	push	r31
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pfINTFunctionPtr[EXTI_u8INT1] != NULL)
    2496:	80 91 34 01 	lds	r24, 0x0134
    249a:	90 91 35 01 	lds	r25, 0x0135
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	29 f0       	breq	.+10     	; 0x24ac <__vector_2+0x40>
	{
		EXTI_pfINTFunctionPtr[EXTI_u8INT1]();
    24a2:	e0 91 34 01 	lds	r30, 0x0134
    24a6:	f0 91 35 01 	lds	r31, 0x0135
    24aa:	09 95       	icall
	}
}
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	ff 91       	pop	r31
    24b2:	ef 91       	pop	r30
    24b4:	bf 91       	pop	r27
    24b6:	af 91       	pop	r26
    24b8:	9f 91       	pop	r25
    24ba:	8f 91       	pop	r24
    24bc:	7f 91       	pop	r23
    24be:	6f 91       	pop	r22
    24c0:	5f 91       	pop	r21
    24c2:	4f 91       	pop	r20
    24c4:	3f 91       	pop	r19
    24c6:	2f 91       	pop	r18
    24c8:	0f 90       	pop	r0
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	0f 90       	pop	r0
    24ce:	1f 90       	pop	r1
    24d0:	18 95       	reti

000024d2 <__vector_3>:
/**
 * @brief INT2 ISR
 */
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    24d2:	1f 92       	push	r1
    24d4:	0f 92       	push	r0
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	0f 92       	push	r0
    24da:	11 24       	eor	r1, r1
    24dc:	2f 93       	push	r18
    24de:	3f 93       	push	r19
    24e0:	4f 93       	push	r20
    24e2:	5f 93       	push	r21
    24e4:	6f 93       	push	r22
    24e6:	7f 93       	push	r23
    24e8:	8f 93       	push	r24
    24ea:	9f 93       	push	r25
    24ec:	af 93       	push	r26
    24ee:	bf 93       	push	r27
    24f0:	ef 93       	push	r30
    24f2:	ff 93       	push	r31
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pfINTFunctionPtr[EXTI_u8INT2] != NULL)
    24fc:	80 91 36 01 	lds	r24, 0x0136
    2500:	90 91 37 01 	lds	r25, 0x0137
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	29 f0       	breq	.+10     	; 0x2512 <__vector_3+0x40>
	{
		EXTI_pfINTFunctionPtr[EXTI_u8INT2]();
    2508:	e0 91 36 01 	lds	r30, 0x0136
    250c:	f0 91 37 01 	lds	r31, 0x0137
    2510:	09 95       	icall
	}
}
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	ff 91       	pop	r31
    2518:	ef 91       	pop	r30
    251a:	bf 91       	pop	r27
    251c:	af 91       	pop	r26
    251e:	9f 91       	pop	r25
    2520:	8f 91       	pop	r24
    2522:	7f 91       	pop	r23
    2524:	6f 91       	pop	r22
    2526:	5f 91       	pop	r21
    2528:	4f 91       	pop	r20
    252a:	3f 91       	pop	r19
    252c:	2f 91       	pop	r18
    252e:	0f 90       	pop	r0
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	0f 90       	pop	r0
    2534:	1f 90       	pop	r1
    2536:	18 95       	reti

00002538 <GIE_voidEnableGlobal>:

#include "GIE_reg.h"
#include "GIE_interface.h"

void  GIE_voidEnableGlobal(void)
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
	__asm__ volatile("SEI");			/*Assembly In-Line instruction to set the GIE_I bit*/
    2540:	78 94       	sei
}
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <GIE_voidDisbaleGlobal>:


void GIE_voidDisbaleGlobal(void)
{
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
	__asm__ volatile("CLI");			/*Assembly In-Line instruction to clear the GIE_I bit*/
    2550:	f8 94       	cli
}
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <KPD_u8GetPressedKey>:
#include "KPD_interface.h"
#include "KPD_prv.h"

/*required: All row pins are input pulled-up, and all columns pins are output high*/
uint8 KPD_u8GetPressedKey(void)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <KPD_u8GetPressedKey+0x6>
    255e:	00 d0       	rcall	.+0      	; 0x2560 <KPD_u8GetPressedKey+0x8>
    2560:	0f 92       	push	r0
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8PressedKey = KPD_u8NO_PRESSED_KEY_VAL;
    2566:	8f ef       	ldi	r24, 0xFF	; 255
    2568:	8b 83       	std	Y+3, r24	; 0x03
	static uint8 Local_u8ColArr[KPD_u8COL_NUM] = {KPD_u8COL1_PIN, KPD_u8COL2_PIN, KPD_u8COL3_PIN, KPD_u8COL4_PIN};
	static uint8 Local_u8RowArr[KPD_u8ROW_NUM] = {KPD_u8ROW1_PIN, KPD_u8ROW2_PIN, KPD_u8ROW3_PIN, KPD_u8ROW4_PIN};
	static uint8 Local_uKPDArr[KPD_u8ROW_NUM][KPD_u8COL_NUM] = KPD_u8BUTTON_ARR; /*static is used here to save stack memory, as it will be saved one time in .bss memory not the stack*/

	/*Activate column pins, and read the rows*/
	for (Local_u8ColCounter = 0; Local_u8ColCounter < KPD_u8COL_NUM; Local_u8ColCounter++)
    256a:	19 82       	std	Y+1, r1	; 0x01
    256c:	5e c0       	rjmp	.+188    	; 0x262a <KPD_u8GetPressedKey+0xd2>
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KPD_u8COL_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_LOW);
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	fc 01       	movw	r30, r24
    2576:	e9 5e       	subi	r30, 0xE9	; 233
    2578:	fe 4f       	sbci	r31, 0xFE	; 254
    257a:	90 81       	ld	r25, Z
    257c:	83 e0       	ldi	r24, 0x03	; 3
    257e:	69 2f       	mov	r22, r25
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>

		for (Local_u8RowCounter = 0; Local_u8RowCounter < KPD_u8ROW_NUM; Local_u8RowCounter++)
    2586:	1a 82       	std	Y+2, r1	; 0x02
    2588:	3d c0       	rjmp	.+122    	; 0x2604 <KPD_u8GetPressedKey+0xac>
		{
			/*Read the current row*/

			DIO_u8GetPinValue(KPD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	fc 01       	movw	r30, r24
    2592:	ed 5e       	subi	r30, 0xED	; 237
    2594:	fe 4f       	sbci	r31, 0xFE	; 254
    2596:	90 81       	ld	r25, Z
    2598:	9e 01       	movw	r18, r28
    259a:	2c 5f       	subi	r18, 0xFC	; 252
    259c:	3f 4f       	sbci	r19, 0xFF	; 255
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	69 2f       	mov	r22, r25
    25a2:	a9 01       	movw	r20, r18
    25a4:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_u8GetPinValue>

			/*if current row is low, button is pressed*/
			if (Local_u8KeyState == DIO_u8PIN_LOW)
    25a8:	8c 81       	ldd	r24, Y+4	; 0x04
    25aa:	88 23       	and	r24, r24
    25ac:	41 f5       	brne	.+80     	; 0x25fe <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey = Local_uKPDArr[Local_u8RowCounter][Local_u8ColCounter];
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	48 2f       	mov	r20, r24
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	ca 01       	movw	r24, r20
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	88 0f       	add	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	82 0f       	add	r24, r18
    25c6:	93 1f       	adc	r25, r19
    25c8:	fc 01       	movw	r30, r24
    25ca:	ed 5f       	subi	r30, 0xFD	; 253
    25cc:	fe 4f       	sbci	r31, 0xFE	; 254
    25ce:	80 81       	ld	r24, Z
    25d0:	8b 83       	std	Y+3, r24	; 0x03
    25d2:	0f c0       	rjmp	.+30     	; 0x25f2 <KPD_u8GetPressedKey+0x9a>

				/*wait until key, is released*/
				while(Local_u8KeyState == DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	88 2f       	mov	r24, r24
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	fc 01       	movw	r30, r24
    25dc:	ed 5e       	subi	r30, 0xED	; 237
    25de:	fe 4f       	sbci	r31, 0xFE	; 254
    25e0:	90 81       	ld	r25, Z
    25e2:	9e 01       	movw	r18, r28
    25e4:	2c 5f       	subi	r18, 0xFC	; 252
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	69 2f       	mov	r22, r25
    25ec:	a9 01       	movw	r20, r18
    25ee:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <DIO_u8GetPinValue>
			if (Local_u8KeyState == DIO_u8PIN_LOW)
			{
				Local_u8PressedKey = Local_uKPDArr[Local_u8RowCounter][Local_u8ColCounter];

				/*wait until key, is released*/
				while(Local_u8KeyState == DIO_u8PIN_LOW)
    25f2:	8c 81       	ldd	r24, Y+4	; 0x04
    25f4:	88 23       	and	r24, r24
    25f6:	71 f3       	breq	.-36     	; 0x25d4 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
				}

				return Local_u8PressedKey;
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	8d 83       	std	Y+5, r24	; 0x05
    25fc:	1c c0       	rjmp	.+56     	; 0x2636 <KPD_u8GetPressedKey+0xde>
	for (Local_u8ColCounter = 0; Local_u8ColCounter < KPD_u8COL_NUM; Local_u8ColCounter++)
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KPD_u8COL_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_LOW);

		for (Local_u8RowCounter = 0; Local_u8RowCounter < KPD_u8ROW_NUM; Local_u8RowCounter++)
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	8f 5f       	subi	r24, 0xFF	; 255
    2602:	8a 83       	std	Y+2, r24	; 0x02
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	84 30       	cpi	r24, 0x04	; 4
    2608:	08 f4       	brcc	.+2      	; 0x260c <KPD_u8GetPressedKey+0xb4>
    260a:	bf cf       	rjmp	.-130    	; 0x258a <KPD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}
		}

		/*Deactivating the current column before activating the next*/
		DIO_u8SetPinValue(KPD_u8COL_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_HIGH);
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	88 2f       	mov	r24, r24
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	fc 01       	movw	r30, r24
    2614:	e9 5e       	subi	r30, 0xE9	; 233
    2616:	fe 4f       	sbci	r31, 0xFE	; 254
    2618:	90 81       	ld	r25, Z
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	69 2f       	mov	r22, r25
    261e:	41 e0       	ldi	r20, 0x01	; 1
    2620:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
	static uint8 Local_u8ColArr[KPD_u8COL_NUM] = {KPD_u8COL1_PIN, KPD_u8COL2_PIN, KPD_u8COL3_PIN, KPD_u8COL4_PIN};
	static uint8 Local_u8RowArr[KPD_u8ROW_NUM] = {KPD_u8ROW1_PIN, KPD_u8ROW2_PIN, KPD_u8ROW3_PIN, KPD_u8ROW4_PIN};
	static uint8 Local_uKPDArr[KPD_u8ROW_NUM][KPD_u8COL_NUM] = KPD_u8BUTTON_ARR; /*static is used here to save stack memory, as it will be saved one time in .bss memory not the stack*/

	/*Activate column pins, and read the rows*/
	for (Local_u8ColCounter = 0; Local_u8ColCounter < KPD_u8COL_NUM; Local_u8ColCounter++)
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	8f 5f       	subi	r24, 0xFF	; 255
    2628:	89 83       	std	Y+1, r24	; 0x01
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	84 30       	cpi	r24, 0x04	; 4
    262e:	08 f4       	brcc	.+2      	; 0x2632 <KPD_u8GetPressedKey+0xda>
    2630:	9e cf       	rjmp	.-196    	; 0x256e <KPD_u8GetPressedKey+0x16>
		DIO_u8SetPinValue(KPD_u8COL_PORT, Local_u8ColArr[Local_u8ColCounter], DIO_u8PIN_HIGH);
	}



	return Local_u8PressedKey;
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <LDR_u8GetAnalogVolt>:
#include "LDR_cfg.h"
#include "LDR_interface.h"


uint8 LDR_u8GetAnalogVolt(uint8 Copy_u8DigitalReading)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	00 d0       	rcall	.+0      	; 0x264e <LDR_u8GetAnalogVolt+0x6>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8AnalogVolt;


	Local_u8AnalogVolt = (uint8) Copy_u8DigitalReading;
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	89 83       	std	Y+1, r24	; 0x01


	return Local_u8AnalogVolt;
    2658:	89 81       	ldd	r24, Y+1	; 0x01


}
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <LM35_u8GetTempreature>:

#include "STD_TYPES.h"
#include "LM35_interface.h"

uint8 LM35_u8GetTempreature(uint8 Copy_u8DigitalReading)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	0f 92       	push	r0
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	89 83       	std	Y+1, r24	; 0x01

	return ((uint8)(((uint32)Copy_u8DigitalReading * 500UL) / 256UL));
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	88 2f       	mov	r24, r24
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	a0 e0       	ldi	r26, 0x00	; 0
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	24 ef       	ldi	r18, 0xF4	; 244
    267c:	31 e0       	ldi	r19, 0x01	; 1
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <__mulsi3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	89 2f       	mov	r24, r25
    2690:	9a 2f       	mov	r25, r26
    2692:	ab 2f       	mov	r26, r27
    2694:	bb 27       	eor	r27, r27

}
    2696:	0f 90       	pop	r0
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <PORT_voidInit>:
#include "PORT_cfg.h"
#include "PORT_prv.h"


void PORT_voidInit(void)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    26a6:	ea e3       	ldi	r30, 0x3A	; 58
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	8e e7       	ldi	r24, 0x7E	; 126
    26ac:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    26ae:	e7 e3       	ldi	r30, 0x37	; 55
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
    26b4:	e4 e3       	ldi	r30, 0x34	; 52
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	8f ef       	ldi	r24, 0xFF	; 255
    26ba:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    26bc:	e1 e3       	ldi	r30, 0x31	; 49
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	8f e7       	ldi	r24, 0x7F	; 127
    26c2:	80 83       	st	Z, r24
	
	PORTA = PORTA_InValue;
    26c4:	eb e3       	ldi	r30, 0x3B	; 59
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	10 82       	st	Z, r1
	PORTB = PORTB_InValue;
    26ca:	e8 e3       	ldi	r30, 0x38	; 56
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	84 ef       	ldi	r24, 0xF4	; 244
    26d0:	80 83       	st	Z, r24
	PORTC = PORTC_InValue;
    26d2:	e5 e3       	ldi	r30, 0x35	; 53
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	10 82       	st	Z, r1
	PORTD = PORTD_InValue;
    26d8:	e2 e3       	ldi	r30, 0x32	; 50
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	8c e3       	ldi	r24, 0x3C	; 60
    26de:	80 83       	st	Z, r24
}
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <SSD_u8SSD_ON>:
uint8 ssd[10] = {0b0111111, 0b0000110, 0b1011011, 0b1001111, 0b1100110, 0b1101101, 0b1111101, 0b0000111, 0b1111111, 0b1101111};



uint8 SSD_u8SSD_ON(const SSD_T* Copy_pSSD)
{
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <SSD_u8SSD_ON+0x6>
    26ec:	0f 92       	push	r0
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	9b 83       	std	Y+3, r25	; 0x03
    26f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    26f6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pSSD != NULL)
    26f8:	8a 81       	ldd	r24, Y+2	; 0x02
    26fa:	9b 81       	ldd	r25, Y+3	; 0x03
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	89 f1       	breq	.+98     	; 0x2762 <SSD_u8SSD_ON+0x7c>
	{
		if ((Copy_pSSD -> Type) == ANODE)
    2700:	ea 81       	ldd	r30, Y+2	; 0x02
    2702:	fb 81       	ldd	r31, Y+3	; 0x03
    2704:	80 81       	ld	r24, Z
    2706:	88 23       	and	r24, r24
    2708:	59 f4       	brne	.+22     	; 0x2720 <SSD_u8SSD_ON+0x3a>
		{
			DIO_u8SetPinValue(Copy_pSSD->Enable_PORT, Copy_pSSD->Enable_Pin, DIO_u8PIN_HIGH);
    270a:	ea 81       	ldd	r30, Y+2	; 0x02
    270c:	fb 81       	ldd	r31, Y+3	; 0x03
    270e:	83 81       	ldd	r24, Z+3	; 0x03
    2710:	ea 81       	ldd	r30, Y+2	; 0x02
    2712:	fb 81       	ldd	r31, Y+3	; 0x03
    2714:	94 81       	ldd	r25, Z+4	; 0x04
    2716:	69 2f       	mov	r22, r25
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
    271e:	1f c0       	rjmp	.+62     	; 0x275e <SSD_u8SSD_ON+0x78>
		}

		else if ((Copy_pSSD -> Type) == CATHODE)
    2720:	ea 81       	ldd	r30, Y+2	; 0x02
    2722:	fb 81       	ldd	r31, Y+3	; 0x03
    2724:	80 81       	ld	r24, Z
    2726:	81 30       	cpi	r24, 0x01	; 1
    2728:	59 f4       	brne	.+22     	; 0x2740 <SSD_u8SSD_ON+0x5a>
		{

			DIO_u8SetPinValue(Copy_pSSD->Enable_PORT, Copy_pSSD->Enable_Pin, DIO_u8PIN_LOW);
    272a:	ea 81       	ldd	r30, Y+2	; 0x02
    272c:	fb 81       	ldd	r31, Y+3	; 0x03
    272e:	83 81       	ldd	r24, Z+3	; 0x03
    2730:	ea 81       	ldd	r30, Y+2	; 0x02
    2732:	fb 81       	ldd	r31, Y+3	; 0x03
    2734:	94 81       	ldd	r25, Z+4	; 0x04
    2736:	69 2f       	mov	r22, r25
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
    273e:	0f c0       	rjmp	.+30     	; 0x275e <SSD_u8SSD_ON+0x78>

		}

		else if ((Copy_pSSD -> Type) == ETA_KIT)
    2740:	ea 81       	ldd	r30, Y+2	; 0x02
    2742:	fb 81       	ldd	r31, Y+3	; 0x03
    2744:	80 81       	ld	r24, Z
    2746:	82 30       	cpi	r24, 0x02	; 2
    2748:	51 f4       	brne	.+20     	; 0x275e <SSD_u8SSD_ON+0x78>
		{

			DIO_u8SetPinValue(Copy_pSSD->Enable_PORT, Copy_pSSD->Enable_Pin, DIO_u8PIN_HIGH);
    274a:	ea 81       	ldd	r30, Y+2	; 0x02
    274c:	fb 81       	ldd	r31, Y+3	; 0x03
    274e:	83 81       	ldd	r24, Z+3	; 0x03
    2750:	ea 81       	ldd	r30, Y+2	; 0x02
    2752:	fb 81       	ldd	r31, Y+3	; 0x03
    2754:	94 81       	ldd	r25, Z+4	; 0x04
    2756:	69 2f       	mov	r22, r25
    2758:	41 e0       	ldi	r20, 0x01	; 1
    275a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
		}


		Local_u8ErrorState = OK;
    275e:	19 82       	std	Y+1, r1	; 0x01
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <SSD_u8SSD_ON+0x80>
	}

	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2762:	82 e0       	ldi	r24, 0x02	; 2
    2764:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2766:	89 81       	ldd	r24, Y+1	; 0x01
}
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <SSD_u8SSD_OFF>:


uint8 SSD_u8SSD_OFF(const SSD_T* Copy_pSSD)
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	00 d0       	rcall	.+0      	; 0x277a <SSD_u8SSD_OFF+0x6>
    277a:	0f 92       	push	r0
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	9b 83       	std	Y+3, r25	; 0x03
    2782:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    2784:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pSSD != NULL)
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	9b 81       	ldd	r25, Y+3	; 0x03
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	89 f1       	breq	.+98     	; 0x27f0 <SSD_u8SSD_OFF+0x7c>
	{
		if ((Copy_pSSD -> Type) == ANODE)
    278e:	ea 81       	ldd	r30, Y+2	; 0x02
    2790:	fb 81       	ldd	r31, Y+3	; 0x03
    2792:	80 81       	ld	r24, Z
    2794:	88 23       	and	r24, r24
    2796:	59 f4       	brne	.+22     	; 0x27ae <SSD_u8SSD_OFF+0x3a>
		{
			DIO_u8SetPinValue(Copy_pSSD->Enable_PORT, Copy_pSSD->Enable_Pin, DIO_u8PIN_LOW);
    2798:	ea 81       	ldd	r30, Y+2	; 0x02
    279a:	fb 81       	ldd	r31, Y+3	; 0x03
    279c:	83 81       	ldd	r24, Z+3	; 0x03
    279e:	ea 81       	ldd	r30, Y+2	; 0x02
    27a0:	fb 81       	ldd	r31, Y+3	; 0x03
    27a2:	94 81       	ldd	r25, Z+4	; 0x04
    27a4:	69 2f       	mov	r22, r25
    27a6:	40 e0       	ldi	r20, 0x00	; 0
    27a8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
    27ac:	1f c0       	rjmp	.+62     	; 0x27ec <SSD_u8SSD_OFF+0x78>
		}

		else if ((Copy_pSSD -> Type) == CATHODE)
    27ae:	ea 81       	ldd	r30, Y+2	; 0x02
    27b0:	fb 81       	ldd	r31, Y+3	; 0x03
    27b2:	80 81       	ld	r24, Z
    27b4:	81 30       	cpi	r24, 0x01	; 1
    27b6:	59 f4       	brne	.+22     	; 0x27ce <SSD_u8SSD_OFF+0x5a>
		{

			DIO_u8SetPinValue(Copy_pSSD->Enable_PORT, Copy_pSSD->Enable_Pin, DIO_u8PIN_HIGH);
    27b8:	ea 81       	ldd	r30, Y+2	; 0x02
    27ba:	fb 81       	ldd	r31, Y+3	; 0x03
    27bc:	83 81       	ldd	r24, Z+3	; 0x03
    27be:	ea 81       	ldd	r30, Y+2	; 0x02
    27c0:	fb 81       	ldd	r31, Y+3	; 0x03
    27c2:	94 81       	ldd	r25, Z+4	; 0x04
    27c4:	69 2f       	mov	r22, r25
    27c6:	41 e0       	ldi	r20, 0x01	; 1
    27c8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
    27cc:	0f c0       	rjmp	.+30     	; 0x27ec <SSD_u8SSD_OFF+0x78>

		}

		else if ((Copy_pSSD -> Type) == ETA_KIT)
    27ce:	ea 81       	ldd	r30, Y+2	; 0x02
    27d0:	fb 81       	ldd	r31, Y+3	; 0x03
    27d2:	80 81       	ld	r24, Z
    27d4:	82 30       	cpi	r24, 0x02	; 2
    27d6:	51 f4       	brne	.+20     	; 0x27ec <SSD_u8SSD_OFF+0x78>
		{

			DIO_u8SetPinValue(Copy_pSSD->Enable_PORT, Copy_pSSD->Enable_Pin, DIO_u8PIN_LOW);
    27d8:	ea 81       	ldd	r30, Y+2	; 0x02
    27da:	fb 81       	ldd	r31, Y+3	; 0x03
    27dc:	83 81       	ldd	r24, Z+3	; 0x03
    27de:	ea 81       	ldd	r30, Y+2	; 0x02
    27e0:	fb 81       	ldd	r31, Y+3	; 0x03
    27e2:	94 81       	ldd	r25, Z+4	; 0x04
    27e4:	69 2f       	mov	r22, r25
    27e6:	40 e0       	ldi	r20, 0x00	; 0
    27e8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
		}


		Local_u8ErrorState = OK;
    27ec:	19 82       	std	Y+1, r1	; 0x01
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <SSD_u8SSD_OFF+0x80>
	}

	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <SSD_u8SetNumber>:




uint8 SSD_u8SetNumber(const SSD_T* Copy_pSSD, uint8 Copy_u8Number)
{
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	00 d0       	rcall	.+0      	; 0x2808 <SSD_u8SetNumber+0x6>
    2808:	00 d0       	rcall	.+0      	; 0x280a <SSD_u8SetNumber+0x8>
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	9b 83       	std	Y+3, r25	; 0x03
    2810:	8a 83       	std	Y+2, r24	; 0x02
    2812:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    2814:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pSSD != NULL)
    2816:	8a 81       	ldd	r24, Y+2	; 0x02
    2818:	9b 81       	ldd	r25, Y+3	; 0x03
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	09 f4       	brne	.+2      	; 0x2820 <SSD_u8SetNumber+0x1e>
    281e:	12 c2       	rjmp	.+1060   	; 0x2c44 <SSD_u8SetNumber+0x442>
	{
		if ((Copy_pSSD -> Type) == ANODE)
    2820:	ea 81       	ldd	r30, Y+2	; 0x02
    2822:	fb 81       	ldd	r31, Y+3	; 0x03
    2824:	80 81       	ld	r24, Z
    2826:	88 23       	and	r24, r24
    2828:	09 f0       	breq	.+2      	; 0x282c <SSD_u8SetNumber+0x2a>
    282a:	af c0       	rjmp	.+350    	; 0x298a <SSD_u8SetNumber+0x188>
		{
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA ) , ~(GET_BIT(ssd[Copy_u8Number], 0)));
    282c:	ea 81       	ldd	r30, Y+2	; 0x02
    282e:	fb 81       	ldd	r31, Y+3	; 0x03
    2830:	31 81       	ldd	r19, Z+1	; 0x01
    2832:	ea 81       	ldd	r30, Y+2	; 0x02
    2834:	fb 81       	ldd	r31, Y+3	; 0x03
    2836:	22 81       	ldd	r18, Z+2	; 0x02
    2838:	8c 81       	ldd	r24, Y+4	; 0x04
    283a:	88 2f       	mov	r24, r24
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	fc 01       	movw	r30, r24
    2840:	e5 5e       	subi	r30, 0xE5	; 229
    2842:	fe 4f       	sbci	r31, 0xFE	; 254
    2844:	80 81       	ld	r24, Z
    2846:	81 70       	andi	r24, 0x01	; 1
    2848:	80 95       	com	r24
    284a:	98 2f       	mov	r25, r24
    284c:	83 2f       	mov	r24, r19
    284e:	62 2f       	mov	r22, r18
    2850:	49 2f       	mov	r20, r25
    2852:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+1), ~(GET_BIT(ssd[Copy_u8Number], 1)));
    2856:	ea 81       	ldd	r30, Y+2	; 0x02
    2858:	fb 81       	ldd	r31, Y+3	; 0x03
    285a:	21 81       	ldd	r18, Z+1	; 0x01
    285c:	ea 81       	ldd	r30, Y+2	; 0x02
    285e:	fb 81       	ldd	r31, Y+3	; 0x03
    2860:	82 81       	ldd	r24, Z+2	; 0x02
    2862:	38 2f       	mov	r19, r24
    2864:	3f 5f       	subi	r19, 0xFF	; 255
    2866:	8c 81       	ldd	r24, Y+4	; 0x04
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	fc 01       	movw	r30, r24
    286e:	e5 5e       	subi	r30, 0xE5	; 229
    2870:	fe 4f       	sbci	r31, 0xFE	; 254
    2872:	80 81       	ld	r24, Z
    2874:	86 95       	lsr	r24
    2876:	81 70       	andi	r24, 0x01	; 1
    2878:	80 95       	com	r24
    287a:	98 2f       	mov	r25, r24
    287c:	82 2f       	mov	r24, r18
    287e:	63 2f       	mov	r22, r19
    2880:	49 2f       	mov	r20, r25
    2882:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+2), ~(GET_BIT(ssd[Copy_u8Number], 2)));
    2886:	ea 81       	ldd	r30, Y+2	; 0x02
    2888:	fb 81       	ldd	r31, Y+3	; 0x03
    288a:	21 81       	ldd	r18, Z+1	; 0x01
    288c:	ea 81       	ldd	r30, Y+2	; 0x02
    288e:	fb 81       	ldd	r31, Y+3	; 0x03
    2890:	82 81       	ldd	r24, Z+2	; 0x02
    2892:	38 2f       	mov	r19, r24
    2894:	3e 5f       	subi	r19, 0xFE	; 254
    2896:	8c 81       	ldd	r24, Y+4	; 0x04
    2898:	88 2f       	mov	r24, r24
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	fc 01       	movw	r30, r24
    289e:	e5 5e       	subi	r30, 0xE5	; 229
    28a0:	fe 4f       	sbci	r31, 0xFE	; 254
    28a2:	80 81       	ld	r24, Z
    28a4:	86 95       	lsr	r24
    28a6:	86 95       	lsr	r24
    28a8:	81 70       	andi	r24, 0x01	; 1
    28aa:	80 95       	com	r24
    28ac:	98 2f       	mov	r25, r24
    28ae:	82 2f       	mov	r24, r18
    28b0:	63 2f       	mov	r22, r19
    28b2:	49 2f       	mov	r20, r25
    28b4:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+3), ~(GET_BIT(ssd[Copy_u8Number], 3)));
    28b8:	ea 81       	ldd	r30, Y+2	; 0x02
    28ba:	fb 81       	ldd	r31, Y+3	; 0x03
    28bc:	21 81       	ldd	r18, Z+1	; 0x01
    28be:	ea 81       	ldd	r30, Y+2	; 0x02
    28c0:	fb 81       	ldd	r31, Y+3	; 0x03
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	38 2f       	mov	r19, r24
    28c6:	3d 5f       	subi	r19, 0xFD	; 253
    28c8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ca:	88 2f       	mov	r24, r24
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	fc 01       	movw	r30, r24
    28d0:	e5 5e       	subi	r30, 0xE5	; 229
    28d2:	fe 4f       	sbci	r31, 0xFE	; 254
    28d4:	80 81       	ld	r24, Z
    28d6:	86 95       	lsr	r24
    28d8:	86 95       	lsr	r24
    28da:	86 95       	lsr	r24
    28dc:	81 70       	andi	r24, 0x01	; 1
    28de:	80 95       	com	r24
    28e0:	98 2f       	mov	r25, r24
    28e2:	82 2f       	mov	r24, r18
    28e4:	63 2f       	mov	r22, r19
    28e6:	49 2f       	mov	r20, r25
    28e8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+4), ~(GET_BIT(ssd[Copy_u8Number], 4)));
    28ec:	ea 81       	ldd	r30, Y+2	; 0x02
    28ee:	fb 81       	ldd	r31, Y+3	; 0x03
    28f0:	21 81       	ldd	r18, Z+1	; 0x01
    28f2:	ea 81       	ldd	r30, Y+2	; 0x02
    28f4:	fb 81       	ldd	r31, Y+3	; 0x03
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	38 2f       	mov	r19, r24
    28fa:	3c 5f       	subi	r19, 0xFC	; 252
    28fc:	8c 81       	ldd	r24, Y+4	; 0x04
    28fe:	88 2f       	mov	r24, r24
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	fc 01       	movw	r30, r24
    2904:	e5 5e       	subi	r30, 0xE5	; 229
    2906:	fe 4f       	sbci	r31, 0xFE	; 254
    2908:	80 81       	ld	r24, Z
    290a:	82 95       	swap	r24
    290c:	8f 70       	andi	r24, 0x0F	; 15
    290e:	81 70       	andi	r24, 0x01	; 1
    2910:	80 95       	com	r24
    2912:	98 2f       	mov	r25, r24
    2914:	82 2f       	mov	r24, r18
    2916:	63 2f       	mov	r22, r19
    2918:	49 2f       	mov	r20, r25
    291a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+5), ~(GET_BIT(ssd[Copy_u8Number], 5)));
    291e:	ea 81       	ldd	r30, Y+2	; 0x02
    2920:	fb 81       	ldd	r31, Y+3	; 0x03
    2922:	21 81       	ldd	r18, Z+1	; 0x01
    2924:	ea 81       	ldd	r30, Y+2	; 0x02
    2926:	fb 81       	ldd	r31, Y+3	; 0x03
    2928:	82 81       	ldd	r24, Z+2	; 0x02
    292a:	38 2f       	mov	r19, r24
    292c:	3b 5f       	subi	r19, 0xFB	; 251
    292e:	8c 81       	ldd	r24, Y+4	; 0x04
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	fc 01       	movw	r30, r24
    2936:	e5 5e       	subi	r30, 0xE5	; 229
    2938:	fe 4f       	sbci	r31, 0xFE	; 254
    293a:	80 81       	ld	r24, Z
    293c:	82 95       	swap	r24
    293e:	86 95       	lsr	r24
    2940:	87 70       	andi	r24, 0x07	; 7
    2942:	81 70       	andi	r24, 0x01	; 1
    2944:	80 95       	com	r24
    2946:	98 2f       	mov	r25, r24
    2948:	82 2f       	mov	r24, r18
    294a:	63 2f       	mov	r22, r19
    294c:	49 2f       	mov	r20, r25
    294e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+6), ~(GET_BIT(ssd[Copy_u8Number], 6)));
    2952:	ea 81       	ldd	r30, Y+2	; 0x02
    2954:	fb 81       	ldd	r31, Y+3	; 0x03
    2956:	21 81       	ldd	r18, Z+1	; 0x01
    2958:	ea 81       	ldd	r30, Y+2	; 0x02
    295a:	fb 81       	ldd	r31, Y+3	; 0x03
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	38 2f       	mov	r19, r24
    2960:	3a 5f       	subi	r19, 0xFA	; 250
    2962:	8c 81       	ldd	r24, Y+4	; 0x04
    2964:	88 2f       	mov	r24, r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	fc 01       	movw	r30, r24
    296a:	e5 5e       	subi	r30, 0xE5	; 229
    296c:	fe 4f       	sbci	r31, 0xFE	; 254
    296e:	80 81       	ld	r24, Z
    2970:	82 95       	swap	r24
    2972:	86 95       	lsr	r24
    2974:	86 95       	lsr	r24
    2976:	83 70       	andi	r24, 0x03	; 3
    2978:	81 70       	andi	r24, 0x01	; 1
    297a:	80 95       	com	r24
    297c:	98 2f       	mov	r25, r24
    297e:	82 2f       	mov	r24, r18
    2980:	63 2f       	mov	r22, r19
    2982:	49 2f       	mov	r20, r25
    2984:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
    2988:	5b c1       	rjmp	.+694    	; 0x2c40 <SSD_u8SetNumber+0x43e>
		}

		else if ((Copy_pSSD -> Type) == CATHODE)
    298a:	ea 81       	ldd	r30, Y+2	; 0x02
    298c:	fb 81       	ldd	r31, Y+3	; 0x03
    298e:	80 81       	ld	r24, Z
    2990:	81 30       	cpi	r24, 0x01	; 1
    2992:	09 f0       	breq	.+2      	; 0x2996 <SSD_u8SetNumber+0x194>
    2994:	a8 c0       	rjmp	.+336    	; 0x2ae6 <SSD_u8SetNumber+0x2e4>
		{
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA ) , (GET_BIT(ssd[Copy_u8Number], 0)));
    2996:	ea 81       	ldd	r30, Y+2	; 0x02
    2998:	fb 81       	ldd	r31, Y+3	; 0x03
    299a:	21 81       	ldd	r18, Z+1	; 0x01
    299c:	ea 81       	ldd	r30, Y+2	; 0x02
    299e:	fb 81       	ldd	r31, Y+3	; 0x03
    29a0:	32 81       	ldd	r19, Z+2	; 0x02
    29a2:	8c 81       	ldd	r24, Y+4	; 0x04
    29a4:	88 2f       	mov	r24, r24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	fc 01       	movw	r30, r24
    29aa:	e5 5e       	subi	r30, 0xE5	; 229
    29ac:	fe 4f       	sbci	r31, 0xFE	; 254
    29ae:	80 81       	ld	r24, Z
    29b0:	98 2f       	mov	r25, r24
    29b2:	91 70       	andi	r25, 0x01	; 1
    29b4:	82 2f       	mov	r24, r18
    29b6:	63 2f       	mov	r22, r19
    29b8:	49 2f       	mov	r20, r25
    29ba:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+1), (GET_BIT(ssd[Copy_u8Number], 1)));
    29be:	ea 81       	ldd	r30, Y+2	; 0x02
    29c0:	fb 81       	ldd	r31, Y+3	; 0x03
    29c2:	21 81       	ldd	r18, Z+1	; 0x01
    29c4:	ea 81       	ldd	r30, Y+2	; 0x02
    29c6:	fb 81       	ldd	r31, Y+3	; 0x03
    29c8:	82 81       	ldd	r24, Z+2	; 0x02
    29ca:	38 2f       	mov	r19, r24
    29cc:	3f 5f       	subi	r19, 0xFF	; 255
    29ce:	8c 81       	ldd	r24, Y+4	; 0x04
    29d0:	88 2f       	mov	r24, r24
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	fc 01       	movw	r30, r24
    29d6:	e5 5e       	subi	r30, 0xE5	; 229
    29d8:	fe 4f       	sbci	r31, 0xFE	; 254
    29da:	80 81       	ld	r24, Z
    29dc:	86 95       	lsr	r24
    29de:	98 2f       	mov	r25, r24
    29e0:	91 70       	andi	r25, 0x01	; 1
    29e2:	82 2f       	mov	r24, r18
    29e4:	63 2f       	mov	r22, r19
    29e6:	49 2f       	mov	r20, r25
    29e8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+2), (GET_BIT(ssd[Copy_u8Number], 2)));
    29ec:	ea 81       	ldd	r30, Y+2	; 0x02
    29ee:	fb 81       	ldd	r31, Y+3	; 0x03
    29f0:	21 81       	ldd	r18, Z+1	; 0x01
    29f2:	ea 81       	ldd	r30, Y+2	; 0x02
    29f4:	fb 81       	ldd	r31, Y+3	; 0x03
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	38 2f       	mov	r19, r24
    29fa:	3e 5f       	subi	r19, 0xFE	; 254
    29fc:	8c 81       	ldd	r24, Y+4	; 0x04
    29fe:	88 2f       	mov	r24, r24
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	fc 01       	movw	r30, r24
    2a04:	e5 5e       	subi	r30, 0xE5	; 229
    2a06:	fe 4f       	sbci	r31, 0xFE	; 254
    2a08:	80 81       	ld	r24, Z
    2a0a:	86 95       	lsr	r24
    2a0c:	86 95       	lsr	r24
    2a0e:	98 2f       	mov	r25, r24
    2a10:	91 70       	andi	r25, 0x01	; 1
    2a12:	82 2f       	mov	r24, r18
    2a14:	63 2f       	mov	r22, r19
    2a16:	49 2f       	mov	r20, r25
    2a18:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+3), (GET_BIT(ssd[Copy_u8Number], 3)));
    2a1c:	ea 81       	ldd	r30, Y+2	; 0x02
    2a1e:	fb 81       	ldd	r31, Y+3	; 0x03
    2a20:	21 81       	ldd	r18, Z+1	; 0x01
    2a22:	ea 81       	ldd	r30, Y+2	; 0x02
    2a24:	fb 81       	ldd	r31, Y+3	; 0x03
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	38 2f       	mov	r19, r24
    2a2a:	3d 5f       	subi	r19, 0xFD	; 253
    2a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2e:	88 2f       	mov	r24, r24
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	fc 01       	movw	r30, r24
    2a34:	e5 5e       	subi	r30, 0xE5	; 229
    2a36:	fe 4f       	sbci	r31, 0xFE	; 254
    2a38:	80 81       	ld	r24, Z
    2a3a:	86 95       	lsr	r24
    2a3c:	86 95       	lsr	r24
    2a3e:	86 95       	lsr	r24
    2a40:	98 2f       	mov	r25, r24
    2a42:	91 70       	andi	r25, 0x01	; 1
    2a44:	82 2f       	mov	r24, r18
    2a46:	63 2f       	mov	r22, r19
    2a48:	49 2f       	mov	r20, r25
    2a4a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+4), (GET_BIT(ssd[Copy_u8Number], 4)));
    2a4e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a50:	fb 81       	ldd	r31, Y+3	; 0x03
    2a52:	21 81       	ldd	r18, Z+1	; 0x01
    2a54:	ea 81       	ldd	r30, Y+2	; 0x02
    2a56:	fb 81       	ldd	r31, Y+3	; 0x03
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	38 2f       	mov	r19, r24
    2a5c:	3c 5f       	subi	r19, 0xFC	; 252
    2a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	fc 01       	movw	r30, r24
    2a66:	e5 5e       	subi	r30, 0xE5	; 229
    2a68:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6a:	80 81       	ld	r24, Z
    2a6c:	82 95       	swap	r24
    2a6e:	8f 70       	andi	r24, 0x0F	; 15
    2a70:	98 2f       	mov	r25, r24
    2a72:	91 70       	andi	r25, 0x01	; 1
    2a74:	82 2f       	mov	r24, r18
    2a76:	63 2f       	mov	r22, r19
    2a78:	49 2f       	mov	r20, r25
    2a7a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+5), (GET_BIT(ssd[Copy_u8Number], 5)));
    2a7e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a80:	fb 81       	ldd	r31, Y+3	; 0x03
    2a82:	21 81       	ldd	r18, Z+1	; 0x01
    2a84:	ea 81       	ldd	r30, Y+2	; 0x02
    2a86:	fb 81       	ldd	r31, Y+3	; 0x03
    2a88:	82 81       	ldd	r24, Z+2	; 0x02
    2a8a:	38 2f       	mov	r19, r24
    2a8c:	3b 5f       	subi	r19, 0xFB	; 251
    2a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a90:	88 2f       	mov	r24, r24
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	fc 01       	movw	r30, r24
    2a96:	e5 5e       	subi	r30, 0xE5	; 229
    2a98:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9a:	80 81       	ld	r24, Z
    2a9c:	82 95       	swap	r24
    2a9e:	86 95       	lsr	r24
    2aa0:	87 70       	andi	r24, 0x07	; 7
    2aa2:	98 2f       	mov	r25, r24
    2aa4:	91 70       	andi	r25, 0x01	; 1
    2aa6:	82 2f       	mov	r24, r18
    2aa8:	63 2f       	mov	r22, r19
    2aaa:	49 2f       	mov	r20, r25
    2aac:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+6), (GET_BIT(ssd[Copy_u8Number], 6)));
    2ab0:	ea 81       	ldd	r30, Y+2	; 0x02
    2ab2:	fb 81       	ldd	r31, Y+3	; 0x03
    2ab4:	21 81       	ldd	r18, Z+1	; 0x01
    2ab6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ab8:	fb 81       	ldd	r31, Y+3	; 0x03
    2aba:	82 81       	ldd	r24, Z+2	; 0x02
    2abc:	38 2f       	mov	r19, r24
    2abe:	3a 5f       	subi	r19, 0xFA	; 250
    2ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac2:	88 2f       	mov	r24, r24
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	e5 5e       	subi	r30, 0xE5	; 229
    2aca:	fe 4f       	sbci	r31, 0xFE	; 254
    2acc:	80 81       	ld	r24, Z
    2ace:	82 95       	swap	r24
    2ad0:	86 95       	lsr	r24
    2ad2:	86 95       	lsr	r24
    2ad4:	83 70       	andi	r24, 0x03	; 3
    2ad6:	98 2f       	mov	r25, r24
    2ad8:	91 70       	andi	r25, 0x01	; 1
    2ada:	82 2f       	mov	r24, r18
    2adc:	63 2f       	mov	r22, r19
    2ade:	49 2f       	mov	r20, r25
    2ae0:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
    2ae4:	ad c0       	rjmp	.+346    	; 0x2c40 <SSD_u8SetNumber+0x43e>
		}

		else if ((Copy_pSSD -> Type) == ETA_KIT)
    2ae6:	ea 81       	ldd	r30, Y+2	; 0x02
    2ae8:	fb 81       	ldd	r31, Y+3	; 0x03
    2aea:	80 81       	ld	r24, Z
    2aec:	82 30       	cpi	r24, 0x02	; 2
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <SSD_u8SetNumber+0x2f0>
    2af0:	a7 c0       	rjmp	.+334    	; 0x2c40 <SSD_u8SetNumber+0x43e>
		{
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA ) , (GET_BIT(ssd[Copy_u8Number], 0)));
    2af2:	ea 81       	ldd	r30, Y+2	; 0x02
    2af4:	fb 81       	ldd	r31, Y+3	; 0x03
    2af6:	21 81       	ldd	r18, Z+1	; 0x01
    2af8:	ea 81       	ldd	r30, Y+2	; 0x02
    2afa:	fb 81       	ldd	r31, Y+3	; 0x03
    2afc:	32 81       	ldd	r19, Z+2	; 0x02
    2afe:	8c 81       	ldd	r24, Y+4	; 0x04
    2b00:	88 2f       	mov	r24, r24
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	fc 01       	movw	r30, r24
    2b06:	e5 5e       	subi	r30, 0xE5	; 229
    2b08:	fe 4f       	sbci	r31, 0xFE	; 254
    2b0a:	80 81       	ld	r24, Z
    2b0c:	98 2f       	mov	r25, r24
    2b0e:	91 70       	andi	r25, 0x01	; 1
    2b10:	82 2f       	mov	r24, r18
    2b12:	63 2f       	mov	r22, r19
    2b14:	49 2f       	mov	r20, r25
    2b16:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+1), (GET_BIT(ssd[Copy_u8Number], 1)));
    2b1a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b1c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b1e:	21 81       	ldd	r18, Z+1	; 0x01
    2b20:	ea 81       	ldd	r30, Y+2	; 0x02
    2b22:	fb 81       	ldd	r31, Y+3	; 0x03
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	38 2f       	mov	r19, r24
    2b28:	3f 5f       	subi	r19, 0xFF	; 255
    2b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b2c:	88 2f       	mov	r24, r24
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	fc 01       	movw	r30, r24
    2b32:	e5 5e       	subi	r30, 0xE5	; 229
    2b34:	fe 4f       	sbci	r31, 0xFE	; 254
    2b36:	80 81       	ld	r24, Z
    2b38:	86 95       	lsr	r24
    2b3a:	98 2f       	mov	r25, r24
    2b3c:	91 70       	andi	r25, 0x01	; 1
    2b3e:	82 2f       	mov	r24, r18
    2b40:	63 2f       	mov	r22, r19
    2b42:	49 2f       	mov	r20, r25
    2b44:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+2), (GET_BIT(ssd[Copy_u8Number], 2)));
    2b48:	ea 81       	ldd	r30, Y+2	; 0x02
    2b4a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b4c:	21 81       	ldd	r18, Z+1	; 0x01
    2b4e:	ea 81       	ldd	r30, Y+2	; 0x02
    2b50:	fb 81       	ldd	r31, Y+3	; 0x03
    2b52:	82 81       	ldd	r24, Z+2	; 0x02
    2b54:	38 2f       	mov	r19, r24
    2b56:	3e 5f       	subi	r19, 0xFE	; 254
    2b58:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5a:	88 2f       	mov	r24, r24
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	fc 01       	movw	r30, r24
    2b60:	e5 5e       	subi	r30, 0xE5	; 229
    2b62:	fe 4f       	sbci	r31, 0xFE	; 254
    2b64:	80 81       	ld	r24, Z
    2b66:	86 95       	lsr	r24
    2b68:	86 95       	lsr	r24
    2b6a:	98 2f       	mov	r25, r24
    2b6c:	91 70       	andi	r25, 0x01	; 1
    2b6e:	82 2f       	mov	r24, r18
    2b70:	63 2f       	mov	r22, r19
    2b72:	49 2f       	mov	r20, r25
    2b74:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+3), (GET_BIT(ssd[Copy_u8Number], 3)));
    2b78:	ea 81       	ldd	r30, Y+2	; 0x02
    2b7a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b7c:	21 81       	ldd	r18, Z+1	; 0x01
    2b7e:	ea 81       	ldd	r30, Y+2	; 0x02
    2b80:	fb 81       	ldd	r31, Y+3	; 0x03
    2b82:	82 81       	ldd	r24, Z+2	; 0x02
    2b84:	38 2f       	mov	r19, r24
    2b86:	3d 5f       	subi	r19, 0xFD	; 253
    2b88:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8a:	88 2f       	mov	r24, r24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	fc 01       	movw	r30, r24
    2b90:	e5 5e       	subi	r30, 0xE5	; 229
    2b92:	fe 4f       	sbci	r31, 0xFE	; 254
    2b94:	80 81       	ld	r24, Z
    2b96:	86 95       	lsr	r24
    2b98:	86 95       	lsr	r24
    2b9a:	86 95       	lsr	r24
    2b9c:	98 2f       	mov	r25, r24
    2b9e:	91 70       	andi	r25, 0x01	; 1
    2ba0:	82 2f       	mov	r24, r18
    2ba2:	63 2f       	mov	r22, r19
    2ba4:	49 2f       	mov	r20, r25
    2ba6:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+4), (GET_BIT(ssd[Copy_u8Number], 4)));
    2baa:	ea 81       	ldd	r30, Y+2	; 0x02
    2bac:	fb 81       	ldd	r31, Y+3	; 0x03
    2bae:	21 81       	ldd	r18, Z+1	; 0x01
    2bb0:	ea 81       	ldd	r30, Y+2	; 0x02
    2bb2:	fb 81       	ldd	r31, Y+3	; 0x03
    2bb4:	82 81       	ldd	r24, Z+2	; 0x02
    2bb6:	38 2f       	mov	r19, r24
    2bb8:	3c 5f       	subi	r19, 0xFC	; 252
    2bba:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	e5 5e       	subi	r30, 0xE5	; 229
    2bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc6:	80 81       	ld	r24, Z
    2bc8:	82 95       	swap	r24
    2bca:	8f 70       	andi	r24, 0x0F	; 15
    2bcc:	98 2f       	mov	r25, r24
    2bce:	91 70       	andi	r25, 0x01	; 1
    2bd0:	82 2f       	mov	r24, r18
    2bd2:	63 2f       	mov	r22, r19
    2bd4:	49 2f       	mov	r20, r25
    2bd6:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+5), (GET_BIT(ssd[Copy_u8Number], 5)));
    2bda:	ea 81       	ldd	r30, Y+2	; 0x02
    2bdc:	fb 81       	ldd	r31, Y+3	; 0x03
    2bde:	21 81       	ldd	r18, Z+1	; 0x01
    2be0:	ea 81       	ldd	r30, Y+2	; 0x02
    2be2:	fb 81       	ldd	r31, Y+3	; 0x03
    2be4:	82 81       	ldd	r24, Z+2	; 0x02
    2be6:	38 2f       	mov	r19, r24
    2be8:	3b 5f       	subi	r19, 0xFB	; 251
    2bea:	8c 81       	ldd	r24, Y+4	; 0x04
    2bec:	88 2f       	mov	r24, r24
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	e5 5e       	subi	r30, 0xE5	; 229
    2bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf6:	80 81       	ld	r24, Z
    2bf8:	82 95       	swap	r24
    2bfa:	86 95       	lsr	r24
    2bfc:	87 70       	andi	r24, 0x07	; 7
    2bfe:	98 2f       	mov	r25, r24
    2c00:	91 70       	andi	r25, 0x01	; 1
    2c02:	82 2f       	mov	r24, r18
    2c04:	63 2f       	mov	r22, r19
    2c06:	49 2f       	mov	r20, r25
    2c08:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
			DIO_u8SetPinValue((Copy_pSSD->PORT) , (Copy_pSSD->LEDA+6), (GET_BIT(ssd[Copy_u8Number], 6)));
    2c0c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c0e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c10:	21 81       	ldd	r18, Z+1	; 0x01
    2c12:	ea 81       	ldd	r30, Y+2	; 0x02
    2c14:	fb 81       	ldd	r31, Y+3	; 0x03
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	38 2f       	mov	r19, r24
    2c1a:	3a 5f       	subi	r19, 0xFA	; 250
    2c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	fc 01       	movw	r30, r24
    2c24:	e5 5e       	subi	r30, 0xE5	; 229
    2c26:	fe 4f       	sbci	r31, 0xFE	; 254
    2c28:	80 81       	ld	r24, Z
    2c2a:	82 95       	swap	r24
    2c2c:	86 95       	lsr	r24
    2c2e:	86 95       	lsr	r24
    2c30:	83 70       	andi	r24, 0x03	; 3
    2c32:	98 2f       	mov	r25, r24
    2c34:	91 70       	andi	r25, 0x01	; 1
    2c36:	82 2f       	mov	r24, r18
    2c38:	63 2f       	mov	r22, r19
    2c3a:	49 2f       	mov	r20, r25
    2c3c:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
		}


		Local_u8ErrorState = OK;
    2c40:	19 82       	std	Y+1, r1	; 0x01
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <SSD_u8SetNumber+0x446>
	}

	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
    2c44:	82 e0       	ldi	r24, 0x02	; 2
    2c46:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	cf 91       	pop	r28
    2c54:	df 91       	pop	r29
    2c56:	08 95       	ret

00002c58 <main>:

uint8 Local_u8AttemptsLeft = 3;		/*to be passed to the SSD function to show number of trials*/


void main(void)
{
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62

	PORT_voidInit();
    2c60:	0e 94 4f 13 	call	0x269e	; 0x269e <PORT_voidInit>
	ADC_voidInit();
    2c64:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	CLCD_voidInit();
    2c68:	0e 94 04 08 	call	0x1008	; 0x1008 <CLCD_voidInit>
	EXTI_voidInitInt2();
    2c6c:	0e 94 42 10 	call	0x2084	; 0x2084 <EXTI_voidInitInt2>

	EXTI_u8SetCallBack(EXTI_u8INT2, &ShutDown);
    2c70:	28 e4       	ldi	r18, 0x48	; 72
    2c72:	3b e1       	ldi	r19, 0x1B	; 27
    2c74:	82 e0       	ldi	r24, 0x02	; 2
    2c76:	b9 01       	movw	r22, r18
    2c78:	0e 94 de 11 	call	0x23bc	; 0x23bc <EXTI_u8SetCallBack>

	GIE_voidEnableGlobal();
    2c7c:	0e 94 9c 12 	call	0x2538	; 0x2538 <GIE_voidEnableGlobal>


	WelcomeScreen();
    2c80:	0e 94 49 16 	call	0x2c92	; 0x2c92 <WelcomeScreen>

	LoginHandler();
    2c84:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LoginHandler>


	while(1)
	{
		FanControl();
    2c88:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <FanControl>
		LightsControl();
    2c8c:	0e 94 bd 1a 	call	0x357a	; 0x357a <LightsControl>
    2c90:	fb cf       	rjmp	.-10     	; 0x2c88 <main+0x30>

00002c92 <WelcomeScreen>:




void WelcomeScreen(void)
{
    2c92:	df 93       	push	r29
    2c94:	cf 93       	push	r28
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	2e 97       	sbiw	r28, 0x0e	; 14
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidGoToXY(2,0);
    2ca6:	82 e0       	ldi	r24, 0x02	; 2
    2ca8:	60 e0       	ldi	r22, 0x00	; 0
    2caa:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>
	CLCD_u8SendString("Welcome Home");
    2cae:	8b e7       	ldi	r24, 0x7B	; 123
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	af ea       	ldi	r26, 0xAF	; 175
    2cbc:	b4 e4       	ldi	r27, 0x44	; 68
    2cbe:	8b 87       	std	Y+11, r24	; 0x0b
    2cc0:	9c 87       	std	Y+12, r25	; 0x0c
    2cc2:	ad 87       	std	Y+13, r26	; 0x0d
    2cc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	4a e7       	ldi	r20, 0x7A	; 122
    2cd4:	55 e4       	ldi	r21, 0x45	; 69
    2cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	8f 83       	std	Y+7, r24	; 0x07
    2ce0:	98 87       	std	Y+8, r25	; 0x08
    2ce2:	a9 87       	std	Y+9, r26	; 0x09
    2ce4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce8:	78 85       	ldd	r23, Y+8	; 0x08
    2cea:	89 85       	ldd	r24, Y+9	; 0x09
    2cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e8       	ldi	r20, 0x80	; 128
    2cf4:	5f e3       	ldi	r21, 0x3F	; 63
    2cf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cfa:	88 23       	and	r24, r24
    2cfc:	2c f4       	brge	.+10     	; 0x2d08 <WelcomeScreen+0x76>
		__ticks = 1;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	9e 83       	std	Y+6, r25	; 0x06
    2d04:	8d 83       	std	Y+5, r24	; 0x05
    2d06:	3f c0       	rjmp	.+126    	; 0x2d86 <WelcomeScreen+0xf4>
	else if (__tmp > 65535)
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	3f ef       	ldi	r19, 0xFF	; 255
    2d14:	4f e7       	ldi	r20, 0x7F	; 127
    2d16:	57 e4       	ldi	r21, 0x47	; 71
    2d18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d1c:	18 16       	cp	r1, r24
    2d1e:	4c f5       	brge	.+82     	; 0x2d72 <WelcomeScreen+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	40 e2       	ldi	r20, 0x20	; 32
    2d2e:	51 e4       	ldi	r21, 0x41	; 65
    2d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	bc 01       	movw	r22, r24
    2d3a:	cd 01       	movw	r24, r26
    2d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9e 83       	std	Y+6, r25	; 0x06
    2d46:	8d 83       	std	Y+5, r24	; 0x05
    2d48:	0f c0       	rjmp	.+30     	; 0x2d68 <WelcomeScreen+0xd6>
    2d4a:	80 e9       	ldi	r24, 0x90	; 144
    2d4c:	91 e0       	ldi	r25, 0x01	; 1
    2d4e:	9c 83       	std	Y+4, r25	; 0x04
    2d50:	8b 83       	std	Y+3, r24	; 0x03
    2d52:	8b 81       	ldd	r24, Y+3	; 0x03
    2d54:	9c 81       	ldd	r25, Y+4	; 0x04
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	f1 f7       	brne	.-4      	; 0x2d56 <WelcomeScreen+0xc4>
    2d5a:	9c 83       	std	Y+4, r25	; 0x04
    2d5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d60:	9e 81       	ldd	r25, Y+6	; 0x06
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d68:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6c:	00 97       	sbiw	r24, 0x00	; 0
    2d6e:	69 f7       	brne	.-38     	; 0x2d4a <WelcomeScreen+0xb8>
    2d70:	14 c0       	rjmp	.+40     	; 0x2d9a <WelcomeScreen+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d72:	6f 81       	ldd	r22, Y+7	; 0x07
    2d74:	78 85       	ldd	r23, Y+8	; 0x08
    2d76:	89 85       	ldd	r24, Y+9	; 0x09
    2d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <WelcomeScreen+0x100>
    2d96:	9a 83       	std	Y+2, r25	; 0x02
    2d98:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1400);
	CLCD_voidSendCmd(1);
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <CLCD_voidSendCmd>

}
    2da0:	2e 96       	adiw	r28, 0x0e	; 14
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <LoginHandler>:




void LoginHandler(void)
{
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	cd b7       	in	r28, 0x3d	; 61
    2dbc:	de b7       	in	r29, 0x3e	; 62
    2dbe:	c0 55       	subi	r28, 0x50	; 80
    2dc0:	d0 40       	sbci	r29, 0x00	; 0
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61

	uint8 Local_u8UserArr[4];			/*to containg the user numbers and make it easy to compare it with password later on*/
	uint8 Local_u8PasswordArr[4];
	uint8 Local_u8Itterator = 0;
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e8 5b       	subi	r30, 0xB8	; 184
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	10 82       	st	Z, r1
	uint8 Local_u8PressedKey = 0xff;
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e9 5b       	subi	r30, 0xB9	; 185
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	8f ef       	ldi	r24, 0xFF	; 255
    2ddc:	80 83       	st	Z, r24

	/*user id screen*/
	CLCD_u8SendString("Enter ID: ");
    2dde:	88 e8       	ldi	r24, 0x88	; 136
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>


	CLCD_voidGoToXY(0,1);
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	61 e0       	ldi	r22, 0x01	; 1
    2dea:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>

	for (Local_u8Itterator = 0; Local_u8Itterator < 4; Local_u8Itterator++)
    2dee:	fe 01       	movw	r30, r28
    2df0:	e8 5b       	subi	r30, 0xB8	; 184
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	10 82       	st	Z, r1
    2df6:	37 c0       	rjmp	.+110    	; 0x2e66 <LoginHandler+0xb4>
	{
		while (Local_u8PressedKey == 0xff)
		{
			Local_u8PressedKey = KPD_u8GetPressedKey();
    2df8:	0e 94 ac 12 	call	0x2558	; 0x2558 <KPD_u8GetPressedKey>
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e9 5b       	subi	r30, 0xB9	; 185
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 83       	st	Z, r24

	CLCD_voidGoToXY(0,1);

	for (Local_u8Itterator = 0; Local_u8Itterator < 4; Local_u8Itterator++)
	{
		while (Local_u8PressedKey == 0xff)
    2e04:	fe 01       	movw	r30, r28
    2e06:	e9 5b       	subi	r30, 0xB9	; 185
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 81       	ld	r24, Z
    2e0c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e0e:	a1 f3       	breq	.-24     	; 0x2df8 <LoginHandler+0x46>
		{
			Local_u8PressedKey = KPD_u8GetPressedKey();
		}

		Local_u8UserArr[Local_u8Itterator] = Local_u8PressedKey;
    2e10:	fe 01       	movw	r30, r28
    2e12:	e8 5b       	subi	r30, 0xB8	; 184
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	80 81       	ld	r24, Z
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	87 5b       	subi	r24, 0xB7	; 183
    2e20:	9f 4f       	sbci	r25, 0xFF	; 255
    2e22:	dc 01       	movw	r26, r24
    2e24:	a2 0f       	add	r26, r18
    2e26:	b3 1f       	adc	r27, r19
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e9 5b       	subi	r30, 0xB9	; 185
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	80 81       	ld	r24, Z
    2e30:	8c 93       	st	X, r24

		CLCD_voidSendNumber(Local_u8PressedKey);
    2e32:	fe 01       	movw	r30, r28
    2e34:	e9 5b       	subi	r30, 0xB9	; 185
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 81       	ld	r24, Z
    2e3a:	88 2f       	mov	r24, r24
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	a0 e0       	ldi	r26, 0x00	; 0
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	bc 01       	movw	r22, r24
    2e44:	cd 01       	movw	r24, r26
    2e46:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <CLCD_voidSendNumber>

		Local_u8PressedKey = 0xff;
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	e9 5b       	subi	r30, 0xB9	; 185
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	8f ef       	ldi	r24, 0xFF	; 255
    2e52:	80 83       	st	Z, r24
	CLCD_u8SendString("Enter ID: ");


	CLCD_voidGoToXY(0,1);

	for (Local_u8Itterator = 0; Local_u8Itterator < 4; Local_u8Itterator++)
    2e54:	de 01       	movw	r26, r28
    2e56:	a8 5b       	subi	r26, 0xB8	; 184
    2e58:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e8 5b       	subi	r30, 0xB8	; 184
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	80 81       	ld	r24, Z
    2e62:	8f 5f       	subi	r24, 0xFF	; 255
    2e64:	8c 93       	st	X, r24
    2e66:	fe 01       	movw	r30, r28
    2e68:	e8 5b       	subi	r30, 0xB8	; 184
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	80 81       	ld	r24, Z
    2e6e:	84 30       	cpi	r24, 0x04	; 4
    2e70:	48 f2       	brcs	.-110    	; 0x2e04 <LoginHandler+0x52>
		CLCD_voidSendNumber(Local_u8PressedKey);

		Local_u8PressedKey = 0xff;
	}

	CLCD_voidSendCmd(1);
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	0e 94 ce 07 	call	0xf9c	; 0xf9c <CLCD_voidSendCmd>

	/*Turnning on the SSD and sending the initial number of trials which is three*/
	SSD_u8SSD_OFF(ptrToSSD);
    2e78:	80 91 2a 01 	lds	r24, 0x012A
    2e7c:	90 91 2b 01 	lds	r25, 0x012B
    2e80:	0e 94 ba 13 	call	0x2774	; 0x2774 <SSD_u8SSD_OFF>
	SSD_u8SetNumber(ptrToSSD, Local_u8AttemptsLeft);
    2e84:	80 91 2a 01 	lds	r24, 0x012A
    2e88:	90 91 2b 01 	lds	r25, 0x012B
    2e8c:	20 91 2c 01 	lds	r18, 0x012C
    2e90:	62 2f       	mov	r22, r18
    2e92:	0e 94 01 14 	call	0x2802	; 0x2802 <SSD_u8SetNumber>

	/*Password screen*/
	CLCD_u8SendString("Enter Password: ");
    2e96:	83 e9       	ldi	r24, 0x93	; 147
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>

	CLCD_voidGoToXY(0,1);
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	61 e0       	ldi	r22, 0x01	; 1
    2ea2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>

	for (Local_u8Itterator = 0; Local_u8Itterator < 4; Local_u8Itterator++)
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e8 5b       	subi	r30, 0xB8	; 184
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	10 82       	st	Z, r1
    2eae:	c6 c0       	rjmp	.+396    	; 0x303c <LoginHandler+0x28a>
		{
			while (Local_u8PressedKey == 0xff)
			{
				Local_u8PressedKey = KPD_u8GetPressedKey();
    2eb0:	0e 94 ac 12 	call	0x2558	; 0x2558 <KPD_u8GetPressedKey>
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e9 5b       	subi	r30, 0xB9	; 185
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	80 83       	st	Z, r24

	CLCD_voidGoToXY(0,1);

	for (Local_u8Itterator = 0; Local_u8Itterator < 4; Local_u8Itterator++)
		{
			while (Local_u8PressedKey == 0xff)
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e9 5b       	subi	r30, 0xB9	; 185
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ec6:	a1 f3       	breq	.-24     	; 0x2eb0 <LoginHandler+0xfe>
			{
				Local_u8PressedKey = KPD_u8GetPressedKey();
			}

			Local_u8PasswordArr[Local_u8Itterator] = Local_u8PressedKey;
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e8 5b       	subi	r30, 0xB8	; 184
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	80 81       	ld	r24, Z
    2ed0:	28 2f       	mov	r18, r24
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	ce 01       	movw	r24, r28
    2ed6:	83 5b       	subi	r24, 0xB3	; 179
    2ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eda:	dc 01       	movw	r26, r24
    2edc:	a2 0f       	add	r26, r18
    2ede:	b3 1f       	adc	r27, r19
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e9 5b       	subi	r30, 0xB9	; 185
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 81       	ld	r24, Z
    2ee8:	8c 93       	st	X, r24

			CLCD_voidSendNumber(Local_u8PressedKey);
    2eea:	fe 01       	movw	r30, r28
    2eec:	e9 5b       	subi	r30, 0xB9	; 185
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	80 81       	ld	r24, Z
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	a0 e0       	ldi	r26, 0x00	; 0
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	bc 01       	movw	r22, r24
    2efc:	cd 01       	movw	r24, r26
    2efe:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <CLCD_voidSendNumber>
    2f02:	fe 01       	movw	r30, r28
    2f04:	ed 5b       	subi	r30, 0xBD	; 189
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	a8 ec       	ldi	r26, 0xC8	; 200
    2f0e:	b2 e4       	ldi	r27, 0x42	; 66
    2f10:	80 83       	st	Z, r24
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	a2 83       	std	Z+2, r26	; 0x02
    2f16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f18:	8e 01       	movw	r16, r28
    2f1a:	01 5c       	subi	r16, 0xC1	; 193
    2f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ed 5b       	subi	r30, 0xBD	; 189
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	60 81       	ld	r22, Z
    2f26:	71 81       	ldd	r23, Z+1	; 0x01
    2f28:	82 81       	ldd	r24, Z+2	; 0x02
    2f2a:	93 81       	ldd	r25, Z+3	; 0x03
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	4a e7       	ldi	r20, 0x7A	; 122
    2f32:	55 e4       	ldi	r21, 0x45	; 69
    2f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	f8 01       	movw	r30, r16
    2f3e:	80 83       	st	Z, r24
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	a2 83       	std	Z+2, r26	; 0x02
    2f44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f46:	fe 01       	movw	r30, r28
    2f48:	ff 96       	adiw	r30, 0x3f	; 63
    2f4a:	60 81       	ld	r22, Z
    2f4c:	71 81       	ldd	r23, Z+1	; 0x01
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	93 81       	ldd	r25, Z+3	; 0x03
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e8       	ldi	r20, 0x80	; 128
    2f58:	5f e3       	ldi	r21, 0x3F	; 63
    2f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f5e:	88 23       	and	r24, r24
    2f60:	2c f4       	brge	.+10     	; 0x2f6c <LoginHandler+0x1ba>
		__ticks = 1;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	9e af       	std	Y+62, r25	; 0x3e
    2f68:	8d af       	std	Y+61, r24	; 0x3d
    2f6a:	46 c0       	rjmp	.+140    	; 0x2ff8 <LoginHandler+0x246>
	else if (__tmp > 65535)
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	ff 96       	adiw	r30, 0x3f	; 63
    2f70:	60 81       	ld	r22, Z
    2f72:	71 81       	ldd	r23, Z+1	; 0x01
    2f74:	82 81       	ldd	r24, Z+2	; 0x02
    2f76:	93 81       	ldd	r25, Z+3	; 0x03
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	3f ef       	ldi	r19, 0xFF	; 255
    2f7c:	4f e7       	ldi	r20, 0x7F	; 127
    2f7e:	57 e4       	ldi	r21, 0x47	; 71
    2f80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f84:	18 16       	cp	r1, r24
    2f86:	64 f5       	brge	.+88     	; 0x2fe0 <LoginHandler+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f88:	fe 01       	movw	r30, r28
    2f8a:	ed 5b       	subi	r30, 0xBD	; 189
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	60 81       	ld	r22, Z
    2f90:	71 81       	ldd	r23, Z+1	; 0x01
    2f92:	82 81       	ldd	r24, Z+2	; 0x02
    2f94:	93 81       	ldd	r25, Z+3	; 0x03
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e2       	ldi	r20, 0x20	; 32
    2f9c:	51 e4       	ldi	r21, 0x41	; 65
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	9e af       	std	Y+62, r25	; 0x3e
    2fb4:	8d af       	std	Y+61, r24	; 0x3d
    2fb6:	0f c0       	rjmp	.+30     	; 0x2fd6 <LoginHandler+0x224>
    2fb8:	80 e9       	ldi	r24, 0x90	; 144
    2fba:	91 e0       	ldi	r25, 0x01	; 1
    2fbc:	9c af       	std	Y+60, r25	; 0x3c
    2fbe:	8b af       	std	Y+59, r24	; 0x3b
    2fc0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fc2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <LoginHandler+0x212>
    2fc8:	9c af       	std	Y+60, r25	; 0x3c
    2fca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fcc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fce:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	9e af       	std	Y+62, r25	; 0x3e
    2fd4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	69 f7       	brne	.-38     	; 0x2fb8 <LoginHandler+0x206>
    2fde:	16 c0       	rjmp	.+44     	; 0x300c <LoginHandler+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	ff 96       	adiw	r30, 0x3f	; 63
    2fe4:	60 81       	ld	r22, Z
    2fe6:	71 81       	ldd	r23, Z+1	; 0x01
    2fe8:	82 81       	ldd	r24, Z+2	; 0x02
    2fea:	93 81       	ldd	r25, Z+3	; 0x03
    2fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	9e af       	std	Y+62, r25	; 0x3e
    2ff6:	8d af       	std	Y+61, r24	; 0x3d
    2ff8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ffa:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ffc:	9a af       	std	Y+58, r25	; 0x3a
    2ffe:	89 af       	std	Y+57, r24	; 0x39
    3000:	89 ad       	ldd	r24, Y+57	; 0x39
    3002:	9a ad       	ldd	r25, Y+58	; 0x3a
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	f1 f7       	brne	.-4      	; 0x3004 <LoginHandler+0x252>
    3008:	9a af       	std	Y+58, r25	; 0x3a
    300a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(100);
			CLCD_voidGoToXY(Local_u8Itterator, 1);
    300c:	fe 01       	movw	r30, r28
    300e:	e8 5b       	subi	r30, 0xB8	; 184
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	80 81       	ld	r24, Z
    3014:	61 e0       	ldi	r22, 0x01	; 1
    3016:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>
			CLCD_voidSendData('*');
    301a:	8a e2       	ldi	r24, 0x2A	; 42
    301c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>

			Local_u8PressedKey = 0xff;
    3020:	fe 01       	movw	r30, r28
    3022:	e9 5b       	subi	r30, 0xB9	; 185
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	8f ef       	ldi	r24, 0xFF	; 255
    3028:	80 83       	st	Z, r24
	/*Password screen*/
	CLCD_u8SendString("Enter Password: ");

	CLCD_voidGoToXY(0,1);

	for (Local_u8Itterator = 0; Local_u8Itterator < 4; Local_u8Itterator++)
    302a:	de 01       	movw	r26, r28
    302c:	a8 5b       	subi	r26, 0xB8	; 184
    302e:	bf 4f       	sbci	r27, 0xFF	; 255
    3030:	fe 01       	movw	r30, r28
    3032:	e8 5b       	subi	r30, 0xB8	; 184
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	80 81       	ld	r24, Z
    3038:	8f 5f       	subi	r24, 0xFF	; 255
    303a:	8c 93       	st	X, r24
    303c:	fe 01       	movw	r30, r28
    303e:	e8 5b       	subi	r30, 0xB8	; 184
    3040:	ff 4f       	sbci	r31, 0xFF	; 255
    3042:	80 81       	ld	r24, Z
    3044:	84 30       	cpi	r24, 0x04	; 4
    3046:	08 f4       	brcc	.+2      	; 0x304a <LoginHandler+0x298>
    3048:	39 cf       	rjmp	.-398    	; 0x2ebc <LoginHandler+0x10a>

			Local_u8PressedKey = 0xff;
		}


		if( (Local_u8PasswordArr[0] == Local_u8UserArr[3]) && (Local_u8PasswordArr[1] == Local_u8UserArr[2]) && (Local_u8PasswordArr[2] == Local_u8UserArr[1]) && (Local_u8PasswordArr[3] == Local_u8UserArr[0]))
    304a:	fe 01       	movw	r30, r28
    304c:	e3 5b       	subi	r30, 0xB3	; 179
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	90 81       	ld	r25, Z
    3052:	fe 01       	movw	r30, r28
    3054:	e7 5b       	subi	r30, 0xB7	; 183
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	83 81       	ldd	r24, Z+3	; 0x03
    305a:	98 17       	cp	r25, r24
    305c:	21 f5       	brne	.+72     	; 0x30a6 <LoginHandler+0x2f4>
    305e:	fe 01       	movw	r30, r28
    3060:	e3 5b       	subi	r30, 0xB3	; 179
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	91 81       	ldd	r25, Z+1	; 0x01
    3066:	fe 01       	movw	r30, r28
    3068:	e7 5b       	subi	r30, 0xB7	; 183
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	82 81       	ldd	r24, Z+2	; 0x02
    306e:	98 17       	cp	r25, r24
    3070:	d1 f4       	brne	.+52     	; 0x30a6 <LoginHandler+0x2f4>
    3072:	fe 01       	movw	r30, r28
    3074:	e3 5b       	subi	r30, 0xB3	; 179
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	92 81       	ldd	r25, Z+2	; 0x02
    307a:	fe 01       	movw	r30, r28
    307c:	e7 5b       	subi	r30, 0xB7	; 183
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	81 81       	ldd	r24, Z+1	; 0x01
    3082:	98 17       	cp	r25, r24
    3084:	81 f4       	brne	.+32     	; 0x30a6 <LoginHandler+0x2f4>
    3086:	fe 01       	movw	r30, r28
    3088:	e3 5b       	subi	r30, 0xB3	; 179
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	93 81       	ldd	r25, Z+3	; 0x03
    308e:	fe 01       	movw	r30, r28
    3090:	e7 5b       	subi	r30, 0xB7	; 183
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	80 81       	ld	r24, Z
    3096:	98 17       	cp	r25, r24
    3098:	31 f4       	brne	.+12     	; 0x30a6 <LoginHandler+0x2f4>
		{
			CLCD_voidSendCmd(1);
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <CLCD_voidSendCmd>
			Dashboard();
    30a0:	0e 94 35 1b 	call	0x366a	; 0x366a <Dashboard>
    30a4:	1d c2       	rjmp	.+1082   	; 0x34e0 <LoginHandler+0x72e>
		}

		else
		{
			CLCD_voidSendCmd(1);
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <CLCD_voidSendCmd>

			CLCD_u8SendString("Wrong ID/Pass");
    30ac:	84 ea       	ldi	r24, 0xA4	; 164
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>
			CLCD_voidGoToXY(0,1);
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	61 e0       	ldi	r22, 0x01	; 1
    30b8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>
			CLCD_u8SendString("Try again!");
    30bc:	82 eb       	ldi	r24, 0xB2	; 178
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>

			DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN0,DIO_u8PIN_HIGH);
    30c4:	83 e0       	ldi	r24, 0x03	; 3
    30c6:	60 e0       	ldi	r22, 0x00	; 0
    30c8:	41 e0       	ldi	r20, 0x01	; 1
    30ca:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	a8 e4       	ldi	r26, 0x48	; 72
    30d4:	b3 e4       	ldi	r27, 0x43	; 67
    30d6:	8d ab       	std	Y+53, r24	; 0x35
    30d8:	9e ab       	std	Y+54, r25	; 0x36
    30da:	af ab       	std	Y+55, r26	; 0x37
    30dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30de:	6d a9       	ldd	r22, Y+53	; 0x35
    30e0:	7e a9       	ldd	r23, Y+54	; 0x36
    30e2:	8f a9       	ldd	r24, Y+55	; 0x37
    30e4:	98 ad       	ldd	r25, Y+56	; 0x38
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	4a e7       	ldi	r20, 0x7A	; 122
    30ec:	55 e4       	ldi	r21, 0x45	; 69
    30ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	89 ab       	std	Y+49, r24	; 0x31
    30f8:	9a ab       	std	Y+50, r25	; 0x32
    30fa:	ab ab       	std	Y+51, r26	; 0x33
    30fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3100:	7a a9       	ldd	r23, Y+50	; 0x32
    3102:	8b a9       	ldd	r24, Y+51	; 0x33
    3104:	9c a9       	ldd	r25, Y+52	; 0x34
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e8       	ldi	r20, 0x80	; 128
    310c:	5f e3       	ldi	r21, 0x3F	; 63
    310e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3112:	88 23       	and	r24, r24
    3114:	2c f4       	brge	.+10     	; 0x3120 <LoginHandler+0x36e>
		__ticks = 1;
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	98 ab       	std	Y+48, r25	; 0x30
    311c:	8f a7       	std	Y+47, r24	; 0x2f
    311e:	3f c0       	rjmp	.+126    	; 0x319e <LoginHandler+0x3ec>
	else if (__tmp > 65535)
    3120:	69 a9       	ldd	r22, Y+49	; 0x31
    3122:	7a a9       	ldd	r23, Y+50	; 0x32
    3124:	8b a9       	ldd	r24, Y+51	; 0x33
    3126:	9c a9       	ldd	r25, Y+52	; 0x34
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	3f ef       	ldi	r19, 0xFF	; 255
    312c:	4f e7       	ldi	r20, 0x7F	; 127
    312e:	57 e4       	ldi	r21, 0x47	; 71
    3130:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3134:	18 16       	cp	r1, r24
    3136:	4c f5       	brge	.+82     	; 0x318a <LoginHandler+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3138:	6d a9       	ldd	r22, Y+53	; 0x35
    313a:	7e a9       	ldd	r23, Y+54	; 0x36
    313c:	8f a9       	ldd	r24, Y+55	; 0x37
    313e:	98 ad       	ldd	r25, Y+56	; 0x38
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	40 e2       	ldi	r20, 0x20	; 32
    3146:	51 e4       	ldi	r21, 0x41	; 65
    3148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	bc 01       	movw	r22, r24
    3152:	cd 01       	movw	r24, r26
    3154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	98 ab       	std	Y+48, r25	; 0x30
    315e:	8f a7       	std	Y+47, r24	; 0x2f
    3160:	0f c0       	rjmp	.+30     	; 0x3180 <LoginHandler+0x3ce>
    3162:	80 e9       	ldi	r24, 0x90	; 144
    3164:	91 e0       	ldi	r25, 0x01	; 1
    3166:	9e a7       	std	Y+46, r25	; 0x2e
    3168:	8d a7       	std	Y+45, r24	; 0x2d
    316a:	8d a5       	ldd	r24, Y+45	; 0x2d
    316c:	9e a5       	ldd	r25, Y+46	; 0x2e
    316e:	01 97       	sbiw	r24, 0x01	; 1
    3170:	f1 f7       	brne	.-4      	; 0x316e <LoginHandler+0x3bc>
    3172:	9e a7       	std	Y+46, r25	; 0x2e
    3174:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3176:	8f a5       	ldd	r24, Y+47	; 0x2f
    3178:	98 a9       	ldd	r25, Y+48	; 0x30
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	98 ab       	std	Y+48, r25	; 0x30
    317e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3180:	8f a5       	ldd	r24, Y+47	; 0x2f
    3182:	98 a9       	ldd	r25, Y+48	; 0x30
    3184:	00 97       	sbiw	r24, 0x00	; 0
    3186:	69 f7       	brne	.-38     	; 0x3162 <LoginHandler+0x3b0>
    3188:	14 c0       	rjmp	.+40     	; 0x31b2 <LoginHandler+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318a:	69 a9       	ldd	r22, Y+49	; 0x31
    318c:	7a a9       	ldd	r23, Y+50	; 0x32
    318e:	8b a9       	ldd	r24, Y+51	; 0x33
    3190:	9c a9       	ldd	r25, Y+52	; 0x34
    3192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	98 ab       	std	Y+48, r25	; 0x30
    319c:	8f a7       	std	Y+47, r24	; 0x2f
    319e:	8f a5       	ldd	r24, Y+47	; 0x2f
    31a0:	98 a9       	ldd	r25, Y+48	; 0x30
    31a2:	9c a7       	std	Y+44, r25	; 0x2c
    31a4:	8b a7       	std	Y+43, r24	; 0x2b
    31a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    31a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	f1 f7       	brne	.-4      	; 0x31aa <LoginHandler+0x3f8>
    31ae:	9c a7       	std	Y+44, r25	; 0x2c
    31b0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(200);
			DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN0,DIO_u8PIN_LOW);
    31b2:	83 e0       	ldi	r24, 0x03	; 3
    31b4:	60 e0       	ldi	r22, 0x00	; 0
    31b6:	40 e0       	ldi	r20, 0x00	; 0
    31b8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>

			Local_u8AttemptsLeft--;
    31bc:	80 91 2c 01 	lds	r24, 0x012C
    31c0:	81 50       	subi	r24, 0x01	; 1
    31c2:	80 93 2c 01 	sts	0x012C, r24

			SSD_u8SetNumber(ptrToSSD, Local_u8AttemptsLeft);
    31c6:	80 91 2a 01 	lds	r24, 0x012A
    31ca:	90 91 2b 01 	lds	r25, 0x012B
    31ce:	20 91 2c 01 	lds	r18, 0x012C
    31d2:	62 2f       	mov	r22, r18
    31d4:	0e 94 01 14 	call	0x2802	; 0x2802 <SSD_u8SetNumber>

			if(Local_u8AttemptsLeft == 0)
    31d8:	80 91 2c 01 	lds	r24, 0x012C
    31dc:	88 23       	and	r24, r24
    31de:	09 f0       	breq	.+2      	; 0x31e2 <LoginHandler+0x430>
    31e0:	7a c1       	rjmp	.+756    	; 0x34d6 <LoginHandler+0x724>
			{
				CLCD_voidSendCmd(1);
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	0e 94 ce 07 	call	0xf9c	; 0xf9c <CLCD_voidSendCmd>
				CLCD_voidGoToXY(1,0);
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>
				CLCD_u8SendString("Unaouthorized");
    31f0:	8d eb       	ldi	r24, 0xBD	; 189
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>
				CLCD_voidGoToXY(6,1);
    31f8:	86 e0       	ldi	r24, 0x06	; 6
    31fa:	61 e0       	ldi	r22, 0x01	; 1
    31fc:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>
				CLCD_u8SendString("Login");
    3200:	8b ec       	ldi	r24, 0xCB	; 203
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	af ea       	ldi	r26, 0xAF	; 175
    320e:	b4 e4       	ldi	r27, 0x44	; 68
    3210:	8f a3       	std	Y+39, r24	; 0x27
    3212:	98 a7       	std	Y+40, r25	; 0x28
    3214:	a9 a7       	std	Y+41, r26	; 0x29
    3216:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3218:	6f a1       	ldd	r22, Y+39	; 0x27
    321a:	78 a5       	ldd	r23, Y+40	; 0x28
    321c:	89 a5       	ldd	r24, Y+41	; 0x29
    321e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	4a e7       	ldi	r20, 0x7A	; 122
    3226:	55 e4       	ldi	r21, 0x45	; 69
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	8b a3       	std	Y+35, r24	; 0x23
    3232:	9c a3       	std	Y+36, r25	; 0x24
    3234:	ad a3       	std	Y+37, r26	; 0x25
    3236:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3238:	6b a1       	ldd	r22, Y+35	; 0x23
    323a:	7c a1       	ldd	r23, Y+36	; 0x24
    323c:	8d a1       	ldd	r24, Y+37	; 0x25
    323e:	9e a1       	ldd	r25, Y+38	; 0x26
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e8       	ldi	r20, 0x80	; 128
    3246:	5f e3       	ldi	r21, 0x3F	; 63
    3248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    324c:	88 23       	and	r24, r24
    324e:	2c f4       	brge	.+10     	; 0x325a <LoginHandler+0x4a8>
		__ticks = 1;
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9a a3       	std	Y+34, r25	; 0x22
    3256:	89 a3       	std	Y+33, r24	; 0x21
    3258:	3f c0       	rjmp	.+126    	; 0x32d8 <LoginHandler+0x526>
	else if (__tmp > 65535)
    325a:	6b a1       	ldd	r22, Y+35	; 0x23
    325c:	7c a1       	ldd	r23, Y+36	; 0x24
    325e:	8d a1       	ldd	r24, Y+37	; 0x25
    3260:	9e a1       	ldd	r25, Y+38	; 0x26
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	3f ef       	ldi	r19, 0xFF	; 255
    3266:	4f e7       	ldi	r20, 0x7F	; 127
    3268:	57 e4       	ldi	r21, 0x47	; 71
    326a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    326e:	18 16       	cp	r1, r24
    3270:	4c f5       	brge	.+82     	; 0x32c4 <LoginHandler+0x512>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3272:	6f a1       	ldd	r22, Y+39	; 0x27
    3274:	78 a5       	ldd	r23, Y+40	; 0x28
    3276:	89 a5       	ldd	r24, Y+41	; 0x29
    3278:	9a a5       	ldd	r25, Y+42	; 0x2a
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e2       	ldi	r20, 0x20	; 32
    3280:	51 e4       	ldi	r21, 0x41	; 65
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	bc 01       	movw	r22, r24
    328c:	cd 01       	movw	r24, r26
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9a a3       	std	Y+34, r25	; 0x22
    3298:	89 a3       	std	Y+33, r24	; 0x21
    329a:	0f c0       	rjmp	.+30     	; 0x32ba <LoginHandler+0x508>
    329c:	80 e9       	ldi	r24, 0x90	; 144
    329e:	91 e0       	ldi	r25, 0x01	; 1
    32a0:	98 a3       	std	Y+32, r25	; 0x20
    32a2:	8f 8f       	std	Y+31, r24	; 0x1f
    32a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32a6:	98 a1       	ldd	r25, Y+32	; 0x20
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <LoginHandler+0x4f6>
    32ac:	98 a3       	std	Y+32, r25	; 0x20
    32ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b0:	89 a1       	ldd	r24, Y+33	; 0x21
    32b2:	9a a1       	ldd	r25, Y+34	; 0x22
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	9a a3       	std	Y+34, r25	; 0x22
    32b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ba:	89 a1       	ldd	r24, Y+33	; 0x21
    32bc:	9a a1       	ldd	r25, Y+34	; 0x22
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	69 f7       	brne	.-38     	; 0x329c <LoginHandler+0x4ea>
    32c2:	14 c0       	rjmp	.+40     	; 0x32ec <LoginHandler+0x53a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c4:	6b a1       	ldd	r22, Y+35	; 0x23
    32c6:	7c a1       	ldd	r23, Y+36	; 0x24
    32c8:	8d a1       	ldd	r24, Y+37	; 0x25
    32ca:	9e a1       	ldd	r25, Y+38	; 0x26
    32cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	9a a3       	std	Y+34, r25	; 0x22
    32d6:	89 a3       	std	Y+33, r24	; 0x21
    32d8:	89 a1       	ldd	r24, Y+33	; 0x21
    32da:	9a a1       	ldd	r25, Y+34	; 0x22
    32dc:	9e 8f       	std	Y+30, r25	; 0x1e
    32de:	8d 8f       	std	Y+29, r24	; 0x1d
    32e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <LoginHandler+0x532>
    32e8:	9e 8f       	std	Y+30, r25	; 0x1e
    32ea:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1400);

				CLCD_voidSendCmd(1);
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	0e 94 ce 07 	call	0xf9c	; 0xf9c <CLCD_voidSendCmd>
				CLCD_u8SendString("Shutting Down");
    32f2:	81 ed       	ldi	r24, 0xD1	; 209
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>
				CLCD_voidSendData('.');
    32fa:	8e e2       	ldi	r24, 0x2E	; 46
    32fc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	a1 ee       	ldi	r26, 0xE1	; 225
    3306:	b3 e4       	ldi	r27, 0x43	; 67
    3308:	89 8f       	std	Y+25, r24	; 0x19
    330a:	9a 8f       	std	Y+26, r25	; 0x1a
    330c:	ab 8f       	std	Y+27, r26	; 0x1b
    330e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3310:	69 8d       	ldd	r22, Y+25	; 0x19
    3312:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3314:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3316:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	4a e7       	ldi	r20, 0x7A	; 122
    331e:	55 e4       	ldi	r21, 0x45	; 69
    3320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	8d 8b       	std	Y+21, r24	; 0x15
    332a:	9e 8b       	std	Y+22, r25	; 0x16
    332c:	af 8b       	std	Y+23, r26	; 0x17
    332e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3330:	6d 89       	ldd	r22, Y+21	; 0x15
    3332:	7e 89       	ldd	r23, Y+22	; 0x16
    3334:	8f 89       	ldd	r24, Y+23	; 0x17
    3336:	98 8d       	ldd	r25, Y+24	; 0x18
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	40 e8       	ldi	r20, 0x80	; 128
    333e:	5f e3       	ldi	r21, 0x3F	; 63
    3340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3344:	88 23       	and	r24, r24
    3346:	2c f4       	brge	.+10     	; 0x3352 <LoginHandler+0x5a0>
		__ticks = 1;
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	9c 8b       	std	Y+20, r25	; 0x14
    334e:	8b 8b       	std	Y+19, r24	; 0x13
    3350:	3f c0       	rjmp	.+126    	; 0x33d0 <LoginHandler+0x61e>
	else if (__tmp > 65535)
    3352:	6d 89       	ldd	r22, Y+21	; 0x15
    3354:	7e 89       	ldd	r23, Y+22	; 0x16
    3356:	8f 89       	ldd	r24, Y+23	; 0x17
    3358:	98 8d       	ldd	r25, Y+24	; 0x18
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	3f ef       	ldi	r19, 0xFF	; 255
    335e:	4f e7       	ldi	r20, 0x7F	; 127
    3360:	57 e4       	ldi	r21, 0x47	; 71
    3362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3366:	18 16       	cp	r1, r24
    3368:	4c f5       	brge	.+82     	; 0x33bc <LoginHandler+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336a:	69 8d       	ldd	r22, Y+25	; 0x19
    336c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    336e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3370:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	40 e2       	ldi	r20, 0x20	; 32
    3378:	51 e4       	ldi	r21, 0x41	; 65
    337a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	bc 01       	movw	r22, r24
    3384:	cd 01       	movw	r24, r26
    3386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	9c 8b       	std	Y+20, r25	; 0x14
    3390:	8b 8b       	std	Y+19, r24	; 0x13
    3392:	0f c0       	rjmp	.+30     	; 0x33b2 <LoginHandler+0x600>
    3394:	80 e9       	ldi	r24, 0x90	; 144
    3396:	91 e0       	ldi	r25, 0x01	; 1
    3398:	9a 8b       	std	Y+18, r25	; 0x12
    339a:	89 8b       	std	Y+17, r24	; 0x11
    339c:	89 89       	ldd	r24, Y+17	; 0x11
    339e:	9a 89       	ldd	r25, Y+18	; 0x12
    33a0:	01 97       	sbiw	r24, 0x01	; 1
    33a2:	f1 f7       	brne	.-4      	; 0x33a0 <LoginHandler+0x5ee>
    33a4:	9a 8b       	std	Y+18, r25	; 0x12
    33a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33a8:	8b 89       	ldd	r24, Y+19	; 0x13
    33aa:	9c 89       	ldd	r25, Y+20	; 0x14
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	9c 8b       	std	Y+20, r25	; 0x14
    33b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b2:	8b 89       	ldd	r24, Y+19	; 0x13
    33b4:	9c 89       	ldd	r25, Y+20	; 0x14
    33b6:	00 97       	sbiw	r24, 0x00	; 0
    33b8:	69 f7       	brne	.-38     	; 0x3394 <LoginHandler+0x5e2>
    33ba:	14 c0       	rjmp	.+40     	; 0x33e4 <LoginHandler+0x632>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33bc:	6d 89       	ldd	r22, Y+21	; 0x15
    33be:	7e 89       	ldd	r23, Y+22	; 0x16
    33c0:	8f 89       	ldd	r24, Y+23	; 0x17
    33c2:	98 8d       	ldd	r25, Y+24	; 0x18
    33c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	9c 8b       	std	Y+20, r25	; 0x14
    33ce:	8b 8b       	std	Y+19, r24	; 0x13
    33d0:	8b 89       	ldd	r24, Y+19	; 0x13
    33d2:	9c 89       	ldd	r25, Y+20	; 0x14
    33d4:	98 8b       	std	Y+16, r25	; 0x10
    33d6:	8f 87       	std	Y+15, r24	; 0x0f
    33d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33da:	98 89       	ldd	r25, Y+16	; 0x10
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	f1 f7       	brne	.-4      	; 0x33dc <LoginHandler+0x62a>
    33e0:	98 8b       	std	Y+16, r25	; 0x10
    33e2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(450);
				CLCD_voidSendData('.');
    33e4:	8e e2       	ldi	r24, 0x2E	; 46
    33e6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	a1 ee       	ldi	r26, 0xE1	; 225
    33f0:	b3 e4       	ldi	r27, 0x43	; 67
    33f2:	8b 87       	std	Y+11, r24	; 0x0b
    33f4:	9c 87       	std	Y+12, r25	; 0x0c
    33f6:	ad 87       	std	Y+13, r26	; 0x0d
    33f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    33fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3400:	9e 85       	ldd	r25, Y+14	; 0x0e
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	4a e7       	ldi	r20, 0x7A	; 122
    3408:	55 e4       	ldi	r21, 0x45	; 69
    340a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	8f 83       	std	Y+7, r24	; 0x07
    3414:	98 87       	std	Y+8, r25	; 0x08
    3416:	a9 87       	std	Y+9, r26	; 0x09
    3418:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    341a:	6f 81       	ldd	r22, Y+7	; 0x07
    341c:	78 85       	ldd	r23, Y+8	; 0x08
    341e:	89 85       	ldd	r24, Y+9	; 0x09
    3420:	9a 85       	ldd	r25, Y+10	; 0x0a
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	40 e8       	ldi	r20, 0x80	; 128
    3428:	5f e3       	ldi	r21, 0x3F	; 63
    342a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    342e:	88 23       	and	r24, r24
    3430:	2c f4       	brge	.+10     	; 0x343c <LoginHandler+0x68a>
		__ticks = 1;
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	9e 83       	std	Y+6, r25	; 0x06
    3438:	8d 83       	std	Y+5, r24	; 0x05
    343a:	3f c0       	rjmp	.+126    	; 0x34ba <LoginHandler+0x708>
	else if (__tmp > 65535)
    343c:	6f 81       	ldd	r22, Y+7	; 0x07
    343e:	78 85       	ldd	r23, Y+8	; 0x08
    3440:	89 85       	ldd	r24, Y+9	; 0x09
    3442:	9a 85       	ldd	r25, Y+10	; 0x0a
    3444:	20 e0       	ldi	r18, 0x00	; 0
    3446:	3f ef       	ldi	r19, 0xFF	; 255
    3448:	4f e7       	ldi	r20, 0x7F	; 127
    344a:	57 e4       	ldi	r21, 0x47	; 71
    344c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3450:	18 16       	cp	r1, r24
    3452:	4c f5       	brge	.+82     	; 0x34a6 <LoginHandler+0x6f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3454:	6b 85       	ldd	r22, Y+11	; 0x0b
    3456:	7c 85       	ldd	r23, Y+12	; 0x0c
    3458:	8d 85       	ldd	r24, Y+13	; 0x0d
    345a:	9e 85       	ldd	r25, Y+14	; 0x0e
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	40 e2       	ldi	r20, 0x20	; 32
    3462:	51 e4       	ldi	r21, 0x41	; 65
    3464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	bc 01       	movw	r22, r24
    346e:	cd 01       	movw	r24, r26
    3470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	9e 83       	std	Y+6, r25	; 0x06
    347a:	8d 83       	std	Y+5, r24	; 0x05
    347c:	0f c0       	rjmp	.+30     	; 0x349c <LoginHandler+0x6ea>
    347e:	80 e9       	ldi	r24, 0x90	; 144
    3480:	91 e0       	ldi	r25, 0x01	; 1
    3482:	9c 83       	std	Y+4, r25	; 0x04
    3484:	8b 83       	std	Y+3, r24	; 0x03
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	9c 81       	ldd	r25, Y+4	; 0x04
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	f1 f7       	brne	.-4      	; 0x348a <LoginHandler+0x6d8>
    348e:	9c 83       	std	Y+4, r25	; 0x04
    3490:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3492:	8d 81       	ldd	r24, Y+5	; 0x05
    3494:	9e 81       	ldd	r25, Y+6	; 0x06
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	9e 83       	std	Y+6, r25	; 0x06
    349a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    349c:	8d 81       	ldd	r24, Y+5	; 0x05
    349e:	9e 81       	ldd	r25, Y+6	; 0x06
    34a0:	00 97       	sbiw	r24, 0x00	; 0
    34a2:	69 f7       	brne	.-38     	; 0x347e <LoginHandler+0x6cc>
    34a4:	14 c0       	rjmp	.+40     	; 0x34ce <LoginHandler+0x71c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a6:	6f 81       	ldd	r22, Y+7	; 0x07
    34a8:	78 85       	ldd	r23, Y+8	; 0x08
    34aa:	89 85       	ldd	r24, Y+9	; 0x09
    34ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	9e 83       	std	Y+6, r25	; 0x06
    34b8:	8d 83       	std	Y+5, r24	; 0x05
    34ba:	8d 81       	ldd	r24, Y+5	; 0x05
    34bc:	9e 81       	ldd	r25, Y+6	; 0x06
    34be:	9a 83       	std	Y+2, r25	; 0x02
    34c0:	89 83       	std	Y+1, r24	; 0x01
    34c2:	89 81       	ldd	r24, Y+1	; 0x01
    34c4:	9a 81       	ldd	r25, Y+2	; 0x02
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	f1 f7       	brne	.-4      	; 0x34c6 <LoginHandler+0x714>
    34ca:	9a 83       	std	Y+2, r25	; 0x02
    34cc:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(450);
				CLCD_voidSendData('.');
    34ce:	8e e2       	ldi	r24, 0x2E	; 46
    34d0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
    34d4:	05 c0       	rjmp	.+10     	; 0x34e0 <LoginHandler+0x72e>
			}

			else
			{
				CLCD_voidSendCmd(1);
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <CLCD_voidSendCmd>
				LoginHandler();
    34dc:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LoginHandler>





}
    34e0:	c0 5b       	subi	r28, 0xB0	; 176
    34e2:	df 4f       	sbci	r29, 0xFF	; 255
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	cf 91       	pop	r28
    34f0:	df 91       	pop	r29
    34f2:	1f 91       	pop	r17
    34f4:	0f 91       	pop	r16
    34f6:	08 95       	ret

000034f8 <FanControl>:




void FanControl(void)
{
    34f8:	df 93       	push	r29
    34fa:	cf 93       	push	r28
    34fc:	00 d0       	rcall	.+0      	; 0x34fe <FanControl+0x6>
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u8DigitalReading;
	uint8 Local_u8Tempereature;

	ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH7, (uint16*)&Local_u8DigitalReading);
    3502:	9e 01       	movw	r18, r28
    3504:	2e 5f       	subi	r18, 0xFE	; 254
    3506:	3f 4f       	sbci	r19, 0xFF	; 255
    3508:	87 e0       	ldi	r24, 0x07	; 7
    350a:	b9 01       	movw	r22, r18
    350c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8StartConversionSynch>

	Local_u8Tempereature = LM35_u8GetTempreature(Local_u8DigitalReading);
    3510:	8a 81       	ldd	r24, Y+2	; 0x02
    3512:	0e 94 32 13 	call	0x2664	; 0x2664 <LM35_u8GetTempreature>
    3516:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidGoToXY(6,0);
    3518:	86 e0       	ldi	r24, 0x06	; 6
    351a:	60 e0       	ldi	r22, 0x00	; 0
    351c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>
	CLCD_voidSendNumber(Local_u8Tempereature);
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	88 2f       	mov	r24, r24
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	a0 e0       	ldi	r26, 0x00	; 0
    3528:	b0 e0       	ldi	r27, 0x00	; 0
    352a:	bc 01       	movw	r22, r24
    352c:	cd 01       	movw	r24, r26
    352e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <CLCD_voidSendNumber>

	if (Local_u8Tempereature > 35)
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	84 32       	cpi	r24, 0x24	; 36
    3536:	68 f0       	brcs	.+26     	; 0x3552 <FanControl+0x5a>
	{
		DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN1, DIO_u8PIN_HIGH); /*coil of the relay activated so fan is on*/
    3538:	83 e0       	ldi	r24, 0x03	; 3
    353a:	61 e0       	ldi	r22, 0x01	; 1
    353c:	41 e0       	ldi	r20, 0x01	; 1
    353e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
		CLCD_voidGoToXY(15,0);
    3542:	8f e0       	ldi	r24, 0x0F	; 15
    3544:	60 e0       	ldi	r22, 0x00	; 0
    3546:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>
		CLCD_voidSendData('M');
    354a:	8d e4       	ldi	r24, 0x4D	; 77
    354c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
    3550:	0f c0       	rjmp	.+30     	; 0x3570 <FanControl+0x78>
	}

	else if (Local_u8Tempereature < 30)
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	8e 31       	cpi	r24, 0x1E	; 30
    3556:	60 f4       	brcc	.+24     	; 0x3570 <FanControl+0x78>
	{
		DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN1, DIO_u8PIN_LOW); /*coil of the relay activated so fan is off*/
    3558:	83 e0       	ldi	r24, 0x03	; 3
    355a:	61 e0       	ldi	r22, 0x01	; 1
    355c:	40 e0       	ldi	r20, 0x00	; 0
    355e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
		CLCD_voidGoToXY(15,0);
    3562:	8f e0       	ldi	r24, 0x0F	; 15
    3564:	60 e0       	ldi	r22, 0x00	; 0
    3566:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    356a:	80 e2       	ldi	r24, 0x20	; 32
    356c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <CLCD_voidSendData>
	}
}
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0
    3574:	cf 91       	pop	r28
    3576:	df 91       	pop	r29
    3578:	08 95       	ret

0000357a <LightsControl>:




void LightsControl(void)
{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	00 d0       	rcall	.+0      	; 0x3580 <LightsControl+0x6>
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62

	uint8 Local_u8LEDsNum;
	uint8 Local_u8DigitalReading;

	/*if unclear, refer to the proteus -> 34_SemiSmartHome_v1*/
	DIO_u8SetPinValue(DIO_u8PORTC, DIO_u8PIN7, DIO_u8PIN_HIGH); /*closing the SSD by sending HIGH to the COM Cathode*/
    3584:	82 e0       	ldi	r24, 0x02	; 2
    3586:	67 e0       	ldi	r22, 0x07	; 7
    3588:	41 e0       	ldi	r20, 0x01	; 1
    358a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN6, DIO_u8PIN_LOW);  /*Activating LEDs by sending low to the COM cathode*/
    358e:	83 e0       	ldi	r24, 0x03	; 3
    3590:	66 e0       	ldi	r22, 0x06	; 6
    3592:	40 e0       	ldi	r20, 0x00	; 0
    3594:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_u8SetPinValue>

	ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH0, (uint16*)&Local_u8DigitalReading);
    3598:	9e 01       	movw	r18, r28
    359a:	2e 5f       	subi	r18, 0xFE	; 254
    359c:	3f 4f       	sbci	r19, 0xFF	; 255
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	b9 01       	movw	r22, r18
    35a2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8StartConversionSynch>

	if (Local_u8DigitalReading < 20)
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	84 31       	cpi	r24, 0x14	; 20
    35aa:	38 f4       	brcc	.+14     	; 0x35ba <LightsControl+0x40>
	{
		DIO_u8SetPortValue(DIO_u8PORTC,-1);
    35ac:	82 e0       	ldi	r24, 0x02	; 2
    35ae:	6f ef       	ldi	r22, 0xFF	; 255
    35b0:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortValue>
		Local_u8LEDsNum = 7;
    35b4:	87 e0       	ldi	r24, 0x07	; 7
    35b6:	89 83       	std	Y+1, r24	; 0x01
    35b8:	46 c0       	rjmp	.+140    	; 0x3646 <LightsControl+0xcc>
	}

	else if((Local_u8DigitalReading > 20) && (Local_u8DigitalReading < 40))
    35ba:	8a 81       	ldd	r24, Y+2	; 0x02
    35bc:	85 31       	cpi	r24, 0x15	; 21
    35be:	50 f0       	brcs	.+20     	; 0x35d4 <LightsControl+0x5a>
    35c0:	8a 81       	ldd	r24, Y+2	; 0x02
    35c2:	88 32       	cpi	r24, 0x28	; 40
    35c4:	38 f4       	brcc	.+14     	; 0x35d4 <LightsControl+0x5a>
	{
		DIO_u8SetPortValue(DIO_u8PORTC, 0b11111110);
    35c6:	82 e0       	ldi	r24, 0x02	; 2
    35c8:	6e ef       	ldi	r22, 0xFE	; 254
    35ca:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortValue>
		Local_u8LEDsNum = 6;
    35ce:	86 e0       	ldi	r24, 0x06	; 6
    35d0:	89 83       	std	Y+1, r24	; 0x01
    35d2:	39 c0       	rjmp	.+114    	; 0x3646 <LightsControl+0xcc>
	}

	else if((Local_u8DigitalReading > 50) && (Local_u8DigitalReading < 60))
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	83 33       	cpi	r24, 0x33	; 51
    35d8:	50 f0       	brcs	.+20     	; 0x35ee <LightsControl+0x74>
    35da:	8a 81       	ldd	r24, Y+2	; 0x02
    35dc:	8c 33       	cpi	r24, 0x3C	; 60
    35de:	38 f4       	brcc	.+14     	; 0x35ee <LightsControl+0x74>
	{
		DIO_u8SetPortValue(DIO_u8PORTC, 0b11111100);
    35e0:	82 e0       	ldi	r24, 0x02	; 2
    35e2:	6c ef       	ldi	r22, 0xFC	; 252
    35e4:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortValue>
		Local_u8LEDsNum = 5;
    35e8:	85 e0       	ldi	r24, 0x05	; 5
    35ea:	89 83       	std	Y+1, r24	; 0x01
    35ec:	2c c0       	rjmp	.+88     	; 0x3646 <LightsControl+0xcc>
	}

	else if((Local_u8DigitalReading > 60) && (Local_u8DigitalReading < 70))
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	8d 33       	cpi	r24, 0x3D	; 61
    35f2:	50 f0       	brcs	.+20     	; 0x3608 <LightsControl+0x8e>
    35f4:	8a 81       	ldd	r24, Y+2	; 0x02
    35f6:	86 34       	cpi	r24, 0x46	; 70
    35f8:	38 f4       	brcc	.+14     	; 0x3608 <LightsControl+0x8e>
	{
		DIO_u8SetPortValue(DIO_u8PORTC, 0b11111000);
    35fa:	82 e0       	ldi	r24, 0x02	; 2
    35fc:	68 ef       	ldi	r22, 0xF8	; 248
    35fe:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortValue>
		Local_u8LEDsNum = 4;
    3602:	84 e0       	ldi	r24, 0x04	; 4
    3604:	89 83       	std	Y+1, r24	; 0x01
    3606:	1f c0       	rjmp	.+62     	; 0x3646 <LightsControl+0xcc>
	}

	else if((Local_u8DigitalReading > 70) && (Local_u8DigitalReading < 80))
    3608:	8a 81       	ldd	r24, Y+2	; 0x02
    360a:	87 34       	cpi	r24, 0x47	; 71
    360c:	50 f0       	brcs	.+20     	; 0x3622 <LightsControl+0xa8>
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	80 35       	cpi	r24, 0x50	; 80
    3612:	38 f4       	brcc	.+14     	; 0x3622 <LightsControl+0xa8>
	{
		DIO_u8SetPortValue(DIO_u8PORTC, 0b11110000);
    3614:	82 e0       	ldi	r24, 0x02	; 2
    3616:	60 ef       	ldi	r22, 0xF0	; 240
    3618:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortValue>
		Local_u8LEDsNum = 3;
    361c:	83 e0       	ldi	r24, 0x03	; 3
    361e:	89 83       	std	Y+1, r24	; 0x01
    3620:	12 c0       	rjmp	.+36     	; 0x3646 <LightsControl+0xcc>
	}

	else if((Local_u8DigitalReading > 80) && (Local_u8DigitalReading < 90))
    3622:	8a 81       	ldd	r24, Y+2	; 0x02
    3624:	81 35       	cpi	r24, 0x51	; 81
    3626:	50 f0       	brcs	.+20     	; 0x363c <LightsControl+0xc2>
    3628:	8a 81       	ldd	r24, Y+2	; 0x02
    362a:	8a 35       	cpi	r24, 0x5A	; 90
    362c:	38 f4       	brcc	.+14     	; 0x363c <LightsControl+0xc2>
	{
		DIO_u8SetPortValue(DIO_u8PORTC, 0b11100000);
    362e:	82 e0       	ldi	r24, 0x02	; 2
    3630:	60 ee       	ldi	r22, 0xE0	; 224
    3632:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortValue>
		Local_u8LEDsNum = 2;
    3636:	82 e0       	ldi	r24, 0x02	; 2
    3638:	89 83       	std	Y+1, r24	; 0x01
    363a:	05 c0       	rjmp	.+10     	; 0x3646 <LightsControl+0xcc>
	}

	else
	{
		DIO_u8SetPortValue(DIO_u8PORTC, 0b10000000);
    363c:	82 e0       	ldi	r24, 0x02	; 2
    363e:	60 e8       	ldi	r22, 0x80	; 128
    3640:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortValue>
		Local_u8LEDsNum = 0;
    3644:	19 82       	std	Y+1, r1	; 0x01
	}

	CLCD_voidGoToXY(6,1);
    3646:	86 e0       	ldi	r24, 0x06	; 6
    3648:	61 e0       	ldi	r22, 0x01	; 1
    364a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>
	CLCD_voidSendNumber(Local_u8LEDsNum);
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	88 2f       	mov	r24, r24
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	a0 e0       	ldi	r26, 0x00	; 0
    3656:	b0 e0       	ldi	r27, 0x00	; 0
    3658:	bc 01       	movw	r22, r24
    365a:	cd 01       	movw	r24, r26
    365c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <CLCD_voidSendNumber>
}
    3660:	0f 90       	pop	r0
    3662:	0f 90       	pop	r0
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <Dashboard>:

void Dashboard(void)
{
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
	CLCD_u8SendString("Temp:   'C");
    3672:	8f ed       	ldi	r24, 0xDF	; 223
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>

	CLCD_voidGoToXY(0,1);
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	61 e0       	ldi	r22, 0x01	; 1
    367e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>

	CLCD_u8SendString("LEDs: ");
    3682:	8a ee       	ldi	r24, 0xEA	; 234
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>

}
    368a:	cf 91       	pop	r28
    368c:	df 91       	pop	r29
    368e:	08 95       	ret

00003690 <ShutDown>:

void ShutDown(void)
{
    3690:	df 93       	push	r29
    3692:	cf 93       	push	r28
    3694:	cd b7       	in	r28, 0x3d	; 61
    3696:	de b7       	in	r29, 0x3e	; 62
    3698:	2e 97       	sbiw	r28, 0x0e	; 14
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	f8 94       	cli
    369e:	de bf       	out	0x3e, r29	; 62
    36a0:	0f be       	out	0x3f, r0	; 63
    36a2:	cd bf       	out	0x3d, r28	; 61


	CLCD_voidSendCmd(1);
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	0e 94 ce 07 	call	0xf9c	; 0xf9c <CLCD_voidSendCmd>
	CLCD_voidGoToXY(4,0);
    36aa:	84 e0       	ldi	r24, 0x04	; 4
    36ac:	60 e0       	ldi	r22, 0x00	; 0
    36ae:	0e 94 5e 09 	call	0x12bc	; 0x12bc <CLCD_voidGoToXY>
	CLCD_u8SendString("Good Bye");
    36b2:	81 ef       	ldi	r24, 0xF1	; 241
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	0e 94 9e 08 	call	0x113c	; 0x113c <CLCD_u8SendString>
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	90 e8       	ldi	r25, 0x80	; 128
    36be:	ab eb       	ldi	r26, 0xBB	; 187
    36c0:	b4 e4       	ldi	r27, 0x44	; 68
    36c2:	8b 87       	std	Y+11, r24	; 0x0b
    36c4:	9c 87       	std	Y+12, r25	; 0x0c
    36c6:	ad 87       	std	Y+13, r26	; 0x0d
    36c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    36cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	4a e7       	ldi	r20, 0x7A	; 122
    36d8:	55 e4       	ldi	r21, 0x45	; 69
    36da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	8f 83       	std	Y+7, r24	; 0x07
    36e4:	98 87       	std	Y+8, r25	; 0x08
    36e6:	a9 87       	std	Y+9, r26	; 0x09
    36e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36ea:	6f 81       	ldd	r22, Y+7	; 0x07
    36ec:	78 85       	ldd	r23, Y+8	; 0x08
    36ee:	89 85       	ldd	r24, Y+9	; 0x09
    36f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	40 e8       	ldi	r20, 0x80	; 128
    36f8:	5f e3       	ldi	r21, 0x3F	; 63
    36fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36fe:	88 23       	and	r24, r24
    3700:	2c f4       	brge	.+10     	; 0x370c <ShutDown+0x7c>
		__ticks = 1;
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	9e 83       	std	Y+6, r25	; 0x06
    3708:	8d 83       	std	Y+5, r24	; 0x05
    370a:	3f c0       	rjmp	.+126    	; 0x378a <ShutDown+0xfa>
	else if (__tmp > 65535)
    370c:	6f 81       	ldd	r22, Y+7	; 0x07
    370e:	78 85       	ldd	r23, Y+8	; 0x08
    3710:	89 85       	ldd	r24, Y+9	; 0x09
    3712:	9a 85       	ldd	r25, Y+10	; 0x0a
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	3f ef       	ldi	r19, 0xFF	; 255
    3718:	4f e7       	ldi	r20, 0x7F	; 127
    371a:	57 e4       	ldi	r21, 0x47	; 71
    371c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3720:	18 16       	cp	r1, r24
    3722:	4c f5       	brge	.+82     	; 0x3776 <ShutDown+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3724:	6b 85       	ldd	r22, Y+11	; 0x0b
    3726:	7c 85       	ldd	r23, Y+12	; 0x0c
    3728:	8d 85       	ldd	r24, Y+13	; 0x0d
    372a:	9e 85       	ldd	r25, Y+14	; 0x0e
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	40 e2       	ldi	r20, 0x20	; 32
    3732:	51 e4       	ldi	r21, 0x41	; 65
    3734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	bc 01       	movw	r22, r24
    373e:	cd 01       	movw	r24, r26
    3740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	9e 83       	std	Y+6, r25	; 0x06
    374a:	8d 83       	std	Y+5, r24	; 0x05
    374c:	0f c0       	rjmp	.+30     	; 0x376c <ShutDown+0xdc>
    374e:	80 e9       	ldi	r24, 0x90	; 144
    3750:	91 e0       	ldi	r25, 0x01	; 1
    3752:	9c 83       	std	Y+4, r25	; 0x04
    3754:	8b 83       	std	Y+3, r24	; 0x03
    3756:	8b 81       	ldd	r24, Y+3	; 0x03
    3758:	9c 81       	ldd	r25, Y+4	; 0x04
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	f1 f7       	brne	.-4      	; 0x375a <ShutDown+0xca>
    375e:	9c 83       	std	Y+4, r25	; 0x04
    3760:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3762:	8d 81       	ldd	r24, Y+5	; 0x05
    3764:	9e 81       	ldd	r25, Y+6	; 0x06
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	9e 83       	std	Y+6, r25	; 0x06
    376a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    376c:	8d 81       	ldd	r24, Y+5	; 0x05
    376e:	9e 81       	ldd	r25, Y+6	; 0x06
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	69 f7       	brne	.-38     	; 0x374e <ShutDown+0xbe>
    3774:	14 c0       	rjmp	.+40     	; 0x379e <ShutDown+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3776:	6f 81       	ldd	r22, Y+7	; 0x07
    3778:	78 85       	ldd	r23, Y+8	; 0x08
    377a:	89 85       	ldd	r24, Y+9	; 0x09
    377c:	9a 85       	ldd	r25, Y+10	; 0x0a
    377e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	9e 83       	std	Y+6, r25	; 0x06
    3788:	8d 83       	std	Y+5, r24	; 0x05
    378a:	8d 81       	ldd	r24, Y+5	; 0x05
    378c:	9e 81       	ldd	r25, Y+6	; 0x06
    378e:	9a 83       	std	Y+2, r25	; 0x02
    3790:	89 83       	std	Y+1, r24	; 0x01
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	9a 81       	ldd	r25, Y+2	; 0x02
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	f1 f7       	brne	.-4      	; 0x3796 <ShutDown+0x106>
    379a:	9a 83       	std	Y+2, r25	; 0x02
    379c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);

	DIO_u8SetPortDirection(DIO_u8PORTA, DIO_u8PIN_INPUT);
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTB, DIO_u8PIN_INPUT);
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	60 e0       	ldi	r22, 0x00	; 0
    37aa:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTC, DIO_u8PIN_INPUT);
    37ae:	82 e0       	ldi	r24, 0x02	; 2
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTD, DIO_u8PIN_INPUT);
    37b6:	83 e0       	ldi	r24, 0x03	; 3
    37b8:	60 e0       	ldi	r22, 0x00	; 0
    37ba:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <DIO_u8SetPortDirection>

	DIO_u8SetPortValue(DIO_u8PORTA, 0xff);
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	6f ef       	ldi	r22, 0xFF	; 255
    37c2:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortValue>
	DIO_u8SetPortValue(DIO_u8PORTB, 0);
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	60 e0       	ldi	r22, 0x00	; 0
    37ca:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortValue>
	DIO_u8SetPortValue(DIO_u8PORTC, 0);
    37ce:	82 e0       	ldi	r24, 0x02	; 2
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortValue>
	DIO_u8SetPortValue(DIO_u8PORTD, 0);
    37d6:	83 e0       	ldi	r24, 0x03	; 3
    37d8:	60 e0       	ldi	r22, 0x00	; 0
    37da:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <DIO_u8SetPortValue>
}
    37de:	2e 96       	adiw	r28, 0x0e	; 14
    37e0:	0f b6       	in	r0, 0x3f	; 63
    37e2:	f8 94       	cli
    37e4:	de bf       	out	0x3e, r29	; 62
    37e6:	0f be       	out	0x3f, r0	; 63
    37e8:	cd bf       	out	0x3d, r28	; 61
    37ea:	cf 91       	pop	r28
    37ec:	df 91       	pop	r29
    37ee:	08 95       	ret

000037f0 <__mulsi3>:
    37f0:	62 9f       	mul	r22, r18
    37f2:	d0 01       	movw	r26, r0
    37f4:	73 9f       	mul	r23, r19
    37f6:	f0 01       	movw	r30, r0
    37f8:	82 9f       	mul	r24, r18
    37fa:	e0 0d       	add	r30, r0
    37fc:	f1 1d       	adc	r31, r1
    37fe:	64 9f       	mul	r22, r20
    3800:	e0 0d       	add	r30, r0
    3802:	f1 1d       	adc	r31, r1
    3804:	92 9f       	mul	r25, r18
    3806:	f0 0d       	add	r31, r0
    3808:	83 9f       	mul	r24, r19
    380a:	f0 0d       	add	r31, r0
    380c:	74 9f       	mul	r23, r20
    380e:	f0 0d       	add	r31, r0
    3810:	65 9f       	mul	r22, r21
    3812:	f0 0d       	add	r31, r0
    3814:	99 27       	eor	r25, r25
    3816:	72 9f       	mul	r23, r18
    3818:	b0 0d       	add	r27, r0
    381a:	e1 1d       	adc	r30, r1
    381c:	f9 1f       	adc	r31, r25
    381e:	63 9f       	mul	r22, r19
    3820:	b0 0d       	add	r27, r0
    3822:	e1 1d       	adc	r30, r1
    3824:	f9 1f       	adc	r31, r25
    3826:	bd 01       	movw	r22, r26
    3828:	cf 01       	movw	r24, r30
    382a:	11 24       	eor	r1, r1
    382c:	08 95       	ret

0000382e <__divmodsi4>:
    382e:	97 fb       	bst	r25, 7
    3830:	09 2e       	mov	r0, r25
    3832:	05 26       	eor	r0, r21
    3834:	0e d0       	rcall	.+28     	; 0x3852 <__divmodsi4_neg1>
    3836:	57 fd       	sbrc	r21, 7
    3838:	04 d0       	rcall	.+8      	; 0x3842 <__divmodsi4_neg2>
    383a:	14 d0       	rcall	.+40     	; 0x3864 <__udivmodsi4>
    383c:	0a d0       	rcall	.+20     	; 0x3852 <__divmodsi4_neg1>
    383e:	00 1c       	adc	r0, r0
    3840:	38 f4       	brcc	.+14     	; 0x3850 <__divmodsi4_exit>

00003842 <__divmodsi4_neg2>:
    3842:	50 95       	com	r21
    3844:	40 95       	com	r20
    3846:	30 95       	com	r19
    3848:	21 95       	neg	r18
    384a:	3f 4f       	sbci	r19, 0xFF	; 255
    384c:	4f 4f       	sbci	r20, 0xFF	; 255
    384e:	5f 4f       	sbci	r21, 0xFF	; 255

00003850 <__divmodsi4_exit>:
    3850:	08 95       	ret

00003852 <__divmodsi4_neg1>:
    3852:	f6 f7       	brtc	.-4      	; 0x3850 <__divmodsi4_exit>
    3854:	90 95       	com	r25
    3856:	80 95       	com	r24
    3858:	70 95       	com	r23
    385a:	61 95       	neg	r22
    385c:	7f 4f       	sbci	r23, 0xFF	; 255
    385e:	8f 4f       	sbci	r24, 0xFF	; 255
    3860:	9f 4f       	sbci	r25, 0xFF	; 255
    3862:	08 95       	ret

00003864 <__udivmodsi4>:
    3864:	a1 e2       	ldi	r26, 0x21	; 33
    3866:	1a 2e       	mov	r1, r26
    3868:	aa 1b       	sub	r26, r26
    386a:	bb 1b       	sub	r27, r27
    386c:	fd 01       	movw	r30, r26
    386e:	0d c0       	rjmp	.+26     	; 0x388a <__udivmodsi4_ep>

00003870 <__udivmodsi4_loop>:
    3870:	aa 1f       	adc	r26, r26
    3872:	bb 1f       	adc	r27, r27
    3874:	ee 1f       	adc	r30, r30
    3876:	ff 1f       	adc	r31, r31
    3878:	a2 17       	cp	r26, r18
    387a:	b3 07       	cpc	r27, r19
    387c:	e4 07       	cpc	r30, r20
    387e:	f5 07       	cpc	r31, r21
    3880:	20 f0       	brcs	.+8      	; 0x388a <__udivmodsi4_ep>
    3882:	a2 1b       	sub	r26, r18
    3884:	b3 0b       	sbc	r27, r19
    3886:	e4 0b       	sbc	r30, r20
    3888:	f5 0b       	sbc	r31, r21

0000388a <__udivmodsi4_ep>:
    388a:	66 1f       	adc	r22, r22
    388c:	77 1f       	adc	r23, r23
    388e:	88 1f       	adc	r24, r24
    3890:	99 1f       	adc	r25, r25
    3892:	1a 94       	dec	r1
    3894:	69 f7       	brne	.-38     	; 0x3870 <__udivmodsi4_loop>
    3896:	60 95       	com	r22
    3898:	70 95       	com	r23
    389a:	80 95       	com	r24
    389c:	90 95       	com	r25
    389e:	9b 01       	movw	r18, r22
    38a0:	ac 01       	movw	r20, r24
    38a2:	bd 01       	movw	r22, r26
    38a4:	cf 01       	movw	r24, r30
    38a6:	08 95       	ret

000038a8 <__prologue_saves__>:
    38a8:	2f 92       	push	r2
    38aa:	3f 92       	push	r3
    38ac:	4f 92       	push	r4
    38ae:	5f 92       	push	r5
    38b0:	6f 92       	push	r6
    38b2:	7f 92       	push	r7
    38b4:	8f 92       	push	r8
    38b6:	9f 92       	push	r9
    38b8:	af 92       	push	r10
    38ba:	bf 92       	push	r11
    38bc:	cf 92       	push	r12
    38be:	df 92       	push	r13
    38c0:	ef 92       	push	r14
    38c2:	ff 92       	push	r15
    38c4:	0f 93       	push	r16
    38c6:	1f 93       	push	r17
    38c8:	cf 93       	push	r28
    38ca:	df 93       	push	r29
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	ca 1b       	sub	r28, r26
    38d2:	db 0b       	sbc	r29, r27
    38d4:	0f b6       	in	r0, 0x3f	; 63
    38d6:	f8 94       	cli
    38d8:	de bf       	out	0x3e, r29	; 62
    38da:	0f be       	out	0x3f, r0	; 63
    38dc:	cd bf       	out	0x3d, r28	; 61
    38de:	09 94       	ijmp

000038e0 <__epilogue_restores__>:
    38e0:	2a 88       	ldd	r2, Y+18	; 0x12
    38e2:	39 88       	ldd	r3, Y+17	; 0x11
    38e4:	48 88       	ldd	r4, Y+16	; 0x10
    38e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    38e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    38ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    38ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    38ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    38f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    38f2:	b9 84       	ldd	r11, Y+9	; 0x09
    38f4:	c8 84       	ldd	r12, Y+8	; 0x08
    38f6:	df 80       	ldd	r13, Y+7	; 0x07
    38f8:	ee 80       	ldd	r14, Y+6	; 0x06
    38fa:	fd 80       	ldd	r15, Y+5	; 0x05
    38fc:	0c 81       	ldd	r16, Y+4	; 0x04
    38fe:	1b 81       	ldd	r17, Y+3	; 0x03
    3900:	aa 81       	ldd	r26, Y+2	; 0x02
    3902:	b9 81       	ldd	r27, Y+1	; 0x01
    3904:	ce 0f       	add	r28, r30
    3906:	d1 1d       	adc	r29, r1
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	cd bf       	out	0x3d, r28	; 61
    3912:	ed 01       	movw	r28, r26
    3914:	08 95       	ret

00003916 <_exit>:
    3916:	f8 94       	cli

00003918 <__stop_program>:
    3918:	ff cf       	rjmp	.-2      	; 0x3918 <__stop_program>
